language: notypes.py
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     if l[0] < l[1]:\n            return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \        else:\n            return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return l[0] < l[1] and monotonic(l[1:]) or l[0] > l[1] and monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnf27o22.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbnf27o22.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpbnf27o22.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n\
    \            if l[i] > l[i + 1]:\n                return False\n    else:\n  \
    \      for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n        \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n        return True\n    else:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n     \
    \   return True\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    else:\n   \
    \     return (l[0] < l[1] and monotonic(l[1:])) or (l[0] > l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3bkh93f.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt3bkh93f.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpt3bkh93f.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(1, len(l) - 1):\n            if l[i] > l[i + 1]:\n   \
    \             return False\n    else:\n        for i in range(1, len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return (all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or\n            all(l[i] >= l[i+1] for i in range(len(l)-1)))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return monotonic(l[1:])\n    elif l[0] > l[1]:\n        return monotonic(l[1:])\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp57g6l1rb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp57g6l1rb.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp57g6l1rb.py\", line 22,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] < l[1] and monotonic(l[1:])) or (l[0] > l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ct29hoe.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1ct29hoe.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1ct29hoe.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    else:\n   \
    \     if l[0] < l[1]:\n            return monotonic(l[1:])\n        elif l[0]\
    \ > l[1]:\n            return monotonic(l[1:])\n        else:\n            return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqagd7wtp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqagd7wtp.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpqagd7wtp.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] < l[1] and monotonic(l[1:])) or (l[0] > l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ct29hoe.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1ct29hoe.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1ct29hoe.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(x < y for x, y in zip(l, l[1:]))\n    else:\n        return\
    \ all(x > y for x, y in zip(l, l[1:]))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3hri49s.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu3hri49s.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpu3hri49s.py\", line 23,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    elif l[0] > l[1]:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] < l[1] and monotonic(l[1:])) or (l[0] > l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ct29hoe.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1ct29hoe.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1ct29hoe.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n\
    \            if l[i] > l[i + 1]:\n                return False\n    else:\n  \
    \      for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n        \
    \        return False\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    elif l[0] <\
    \ l[1]:\n        return monotonic(l[1:])\n    elif l[0] > l[1]:\n        return\
    \ monotonic(l[1:])\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_47cxae.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpx_47cxae.py\", line 30,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpx_47cxae.py\", line 22,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    elif l[0] <\
    \ l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] < l[1] and monotonic(l[1:])) or (l[0] > l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ct29hoe.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1ct29hoe.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1ct29hoe.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     if l[0] < l[1]:\n            return monotonic(l[1:])\n        elif l[0]\
    \ > l[1]:\n            return monotonic(l[1:])\n        else:\n            return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdsoxgdwn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdsoxgdwn.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpdsoxgdwn.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] < l[1] and monotonic(l[1:])) or (l[0] > l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ct29hoe.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1ct29hoe.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1ct29hoe.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) == 1:\n        return True\n    else:\n   \
    \     return (l[0] < l[1] and monotonic(l[1:])) or (l[0] > l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3bkh93f.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt3bkh93f.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpt3bkh93f.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] < l[1] and monotonic(l[1:])) or (l[0] > l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ct29hoe.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1ct29hoe.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1ct29hoe.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return (all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or\n            all(l[i] >= l[i+1] for i in range(len(l)-1)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    elif l[0] <\
    \ l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(1, len(l) - 1):\n            if l[i] > l[i + 1]:\n   \
    \             return False\n    else:\n        for i in range(1, len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n\
    \            if l[i] > l[i + 1]:\n                return False\n    else:\n  \
    \      for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n        \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] <= l[1] and monotonic(l[1:])) or (l[0] >= l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps68egkih.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmps68egkih.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmps68egkih.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    return all(l[i]\
    \ >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] <= l[1] and monotonic(l[1:])) or (l[0] >= l[1] and monotonic(l[1:]))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgumbkfo9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgumbkfo9.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgumbkfo9.py\", line 19,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] <= l[1] and monotonic(l[1:])) or (l[0] >= l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps68egkih.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmps68egkih.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmps68egkih.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] < l[1] and monotonic(l[1:])) or (l[0] > l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ct29hoe.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1ct29hoe.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1ct29hoe.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n\
    \            if l[i] > l[i + 1]:\n                return False\n    else:\n  \
    \      for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n        \
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return l[0] < l[1] and monotonic(l[1:]) or l[0] > l[1] and monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnf27o22.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbnf27o22.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpbnf27o22.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     if l[0] < l[1]:\n            return monotonic(l[1:])\n        elif l[0]\
    \ > l[1]:\n            return monotonic(l[1:])\n        else:\n            return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdsoxgdwn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdsoxgdwn.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpdsoxgdwn.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     if l[0] < l[1]:\n            return monotonic(l[1:])\n        elif l[0]\
    \ > l[1]:\n            return monotonic(l[1:])\n        else:\n            return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdsoxgdwn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdsoxgdwn.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpdsoxgdwn.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    return (l[0]\
    \ <= l[1] and monotonic(l[1:])) or (l[0] >= l[1] and monotonic(l[1:]))\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9p5yek3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpp9p5yek3.py\", line 25,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpp9p5yek3.py\", line 17,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return (all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or\n            all(l[i] >= l[i+1] for i in range(len(l)-1)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] <= l[1] and monotonic(l[1:])) or (l[0] >= l[1] and monotonic(l[1:]))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgumbkfo9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpgumbkfo9.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgumbkfo9.py\", line 19,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return (l[0] <= l[1] and monotonic(l[1:])) or (l[0] >= l[1] and monotonic(l[1:]))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps68egkih.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmps68egkih.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmps68egkih.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if l[0] < l[1]:\n        return all(l[i] <= l[i+1] for\
    \ i in range(len(l)-1))\n    else:\n        return all(l[i] >= l[i+1] for i in\
    \ range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n      \
    \          return False\n    else:\n        for i in range(len(l) - 1):\n    \
    \        if l[i] < l[i + 1]:\n                return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n    \
    \    return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or\
    \ all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def monotonic(l):\n    \"\"\"Return True is list elements are monotonically\
    \ increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>>\
    \ monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n  \
    \  True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n   \
    \     return l[0] < l[1] and monotonic(l[1:]) or l[0] > l[1] and monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnf27o22.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbnf27o22.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpbnf27o22.py\", line 18,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
