language: notypes.py
name: HumanEval_102_choose_num
results:
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa42e160d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa42e160d.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa42e160d.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x + 1 <= y:\n        return x + 1\n    else:\n      \
    \  return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rpe5q1x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3rpe5q1x.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3rpe5q1x.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        if x % 2\
    \ == 0:\n            return x\n        else:\n            return -1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpay_od4x6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpay_od4x6.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpay_od4x6.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    else:\n        return x + 1\n    # END OF YOUR CODE\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7mea2xux.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7mea2xux.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7mea2xux.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    else:\n        return x + 1\n    # END OF YOUR CODE\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7mea2xux.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7mea2xux.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7mea2xux.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskgll8g8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpskgll8g8.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpskgll8g8.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x < y:\n        return choose_num(x + 1, y)\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmfdfntus.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmfdfntus.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmfdfntus.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x + 1 <= y:\n        return x + 1\n    else:\n      \
    \  return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rpe5q1x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3rpe5q1x.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3rpe5q1x.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99pw3pbn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp99pw3pbn.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp99pw3pbn.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x != y:\n        return x + 1\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpde6k1fv6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpde6k1fv6.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpde6k1fv6.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return max(x, y)\n    else:\n        return max(x + 1, y)\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjzmv7fx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdjzmv7fx.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdjzmv7fx.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    for i in range(x,\
    \ y+1):\n        if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqun97g_1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqun97g_1.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqun97g_1.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq521bzua.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq521bzua.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq521bzua.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    else:\n        return x + 1\n    if x > y:\n        return -1\n    else:\n\
    \        return y\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7knlz8zm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7knlz8zm.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7knlz8zm.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq521bzua.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq521bzua.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq521bzua.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x%2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi5gb3ez8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpi5gb3ez8.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpi5gb3ez8.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x+1 <= y:\n        return x+1\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphssjw3t0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphssjw3t0.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmphssjw3t0.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x != y:\n        return x + 1\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpde6k1fv6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpde6k1fv6.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpde6k1fv6.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # Your code here\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        if x > y:\n\
    \            return -1\n        else:\n            return x\n    else:\n     \
    \   return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n \
    \   assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7kwtylga.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7kwtylga.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7kwtylga.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiootbigo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpiootbigo.py\", line 26,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpiootbigo.py\", line 16,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2==0:\n\
    \        return x\n    else:\n        return x+1\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjrg__yfk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjrg__yfk.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpjrg__yfk.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        if x > y:\n\
    \            return -1\n        else:\n            return x\n    else:\n     \
    \   return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n \
    \   assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpicx7tlk9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpicx7tlk9.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpicx7tlk9.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x%2 != 0:\n        x += 1\n        return x\n\
    \    elif x%2 != 0 and y%2 != 0:\n        return -1\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwbiwkzr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfwbiwkzr.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfwbiwkzr.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdajthyfo.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdajthyfo.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdajthyfo.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x + 1 <= y:\n        return x + 1\n    else:\n      \
    \  return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rpe5q1x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3rpe5q1x.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3rpe5q1x.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2==0:\n\
    \        return x\n    elif x%2!=0:\n        return x+1\n    else:\n        return\
    \ -1\n    pass\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmegrblhp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpmegrblhp.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpmegrblhp.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6oma3o0j.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6oma3o0j.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp6oma3o0j.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x + 1 <= y:\n        return x + 1\n    else:\n      \
    \  return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rpe5q1x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3rpe5q1x.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3rpe5q1x.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskgll8g8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpskgll8g8.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpskgll8g8.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    else:\n        return x + 1\n    if x > y:\n        return -1\n    else:\n\
    \        return x\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6tvby5n9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6tvby5n9.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp6tvby5n9.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdajthyfo.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdajthyfo.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdajthyfo.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    else:\n        return x+1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbksesmii.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbksesmii.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpbksesmii.py\", line 19,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5hhsinn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpw5hhsinn.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpw5hhsinn.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 < y:\n        return x + 1\n    else:\n        return -1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgts8kwid.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgts8kwid.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpgts8kwid.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x+1 == y:\n        return -1\n    else:\n   \
    \     return choose_num(x+1, y)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4blgdhtt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4blgdhtt.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4blgdhtt.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa42e160d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa42e160d.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa42e160d.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return max(range(x,\
    \ y + 1, 2))\n    else:\n        return max(range(x + 1, y + 1, 2))\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxcqvw53g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxcqvw53g.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxcqvw53g.py\", line 19,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmpxcqvw53g.py\"\
    , line 15, in choose_num\n    return max(range(x + 1, y + 1, 2))\nValueError:\
    \ max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    if x%2 == 0:\n        return x\n    else:\n        return x+1\n    if x%2\
    \ == 0:\n        return x\n    else:\n        return x+1\n    if x%2 == 0:\n \
    \       return x\n    else:\n        return x+1\n    if x%2 == 0:\n        return\
    \ x\n    else:\n        return x+1\n    if x%2 == 0:\n        return x\n    else:\n\
    \        return x+1\n    if x%2 == 0:\n        return x\n    else:\n        return\
    \ x+1\n    if x%2 == 0:\n        return x\n    else:\n        return x+1\n   \
    \ if x%2 == 0:\n        return x\n    else:\n        return x+1\n    if x%2 ==\
    \ 0:\n        return x\n    else:\n        return x+1\n    if x%2 == 0:\n    \
    \    return x\n    else:\n        return x+1\n    if x%2 == 0:\n        return\
    \ x\n    else:\n        return x+1\n    if x%2 == 0:\n        return x\n    else:\n\
    \        return x+1\n    if x%2 == 0:\n        return x\n    else:\n        return\
    \ x+1\n    if x%2 == 0:\n        return x\n    else:\n        return x+1\n   \
    \ if x%2 == 0:\n        return x\n    else:\n        return x+1\n    if x%2 ==\
    \ 0:\n        return x\n    else:\n        return x+1\n    if x%2 == 0:\n    \
    \    return x\n    else:\n        return x+1\n    if x%2 == 0:\n        return\
    \ x\n    else:\n        return x+1\n    if x%2 == 0:\n        return x\n    else:\n\
    \        return x+1\n    if x%2 == 0:\n        return x\n    else:\n        return\
    \ x+1\n    if x%2 == 0:\n        return x\n    else:\n        return x+1\n   \
    \ if x%2 == 0:\n        return x\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8s6jcov.py\", line\
    \ 113, in <module>\n    test_check()\n  File \"/tmp/tmpt8s6jcov.py\", line 111,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpt8s6jcov.py\", line 101,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    even_nums\
    \ = []\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            even_nums.append(i)\n\
    \    if even_nums == []:\n        return -1\n    else:\n        return max(even_nums)\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x%2 != 0:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkattlcp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkkattlcp.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpkkattlcp.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa42e160d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa42e160d.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa42e160d.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2wdy8ez.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpv2wdy8ez.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpv2wdy8ez.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0:\n        x += 1\n        return x\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4a0l1027.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4a0l1027.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4a0l1027.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x+1 == y:\n        return -1\n    else:\n   \
    \     return choose_num(x+1, y)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4blgdhtt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4blgdhtt.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4blgdhtt.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        if x > y:\n\
    \            return -1\n        else:\n            return x\n    else:\n     \
    \   return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n \
    \   assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpicx7tlk9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpicx7tlk9.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpicx7tlk9.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        if x + 1 <= y:\n       \
    \     return x + 1\n        else:\n            return -1\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ah0d254.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7ah0d254.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7ah0d254.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x%2 != 0:\n        x = x+1\n        if x%2 ==\
    \ 0:\n            return x\n        else:\n            return -1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfzkwzyxe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfzkwzyxe.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfzkwzyxe.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    if x % 2 != 0:\n        x += 1\n    if x % 2 == 0:\n\
    \        return x\n    else:\n        return -1\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pzx8njn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7pzx8njn.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7pzx8njn.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0:\n        x += 1\n        return x\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4a0l1027.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4a0l1027.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4a0l1027.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskgll8g8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpskgll8g8.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpskgll8g8.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa42e160d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa42e160d.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa42e160d.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x%2 != 0:\n        return x+1\n    else:\n  \
    \      return -1\n    pass\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v7kqwi0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1v7kqwi0.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp1v7kqwi0.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskgll8g8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpskgll8g8.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpskgll8g8.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99pw3pbn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp99pw3pbn.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp99pw3pbn.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    else:\n        return x + 1\n    if x > y:\n     \
    \   return -1\n    else:\n        return y\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vqu5ov3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7vqu5ov3.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7vqu5ov3.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x + 1 <= y:\n        return x + 1\n    else:\n      \
    \  return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rpe5q1x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3rpe5q1x.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3rpe5q1x.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    else:\n        x += 1\n        if x > y:\n       \
    \     return -1\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxi9eyjz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbxi9eyjz.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpbxi9eyjz.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    if x % 2 == 0:\n        return x\n    else:\n        x += 1\n    if x > y:\n\
    \        return -1\n    else:\n        return x\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0qtbhnaq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0qtbhnaq.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp0qtbhnaq.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2==0:\n\
    \        return x\n    elif x%2!=0:\n        x=x+1\n        return x\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpekmwdvj4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpekmwdvj4.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpekmwdvj4.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    else:\n        return x + 1\n    # END YOUR CODE\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpda5zksdm.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpda5zksdm.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpda5zksdm.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    for i in range(x, y+1):\n      \
    \  if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpev8ey7me.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpev8ey7me.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpev8ey7me.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x%2 != 0:\n        x = x+1\n        if x%2 ==\
    \ 0:\n            return x\n        else:\n            return -1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfzkwzyxe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfzkwzyxe.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfzkwzyxe.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    for i in range(x, y+1):\n      \
    \  if i % 2 == 0:\n            return i\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpev8ey7me.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpev8ey7me.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpev8ey7me.py\", line 18,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa42e160d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa42e160d.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa42e160d.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2==0:\n\
    \        return x\n    elif x%2!=0:\n        return x+1\n    else:\n        return\
    \ -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwoqf6ctk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwoqf6ctk.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpwoqf6ctk.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa42e160d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa42e160d.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa42e160d.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvw4jtylw.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvw4jtylw.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpvw4jtylw.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        if x % 2\
    \ == 0:\n            return x\n        else:\n            return -1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpay_od4x6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpay_od4x6.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpay_od4x6.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        return x + 1\n    elif x\
    \ % 2 != 0 and y % 2 != 0:\n        return -1\n    elif x % 2 != 0 and y % 2 ==\
    \ 0:\n        return y\n    elif x % 2 == 0 and y % 2 == 0:\n        return y\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppn795zzc.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmppn795zzc.py\", line 37,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppn795zzc.py\", line 27,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2==0:\n\
    \        return x\n    else:\n        return x+1\n    #raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi30o8auv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpi30o8auv.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpi30o8auv.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2==0:\n\
    \        return max(x,y)\n    else:\n        return max(x+1,y)\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4l92ej4s.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4l92ej4s.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4l92ej4s.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n  \
    \      return -1\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3gi67x_x.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3gi67x_x.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3gi67x_x.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n        return -1\n \
    \   elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshh1bg_x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpshh1bg_x.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpshh1bg_x.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    elif x > y:\n        return -1\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjbcin8t.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzjbcin8t.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzjbcin8t.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # Your code here\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4s3p7652.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4s3p7652.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4s3p7652.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n        return\
    \ x\n    else:\n        return -1\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33,\
    \ 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6,\
    \ 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) ==\
    \ -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuaqq8oab.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpuaqq8oab.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpuaqq8oab.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2wdy8ez.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpv2wdy8ez.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpv2wdy8ez.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        if x <=\
    \ y:\n            return x\n        else:\n            return -1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprr38cqr5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprr38cqr5.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprr38cqr5.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        if x <=\
    \ y:\n            return x\n        else:\n            return -1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprr38cqr5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprr38cqr5.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmprr38cqr5.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0:\n        x += 1\n        return x\n    elif x % 2 != 0 and\
    \ y % 2 != 0:\n        return -1\n    elif x % 2 != 0 and y % 2 == 0:\n      \
    \  return y\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n   \
    \ assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n \
    \   assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n  \
    \  assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlbvk01_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjlbvk01_.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpjlbvk01_.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa42e160d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa42e160d.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa42e160d.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return max(range(x,\
    \ y + 1, 2))\n    else:\n        return max(range(x + 1, y + 1, 2))\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxcqvw53g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxcqvw53g.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxcqvw53g.py\", line 19,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmpxcqvw53g.py\"\
    , line 15, in choose_num\n    return max(range(x + 1, y + 1, 2))\nValueError:\
    \ max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma7dmmxz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpma7dmmxz.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpma7dmmxz.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return max(range(x, y+1, 2))\n    else:\n        return max(range(x+1,\
    \ y+1, 2))\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyx86v6la.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpyx86v6la.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpyx86v6la.py\", line 20,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmpyx86v6la.py\"\
    , line 16, in choose_num\n    return max(range(x+1, y+1, 2))\nValueError: max()\
    \ arg is an empty sequence\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj5j7_zzi.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpj5j7_zzi.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpj5j7_zzi.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x%2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi5gb3ez8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpi5gb3ez8.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpi5gb3ez8.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0:\n        x += 1\n        return x\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_7ch55b9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_7ch55b9.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_7ch55b9.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99pw3pbn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp99pw3pbn.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp99pw3pbn.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # your code here\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        if x <=\
    \ y:\n            return x\n        else:\n            return -1\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhdnb_6c.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzhdnb_6c.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzhdnb_6c.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5hhsinn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpw5hhsinn.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpw5hhsinn.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        if x <= y:\n            return x\n        else:\n            return\
    \ -1\n    else:\n        if x + 1 <= y:\n            return x + 1\n        else:\n\
    \            return -1\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiueo3ok.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxiueo3ok.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxiueo3ok.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskgll8g8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpskgll8g8.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpskgll8g8.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq521bzua.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq521bzua.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq521bzua.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        if x > y:\n            return -1\n        else:\n            return\
    \ x\n    else:\n        if x + 1 > y:\n            return -1\n        else:\n\
    \            return x + 1\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptc46nths.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptc46nths.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmptc46nths.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        if x > y:\n\
    \            return -1\n        else:\n            return x\n    else:\n     \
    \   return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n \
    \   assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpicx7tlk9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpicx7tlk9.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpicx7tlk9.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return max(range(x,\
    \ y + 1, 2))\n    else:\n        return max(range(x + 1, y + 1, 2))\n\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppego86or.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppego86or.py\", line 29,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmppego86or.py\", line 20,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmppego86or.py\"\
    , line 15, in choose_num\n    return max(range(x + 1, y + 1, 2))\nValueError:\
    \ max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x + 1 <= y:\n        return x + 1\n    else:\n      \
    \  return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju_lj9ig.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpju_lj9ig.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpju_lj9ig.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq521bzua.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq521bzua.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq521bzua.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma7dmmxz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpma7dmmxz.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpma7dmmxz.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n    # END OF YOUR CODE\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7qrm3vo9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7qrm3vo9.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7qrm3vo9.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskgll8g8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpskgll8g8.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpskgll8g8.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    else:\n        return x + 1\n    # END OF YOUR CODE\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7mea2xux.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7mea2xux.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp7mea2xux.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5hhsinn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpw5hhsinn.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpw5hhsinn.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x+1 <= y:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskgll8g8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpskgll8g8.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpskgll8g8.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x = x + 1\n        return\
    \ x\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw5hhsinn.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpw5hhsinn.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpw5hhsinn.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa42e160d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa42e160d.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa42e160d.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 == y:\n        return -1\n    else:\n \
    \       return choose_num(x + 1, y)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ni3z0d3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9ni3z0d3.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp9ni3z0d3.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    else:\n        return x+1\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstmmcq4k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpstmmcq4k.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpstmmcq4k.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x+1 <= y:\n        return x+1\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxe17axr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbxe17axr.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpbxe17axr.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x + 1 <= y:\n        return x + 1\n    else:\n      \
    \  return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rpe5q1x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3rpe5q1x.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3rpe5q1x.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    else:\n        x = x + 1\n        if x > y:\n    \
    \        return -1\n        else:\n            return x\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxw3r7co.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpfxw3r7co.py\", line 33,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpfxw3r7co.py\", line 23,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq521bzua.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq521bzua.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpq521bzua.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    else:\n        return x+1\n    # END OF YOUR CODE\n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqv_k9ug_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqv_k9ug_.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpqv_k9ug_.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 == y:\n        return -1\n    else:\n        return choose_num(x\
    \ + 1, y)\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma7dmmxz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpma7dmmxz.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpma7dmmxz.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return max(range(x,\
    \ y + 1, 2))\n    else:\n        return max(range(x + 1, y + 1, 2))\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxcqvw53g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxcqvw53g.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxcqvw53g.py\", line 19,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmpxcqvw53g.py\"\
    , line 15, in choose_num\n    return max(range(x + 1, y + 1, 2))\nValueError:\
    \ max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0:\n        x += 1\n        return x\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4a0l1027.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4a0l1027.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4a0l1027.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return max(range(x,\
    \ y + 1, 2))\n    else:\n        return max(range(x + 1, y + 1, 2))\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxcqvw53g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpxcqvw53g.py\", line 28,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxcqvw53g.py\", line 19,\
    \ in check\n    assert candidate(13, 12) == -1\n  File \"/tmp/tmpxcqvw53g.py\"\
    , line 15, in choose_num\n    return max(range(x + 1, y + 1, 2))\nValueError:\
    \ max() arg is an empty sequence\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2==0:\n\
    \        return x\n    elif x%2!=0:\n        return x+1\n    else:\n        return\
    \ -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirkd10z6.py\", line\
    \ 266, in <module>\n    test_check()\n  File \"/tmp/tmpirkd10z6.py\", line 264,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpirkd10z6.py\", line 254,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    if x%2==0:\n        if x>y:\n            return -1\n        else:\n     \
    \       return x\n    else:\n        if x+1>y:\n            return -1\n      \
    \  else:\n            return x+1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4swpo6ig.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4swpo6ig.py\", line 36,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp4swpo6ig.py\", line 26,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    elif x % 2 != 0 and y % 2 != 0:\n        return -1\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert\
    \ candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert\
    \ candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27,\
    \ 10) == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546)\
    \ == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2jlzold.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpo2jlzold.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpo2jlzold.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        return choose_num(x+1, y)\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_unatxu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpp_unatxu.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpp_unatxu.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2==0:\n\
    \        return x\n    else:\n        return x+1\n    if x%2==0:\n        return\
    \ x\n    else:\n        return x+1\n    if x%2==0:\n        return x\n    else:\n\
    \        return x+1\n    if x%2==0:\n        return x\n    else:\n        return\
    \ x+1\n    if x%2==0:\n        return x\n    else:\n        return x+1\n    if\
    \ x%2==0:\n        return x\n    else:\n        return x+1\n    if x%2==0:\n \
    \       return x\n    else:\n        return x+1\n    if x%2==0:\n        return\
    \ x\n    else:\n        return x+1\n    if x%2==0:\n        return x\n    else:\n\
    \        return x+1\n    if x%2==0:\n        return x\n    else:\n        return\
    \ x+1\n    if x%2==0:\n        return x\n    else:\n        return x+1\n    if\
    \ x%2==0:\n        return x\n    else:\n        return x+1\n    if x%2==0:\n \
    \       return x\n    else:\n        return x+1\n    if x%2==0:\n        return\
    \ x\n    else:\n        return x+1\n    if x%2==0:\n        return x\n    else:\n\
    \        return x+1\n    if x%2==0:\n        return x\n    else:\n        return\
    \ x+1\n    if x%2==0:\n        return x\n    else:\n        return x+1\n    if\
    \ x%2==0:\n        return x\n    else:\n        return x+1\n    if x%2==0:\n \
    \       return x\n    else:\n        return x+1\n    if x%2==0:\n        return\
    \ x\n    else:\n        return x+1\n    if x%2==0:\n        return x\n    else:\n\
    \        return x+1\n    if x%2==0:\n        return x\n    else:\n        return\
    \ x+1\ndef check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkjs4_yo.py\", line\
    \ 114, in <module>\n    test_check()\n  File \"/tmp/tmpdkjs4_yo.py\", line 112,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdkjs4_yo.py\", line 102,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x > y:\n\
    \        return -1\n    else:\n        for i in range(x, y+1):\n            if\
    \ i % 2 == 0:\n                return i\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2s41jl05.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2s41jl05.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp2s41jl05.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99pw3pbn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp99pw3pbn.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp99pw3pbn.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa42e160d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa42e160d.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa42e160d.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte71cgvf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpte71cgvf.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpte71cgvf.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        return x + 1\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpil8q4bq5.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpil8q4bq5.py\", line 32,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpil8q4bq5.py\", line 22,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    else:\n        return x + 1\n    # if x % 2 == 0:\n    #     return x\n \
    \   # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #     return x + 1\n    # if x % 2 == 0:\n    #     return x\n\
    \    # else:\n    #    \ndef check(candidate):\n    assert candidate(12, 15) ==\
    \ 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkv_65x9.py\", line\
    \ 97, in <module>\n    test_check()\n  File \"/tmp/tmpdkv_65x9.py\", line 95,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpdkv_65x9.py\", line 85,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x > y:\n\
    \        return -1\n    elif x % 2 == 0:\n        return x\n    else:\n      \
    \  return choose_num(x + 1, y)\n\ndef check(candidate):\n    assert candidate(12,\
    \ 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354)\
    \ == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29)\
    \ == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n\
    \    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9e2nsvg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpd9e2nsvg.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpd9e2nsvg.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x % 2 != 0 and x + 1 <= y:\n        return x + 1\n    else:\n      \
    \  return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n  \
    \  assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rpe5q1x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3rpe5q1x.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp3rpe5q1x.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x > y:\n        return -1\n \
    \   elif x % 2 == 0:\n        return x\n    else:\n        return x + 1\n\ndef\
    \ check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshh1bg_x.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpshh1bg_x.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpshh1bg_x.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x + 1 <= y:\n        return x + 1\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa42e160d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa42e160d.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpa42e160d.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        if x <= y:\n            return x\n        else:\n            return\
    \ -1\n    else:\n        if x + 1 <= y:\n            return x + 1\n        else:\n\
    \            return -1\n\ndef check(candidate):\n    assert candidate(12, 15)\
    \ == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) ==\
    \ 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) ==\
    \ 28\n    assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n \
    \   assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiueo3ok.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxiueo3ok.py\", line 35,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpxiueo3ok.py\", line 25,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x%2 != 0:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkattlcp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkkattlcp.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpkkattlcp.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x % 2 ==\
    \ 0:\n        return x\n    elif x % 2 != 0:\n        x += 1\n        return x\n\
    \    elif x > y:\n        return -1\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjbcin8t.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzjbcin8t.py\", line 34,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpzjbcin8t.py\", line 24,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 0:\n        return x\n    elif x%2 != 0:\n        return x+1\n    else:\n  \
    \      return -1\n\ndef check(candidate):\n    assert candidate(12, 15) == 14\n\
    \    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n\
    \    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n \
    \   assert candidate(27, 10) == -1\n    assert candidate(7, 7) == -1\n    assert\
    \ candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkattlcp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkkattlcp.py\", line 31,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmpkkattlcp.py\", line 21,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: -1
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    if x % 2 == 0:\n        return x\n\
    \    elif x + 1 <= y:\n        return x + 1\n    else:\n        return -1\n\n\
    def check(candidate):\n    assert candidate(12, 15) == 14\n    assert candidate(13,\
    \ 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234,\
    \ 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10)\
    \ == -1\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\
    \ndef test_check():\n    check(choose_num)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mptqjv5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_mptqjv5.py\", line 30,\
    \ in test_check\n    check(choose_num)\n  File \"/tmp/tmp_mptqjv5.py\", line 20,\
    \ in check\n    assert candidate(12, 15) == 14\nAssertionError\n"
  stdout: ''
  timestamp: 1660271068
- exit_code: 0
  program: "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers\
    \ x and y and returns the\n    biggest even integer number that is in the range\
    \ [x, y] inclusive. If \n    there's no such number, then the function should\
    \ return -1.\n\n    For example:\n    >>> choose_num(12, 15)\n    14\n    >>>\
    \ choose_num(13, 12)\n    -1\n    \"\"\"\n    # YOUR CODE HERE\n    if x%2 ==\
    \ 1:\n        x = x + 1\n    if y%2 == 1:\n        y = y - 1\n    if x > y:\n\
    \        return -1\n    else:\n        return y\n\ndef check(candidate):\n   \
    \ assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert\
    \ candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert\
    \ candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n    assert candidate(7,\
    \ 7) == -1\n    assert candidate(546, 546) == 546\n\ndef test_check():\n    check(choose_num)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271068
