language: notypes.py
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(int(x)\
    \ for x in arr[:k] if len(x) <= 2)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpggb9s1ea.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpggb9s1ea.py\", line 26,\
    \ in test_check\n    check(add_elements)\n  File \"/tmp/tmpggb9s1ea.py\", line\
    \ 19, in check\n    assert candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4\n  File \"/tmp/tmpggb9s1ea.py\", line 15, in add_elements\n    return sum(int(x)\
    \ for x in arr[:k] if len(x) <= 2)\n  File \"/tmp/tmpggb9s1ea.py\", line 15, in\
    \ <genexpr>\n    return sum(int(x) for x in arr[:k] if len(x) <= 2)\nTypeError:\
    \ object of type 'int' has no len()\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(el\
    \ for el in arr[:k] if el < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem\
    \ for elem in arr[:k] if elem < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(el\
    \ for el in arr[:k] if el < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(e\
    \ for e in arr[:k] if e < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(elem\
    \ for elem in arr[:k] if elem < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(num\
    \ for num in arr[:k] if num < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(n\
    \ for n in arr[:k] if n < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(x\
    \ for x in arr[:k] if x < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of\
    \ integers arr and an integer k, return\n    the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n\n    Example:\n\n    >>> add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <=\
    \ len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    return sum(i\
    \ for i in arr[:k] if i < 100)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n    assert candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0\n    assert candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125\n    assert candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n \
    \   assert candidate([1], 1) == 1\n\ndef test_check():\n    check(add_elements)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
