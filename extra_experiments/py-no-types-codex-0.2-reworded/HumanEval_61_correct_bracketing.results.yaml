language: notypes.py
name: HumanEval_61_correct_bracketing
results:
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == \"\":\n        return True\n    elif\
    \ brackets[0] == \")\" or brackets[-1] == \"(\":\n        return False\n    else:\n\
    \        return correct_bracketing(brackets[1:-1])\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpty2hdi2q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpty2hdi2q.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpty2hdi2q.py\"\
    , line 23, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n            if count < 0:\n                return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # Hint: you can use a variable to keep track of the\
    \ number of open brackets.\n    # If the number of open brackets is ever negative,\
    \ return False.\n    # If the number of open brackets is ever greater than zero\
    \ at the end, return False.\n    # If you make it to the end without returning\
    \ False, return True.\n    open_brackets = 0\n    for bracket in brackets:\n \
    \       if bracket == '(':\n            open_brackets += 1\n        elif bracket\
    \ == ')':\n            open_brackets -= 1\n        if open_brackets < 0:\n   \
    \         return False\n    if open_brackets > 0:\n        return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == \"\":\n        return True\n    elif\
    \ brackets[0] == \")\":\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjwgtfrk.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqjwgtfrk.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqjwgtfrk.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # Hint: you can use a stack to keep track of the brackets\
    \ you have seen\n    # so far.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if len(stack) == 0:\n                return False\n   \
    \         stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # start with an empty stack\n    stack = []\n    for\
    \ c in brackets:\n        if c == '(':\n            stack.append(c)\n        elif\
    \ c == ')':\n            if stack == []:\n                return False\n     \
    \       stack.pop()\n    return stack == []\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    return brackets.count('(') == brackets.count(')')\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpitnyifs3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpitnyifs3.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpitnyifs3.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphu3whd1t.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmphu3whd1t.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphu3whd1t.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # if brackets == '':\n    #     return True\n    #\
    \ elif brackets[0] == ')':\n    #     return False\n    # else:\n    #     return\
    \ correct_bracketing(brackets[1:])\n    #\n    # if brackets == '':\n    #   \
    \  return True\n    # elif brackets[0] == ')':\n    #     return False\n    #\
    \ else:\n    #     return correct_bracketing(brackets[1:])\n    #\n    # if brackets\
    \ == '':\n    #     return True\n    # elif brackets[0] == ')':\n    #     return\
    \ False\n    # else:\n    #     return correct_bracketing(brackets[1:])\n    #\n\
    \    # if brackets == '':\n    #     return True\n    # elif brackets[0] == ')':\n\
    \    #     return False\n    # else:\n    #     return correct_bracketing(brackets[1:])\n\
    \    #\n    # if brackets == '':\n    #     return True\n    # elif brackets[0]\
    \ == ')':\n    #     return False\n    # else:\n    #     return correct_bracketing(brackets[1:])\n\
    \    #\n    # if brackets == '':\n    #     return True\n    # elif brackets[0]\
    \ == ')':\n    #     return False\n    # else:\n    #     return correct_bracketing(brackets[1:])\n\
    \    #\n    # if brackets == '':\n    #     return True\n    # elif brackets[0]\
    \ == ')':\n    #     return False\n    # else:\n    #     return correct_bracketing(brackets[1:])\n\
    \    #\n    # if brackets == '':\n    #     return True\n    # elif brackets[0]\
    \ == ')':\n    #     return False\n    # else:\n    #     return correct_bracketing(brackets[1:])\n\
    \    #\n    # if brackets == '':\n    #     return True\n    # elif brackets[0]\
    \ == ')':\n    #     return False\n    # else:\n    #     return correct_bracketing\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4x0dxus.py\", line\
    \ 93, in <module>\n    test_check()\n  File \"/tmp/tmpd4x0dxus.py\", line 91,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpd4x0dxus.py\"\
    , line 77, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if len(brackets) == 0:\n        return True\n    if\
    \ len(brackets) == 1:\n        return False\n    if brackets[0] == ')':\n    \
    \    return False\n    if brackets[-1] == '(':\n        return False\n    return\
    \ correct_bracketing(brackets[1:-1])\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpagg7p4nr.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpagg7p4nr.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpagg7p4nr.py\"\
    , line 26, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # YOUR CODE HERE\n    # if brackets == '':\n    #\
    \     return True\n    # if brackets[0] == ')' or brackets[-1] == '(':\n    #\
    \     return False\n    # if brackets[0] == '(':\n    #     return correct_bracketing(brackets[1:])\n\
    \    # if brackets[-1] == ')':\n    #     return correct_bracketing(brackets[:-1])\n\
    \    # return correct_bracketing(brackets[1:-1])\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj658uucn.py\", line\
    \ 172, in <module>\n    test_check()\n  File \"/tmp/tmpj658uucn.py\", line 170,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj658uucn.py\"\
    , line 156, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '(':\n            count += 1\n        elif i\
    \ == ')':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == \"\":\n        return True\n    elif\
    \ brackets[0] == \")\":\n        return False\n    elif brackets[-1] == \"(\"\
    :\n        return False\n    else:\n        return correct_bracketing(brackets[1:-1])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvy5m0mr.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpcvy5m0mr.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcvy5m0mr.py\"\
    , line 25, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # initialize a counter\n    counter = 0\n    # loop\
    \ through the string\n    for char in brackets:\n        # if the char is (, add\
    \ 1 to the counter\n        if char == '(':\n            counter += 1\n      \
    \  # if the char is ), subtract 1 from the counter\n        elif char == ')':\n\
    \            counter -= 1\n        # if the counter is negative, return False\n\
    \        if counter < 0:\n            return False\n    # if the counter is 0,\
    \ return True\n    return counter == 0\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # Hint: use a stack\n    stack = []\n    for b in\
    \ brackets:\n        if b == '(':\n            stack.append(b)\n        elif b\
    \ == ')':\n            if len(stack) == 0:\n                return False\n   \
    \         stack.pop()\n    return len(stack) == 0\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    open_count = 0\n    for char in brackets:\n      \
    \  if char == '(':\n            open_count += 1\n        elif char == ')':\n \
    \           open_count -= 1\n        if open_count < 0:\n            return False\n\
    \    return open_count == 0\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    return brackets.count('(') == brackets.count(')')\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkc1ejdea.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkc1ejdea.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkc1ejdea.py\"\
    , line 22, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # Hint: you can use a stack to keep track of the brackets\
    \ you have seen.\n    #       you can use a list as a stack.\n    #       stack.append(x)\
    \ adds x to the top of the stack\n    #       stack.pop() removes and returns\
    \ the top element of the stack\n    #       stack[-1] returns the top element\
    \ of the stack\n    #       stack[-2] returns the second-to-top element of the\
    \ stack\n    #       stack[-3] returns the third-to-top element of the stack\n\
    \    #       etc.\n    #       stack[-1] is the same as stack[len(stack)-1]\n\
    \    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n  \
    \          stack.append(bracket)\n        elif bracket == ')':\n            if\
    \ len(stack) == 0:\n                return False\n            else:\n        \
    \        stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # count the number of opening brackets\n    # count\
    \ the number of closing brackets\n    # if they are equal, return True\n    #\
    \ else return False\n    opening = 0\n    closing = 0\n    for char in brackets:\n\
    \        if char == '(':\n            opening += 1\n        elif char == ')':\n\
    \            closing += 1\n    if opening == closing:\n        return True\n \
    \   else:\n        return False\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt7niin11.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpt7niin11.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpt7niin11.py\"\
    , line 36, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '(':\n            count += 1\n        elif i\
    \ == ')':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == \"\":\n        return True\n    elif\
    \ brackets[0] == \")\":\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjwgtfrk.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqjwgtfrk.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqjwgtfrk.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    count = 0\n    for\
    \ i in brackets:\n        if i == '(':\n            count += 1\n        elif i\
    \ == ')':\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # count the number of opening brackets\n    # count\
    \ the number of closing brackets\n    # if they are equal, return True\n    #\
    \ otherwise, return False\n    open_count = 0\n    close_count = 0\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            open_count += 1\n    \
    \    elif bracket == ')':\n            close_count += 1\n    return open_count\
    \ == close_count\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6fl4q5di.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp6fl4q5di.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6fl4q5di.py\"\
    , line 33, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # Hint: you can use a stack to keep track of the brackets\
    \ you have seen\n    # so far.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        elif bracket\
    \ == ')':\n            if stack == []:\n                return False\n       \
    \     stack.pop()\n    if stack == []:\n        return True\n    else:\n     \
    \   return False\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    return brackets.count('(') == brackets.count(')')\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkc1ejdea.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkc1ejdea.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkc1ejdea.py\"\
    , line 22, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == \"\":\n        return True\n    elif\
    \ brackets[0] == \")\":\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjwgtfrk.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqjwgtfrk.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqjwgtfrk.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if len(brackets) == 0:\n        return True\n    if\
    \ brackets[0] == ')':\n        return False\n    if brackets[0] == '(':\n    \
    \    return correct_bracketing(brackets[1:])\n    return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1do7r9y9.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp1do7r9y9.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1do7r9y9.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if len(brackets) == 0:\n        return True\n    if\
    \ brackets[0] == ')':\n        return False\n    if brackets[0] == '(':\n    \
    \    return correct_bracketing(brackets[1:])\n    if brackets[-1] == '(':\n  \
    \      return False\n    if brackets[-1] == ')':\n        return correct_bracketing(brackets[:-1])\n\
    \    return correct_bracketing(brackets[1:-1])\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxwzkuzs2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpxwzkuzs2.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxwzkuzs2.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    stack = []\n    for b in brackets:\n        if b ==\
    \ '(':\n            stack.append(b)\n        else:\n            if len(stack)\
    \ == 0:\n                return False\n            stack.pop()\n    return len(stack)\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == \"\":\n        return True\n    elif\
    \ brackets[0] == \")\":\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghdk1b4i.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpghdk1b4i.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpghdk1b4i.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # Hint: you can use a stack to keep track of the brackets\
    \ you've seen so far.\n    # If you see an opening bracket, push it onto the stack.\n\
    \    # If you see a closing bracket, pop from the stack.\n    # If you see a closing\
    \ bracket and the stack is empty, return False.\n    # If you finish and the stack\
    \ is empty, return True.\n    # If you finish and the stack is not empty, return\
    \ False.\n    stack = []\n    for bracket in brackets:\n        if bracket ==\
    \ '(':\n            stack.append(bracket)\n        elif bracket == ')':\n    \
    \        if stack == []:\n                return False\n            else:\n  \
    \              stack.pop()\n    if stack == []:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    open_brackets = 0\n    for char in brackets:\n   \
    \     if char == '(':\n            open_brackets += 1\n        elif char == ')':\n\
    \            open_brackets -= 1\n        if open_brackets < 0:\n            return\
    \ False\n    return open_brackets == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    open_brackets = 0\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            open_brackets += 1\n        elif bracket\
    \ == ')':\n            open_brackets -= 1\n        if open_brackets < 0:\n   \
    \         return False\n    return open_brackets == 0\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # Hint: use a stack\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if len(brackets) == 0:\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz95jths0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpz95jths0.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpz95jths0.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqav81ti.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjqav81ti.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjqav81ti.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # Hint: you can use a loop and a counter.\n    # If\
    \ the counter is ever negative, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\
    \ at the end of the string, return False.\n    # If the counter is ever positive\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjbnwxkrc.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpjbnwxkrc.py\", line 57,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjbnwxkrc.py\"\
    , line 43, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if brackets == '':\n        return True\n    elif\
    \ brackets[0] == ')':\n        return False\n    else:\n        return correct_bracketing(brackets[1:].replace('()',\
    \ ''))\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgxojk5zm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgxojk5zm.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgxojk5zm.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: -1
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    if len(brackets) == 0:\n        return True\n    elif\
    \ len(brackets) == 1:\n        return False\n    else:\n        if brackets[0]\
    \ == ')':\n            return False\n        else:\n            return correct_bracketing(brackets[1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qag2uxl.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4qag2uxl.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4qag2uxl.py\"\
    , line 25, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # Hint: use a stack\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    # Hint: use a stack to keep track of the bracketing.\n\
    \    # You can use the list methods append and pop.\n    # You can use the string\
    \ method count.\n    stack = []\n    for bracket in brackets:\n        if bracket\
    \ == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n \
    \           if len(stack) == 0:\n                return False\n            else:\n\
    \                stack.pop()\n    if len(stack) == 0:\n        return True\n \
    \   else:\n        return False\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for i in brackets:\n        if i ==\
    \ '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            count += 1\n        elif bracket == ')':\n    \
    \        count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n  \
    \  assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
- exit_code: 0
  program: "def correct_bracketing(brackets):\n    \"\"\" brackets is a string of\
    \ \"(\" and \")\".\n    return True if every opening bracket has a corresponding\
    \ closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n\
    \    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n\
    \    False\n    \"\"\"\n    count = 0\n    for char in brackets:\n        if char\
    \ == '(':\n            count += 1\n        elif char == ')':\n            count\
    \ -= 1\n        if count < 0:\n            return False\n    return count == 0\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271006
