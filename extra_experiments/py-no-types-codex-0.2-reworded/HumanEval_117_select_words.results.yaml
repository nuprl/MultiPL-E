language: notypes.py
name: HumanEval_117_select_words
results:
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for char\
    \ in word:\n            if char not in 'aeiouAEIOU':\n                count +=\
    \ 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \    raise NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    # raise NotImplementedError()\n\
    \    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word)\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeex1rx41.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpeex1rx41.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpeex1rx41.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpeex1rx41.py\", line 24, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for char\
    \ in word:\n            if char not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnepy7j_.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmppnepy7j_.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppnepy7j_.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9679qeg8.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9679qeg8.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) > n:\n        \
    \    continue\n        count = 0\n        for letter in word:\n            if\
    \ letter not in 'aeiou':\n                count += 1\n        if count == n:\n\
    \            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6fm4uby8.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp6fm4uby8.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6fm4uby8.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_8o0m_r.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0_8o0m_r.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0_8o0m_r.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # Write your code here\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\
    \    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy908amba.py\", line\
    \ 159, in <module>\n    test_check()\n  File \"/tmp/tmpy908amba.py\", line 157,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpy908amba.py\", line\
    \ 148, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    return [word for word in s.split()\
    \ if len([letter for letter in word if letter not in 'aeiou']) == n]\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv80clyrv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpv80clyrv.py\", line 31,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpv80clyrv.py\", line\
    \ 26, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # your code here\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvcyxlprk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvcyxlprk.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpvcyxlprk.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall(r'[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_rlja2p.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmph_rlja2p.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmph_rlja2p.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmph_rlja2p.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall(r'[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for ch in\
    \ word:\n            if ch not in 'aeiouAEIOU':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) > n:\n        \
    \    continue\n        count = 0\n        for letter in word:\n            if\
    \ letter in 'bcdfghjklmnpqrstvwxyz':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqm73p00c.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqm73p00c.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqm73p00c.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    res = []\n \
    \   for word in words:\n        if count_consonants(word) == n:\n            res.append(word)\n\
    \    return res\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjbccb93a.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjbccb93a.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpjbccb93a.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpjbccb93a.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall(r'[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_rlja2p.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmph_rlja2p.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmph_rlja2p.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmph_rlja2p.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall(r'[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    s = s.split()\n    l = []\n    for i in s:\n        if len(i) == n:\n   \
    \         l.append(i)\n    return l\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae5jswln.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpae5jswln.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpae5jswln.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59q1swwu.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp59q1swwu.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp59q1swwu.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp59q1swwu.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # your code here\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65miyino.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp65miyino.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp65miyino.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp65miyino.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppossmj_o.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppossmj_o.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppossmj_o.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9679qeg8.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9679qeg8.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n    #raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcez2gvln.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpcez2gvln.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpcez2gvln.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - sum(1 for c in\
    \ word if c in 'aeiou') == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_he4q1j.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp2_he4q1j.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2_he4q1j.py\", line\
    \ 32, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9679qeg8.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9679qeg8.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptaz2wabi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    words = s.split()\n    result = []\n    for word in words:\n        if len(word)\
    \ - len(re.findall(r'[aeiou]', word)) == n:\n            result.append(word)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate('Mary had\
    \ a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0f9m41b.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpb0f9m41b.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpb0f9m41b.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpb0f9m41b.py\", line 24, in select_words\n    if len(word) -\
    \ len(re.findall(r'[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) - len(set(word)) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpslcqr1gi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpslcqr1gi.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpslcqr1gi.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptaz2wabi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) > 0:\n        \
    \    if word[0].isupper():\n                word = word[0].lower() + word[1:]\n\
    \            if len(word) > 0:\n                if word[-1].isupper():\n     \
    \               word = word[:-1] + word[-1].lower()\n        if len(word) > 0:\n\
    \            if word[0].isupper():\n                word = word[0].lower() + word[1:]\n\
    \            if len(word) > 0:\n                if word[-1].isupper():\n     \
    \               word = word[:-1] + word[-1].lower()\n        if len(word) > 0:\n\
    \            if word[0].isupper():\n                word = word[0].lower() + word[1:]\n\
    \            if len(word) > 0:\n                if word[-1].isupper():\n     \
    \               word = word[:-1] + word[-1].lower()\n        if len(word) > 0:\n\
    \            if word[0].isupper():\n                word = word[0].lower() + word[1:]\n\
    \            if len(word) > 0:\n                if word[-1].isupper():\n     \
    \               word = word[:-1] + word[-1].lower()\n        if len(word) > 0:\n\
    \            if word[0].isupper():\n                word = word[0].lower() + word[1:]\n\
    \            if len(word) > 0:\n                if word[-1].isupper():\n     \
    \               word = word[:-1] + word[-1].lower()\n        if len(word) > 0:\n\
    \            if word[0].isupper():\n                word = word[0].lower() + word[1:]\n\
    \            if len(word) > 0:\n                if word[-1].isupper():\n     \
    \               word = word[:-1] + word[-1].lower()\n        if len(word) > 0:\n\
    \            if word[0].isupper():\n                word = word[0].lower() + word[1:]\n\
    \            if len(word) > 0:\n                if\ndef check(candidate):\n  \
    \  assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpn4g9wk5g.py\", line 63\n    if\n      ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4kka6i7u.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4kka6i7u.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp4kka6i7u.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    s = s.split()\n    l = []\n    for i in s:\n        if len(i) == n:\n   \
    \         l.append(i)\n    return l\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae5jswln.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpae5jswln.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpae5jswln.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall(r'[aeiouAEIOU]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6q2erk9.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpv6q2erk9.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpv6q2erk9.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpv6q2erk9.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall(r'[aeiouAEIOU]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9679qeg8.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9679qeg8.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - sum(1 for c in\
    \ word if c in 'aeiou') == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2_he4q1j.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp2_he4q1j.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp2_he4q1j.py\", line\
    \ 32, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9679qeg8.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9679qeg8.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    result = []\n    words = s.split()\n\
    \    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqqaoccn5.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqqaoccn5.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqqaoccn5.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall(r'[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_rlja2p.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmph_rlja2p.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmph_rlja2p.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmph_rlja2p.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall(r'[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppossmj_o.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppossmj_o.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppossmj_o.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall(r'[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_rlja2p.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmph_rlja2p.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmph_rlja2p.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmph_rlja2p.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall(r'[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for char\
    \ in word:\n            if char not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnepy7j_.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmppnepy7j_.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppnepy7j_.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter in 'bcdfghjklmnpqrstvwxyz':\n              \
    \  count += 1\n        if count == n:\n            result.append(word)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb',\
    \ 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwra8z3cu.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpwra8z3cu.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpwra8z3cu.py\", line\
    \ 33, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for char\
    \ in word:\n            if char not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnepy7j_.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmppnepy7j_.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppnepy7j_.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # your code here\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) > 1:\n        \
    \    count = 0\n            for letter in word:\n                if letter not\
    \ in 'aeiou':\n                    count += 1\n            if count == n:\n  \
    \              result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9bdfevl.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpe9bdfevl.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpe9bdfevl.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptaz2wabi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    s = s.split()\n    lst = []\n    for word in s:\n        count = 0\n    \
    \    for char in word:\n            if char not in 'aeiou':\n                count\
    \ += 1\n        if count == n:\n            lst.append(word)\n    return lst\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyoo78kmw.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpyoo78kmw.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyoo78kmw.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiouAEIOU':\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    words = s.split()\n    result = []\n    for word in words:\n        if len(word)\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi41i9ymz.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpi41i9ymz.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpi41i9ymz.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptaz2wabi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) > n:\n        \
    \    continue\n        count = 0\n        for letter in word:\n            if\
    \ letter in 'bcdfghjklmnpqrstvwxyz':\n                count += 1\n        if count\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqm73p00c.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpqm73p00c.py\", line 43,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpqm73p00c.py\", line\
    \ 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) > n:\n        \
    \    continue\n        if len(word) == n:\n            result.append(word)\n \
    \   return result\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzqeal50.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxzqeal50.py\", line 39,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpxzqeal50.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) - len(re.sub('[aeiou]', '', word))\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28i7vyw8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp28i7vyw8.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp28i7vyw8.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp28i7vyw8.py\", line 22, in select_words\n    if len(word) -\
    \ len(re.sub('[aeiou]', '', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiouAEIOU':\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall(r'[aeiouAEIOU]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6q2erk9.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpv6q2erk9.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpv6q2erk9.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpv6q2erk9.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall(r'[aeiouAEIOU]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptaz2wabi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiouAEIOU':\n                count\
    \ += 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) - len(set(word)) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpslcqr1gi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpslcqr1gi.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpslcqr1gi.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiouAEIOU]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftqxc2hb.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpftqxc2hb.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpftqxc2hb.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpftqxc2hb.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiouAEIOU]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    s = s.split()\n\
    \    result = []\n    for word in s:\n        count = 0\n        for letter in\
    \ word:\n            if letter not in 'aeiou':\n                count += 1\n \
    \       if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1x7vcqx2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1x7vcqx2.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp1x7vcqx2.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    s = s.split()\n    l = []\n    for i in s:\n        if len(i) == n:\n   \
    \         l.append(i)\n    return l\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae5jswln.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpae5jswln.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpae5jswln.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) - len(re.sub('[aeiou]', '', word))\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28i7vyw8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp28i7vyw8.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp28i7vyw8.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp28i7vyw8.py\", line 22, in select_words\n    if len(word) -\
    \ len(re.sub('[aeiou]', '', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptaz2wabi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_8o0m_r.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0_8o0m_r.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp0_8o0m_r.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    words = s.split()\n    result = []\n    for word in words:\n        count\
    \ = 0\n        for letter in word:\n            if letter not in 'aeiou':\n  \
    \              count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ovjl_xa.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp9ovjl_xa.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9ovjl_xa.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) > n:\n            if word.count('a')\
    \ + word.count('e') + word.count('i') + word.count('o') + word.count('u') == n:\n\
    \                result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc064a7qs.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpc064a7qs.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpc064a7qs.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word)\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04nj2yx2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp04nj2yx2.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp04nj2yx2.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp04nj2yx2.py\", line 24, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    s = s.split()\n    lst = []\n    for i in s:\n        if i.count('a') + i.count('e')\
    \ + i.count('i') + i.count('o') + i.count('u') == n:\n            lst.append(i)\n\
    \    return lst\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9rkhco9c.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp9rkhco9c.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9rkhco9c.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptaz2wabi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9679qeg8.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9679qeg8.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptaz2wabi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    s = s.split()\n\
    \    l = []\n    for i in s:\n        if len(i) == n:\n            l.append(i)\n\
    \    return l\n\ndef check(candidate):\n    assert candidate('Mary had a little\
    \ lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) ==\
    \ ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert\
    \ candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam',\
    \ 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xr8oh33.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9xr8oh33.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9xr8oh33.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for char\
    \ in word:\n            if char not in 'aeiouAEIOU':\n                count +=\
    \ 1\n        if count == n:\n            result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppossmj_o.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppossmj_o.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppossmj_o.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9679qeg8.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9679qeg8.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) > 1 and len(word) == n + count_vowels(word):\n\
    \            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajgqnb08.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpajgqnb08.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpajgqnb08.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpajgqnb08.py\", line 22, in select_words\n    if len(word) >\
    \ 1 and len(word) == n + count_vowels(word):\nNameError: name 'count_vowels' is\
    \ not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # your code here\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx72vnh9e.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpx72vnh9e.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx72vnh9e.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9679qeg8.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9679qeg8.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    words = s.split()\n    result = []\n    for word in words:\n        if len(word)\
    \ - len(re.findall(r'[aeiou]', word)) == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpea7wwul2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpea7wwul2.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpea7wwul2.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpea7wwul2.py\", line 24, in select_words\n    if len(word) -\
    \ len(re.findall(r'[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) > 0:\n        \
    \    if word[0].isupper():\n                word = word[0].lower() + word[1:]\n\
    \            if len(word) > 0:\n                if word[0] in 'aeiou':\n     \
    \               word = word[1:]\n            if len(word) > 0:\n             \
    \   if word[-1] in 'aeiou':\n                    word = word[:-1]\n          \
    \  if len(word) == n:\n                result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ndlhwks.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp6ndlhwks.py\", line 46,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6ndlhwks.py\", line\
    \ 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for char\
    \ in word:\n            if char not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnepy7j_.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmppnepy7j_.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmppnepy7j_.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    s = s.split()\n    l = []\n    for i in s:\n        if len(i) == n:\n   \
    \         l.append(i)\n    return l\n\ndef check(candidate):\n    assert candidate('Mary\
    \ had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little\
    \ lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2)\
    \ == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpae5jswln.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpae5jswln.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpae5jswln.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if word.count('a') + word.count('e') + word.count('i')\
    \ + word.count('o') + word.count('u') == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkve52ukb.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpkve52ukb.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpkve52ukb.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) - len(re.sub('[aeiou]', '', word))\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28i7vyw8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp28i7vyw8.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp28i7vyw8.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp28i7vyw8.py\", line 22, in select_words\n    if len(word) -\
    \ len(re.sub('[aeiou]', '', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptaz2wabi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # your code here\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx72vnh9e.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpx72vnh9e.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpx72vnh9e.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) == n:\n       \
    \     result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmptaz2wabi.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmptaz2wabi.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) > n:\n        \
    \    if len(list(filter(lambda x: x in 'bcdfghjklmnpqrstvwxyz', word))) == n:\n\
    \                result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp4w8ln8l.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpp4w8ln8l.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp4w8ln8l.py\", line\
    \ 30, in check\n    assert candidate('Mary had a little lamb', 3) == ['Mary',\
    \ 'lamb']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9679qeg8.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9679qeg8.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_co497fc.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_co497fc.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp_co497fc.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp_co497fc.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if count_consonants(word) ==\
    \ n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp9679qeg8.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9679qeg8.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp9679qeg8.py\", line 23, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) > 0:\n        \
    \    if word[0].isupper():\n                result.append(word)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpspjzrh8g.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpspjzrh8g.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpspjzrh8g.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall(r'[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_rlja2p.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmph_rlja2p.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmph_rlja2p.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmph_rlja2p.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall(r'[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp_81m1rj.py\", line 33,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpp_81m1rj.py\", line\
    \ 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmpp_81m1rj.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        count = 0\n        for letter\
    \ in word:\n            if letter not in 'aeiou':\n                count += 1\n\
    \        if count == n:\n            result.append(word)\n    return result\n\n\
    def check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert\
    \ candidate('simple white space', 2) == []\n    assert candidate('Hello world',\
    \ 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert\
    \ candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c',\
    \ 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyrmqdrny.py\", line 41,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpyrmqdrny.py\", line\
    \ 36, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    words = s.split()\n    result = []\n    for word in words:\n        count\
    \ = 0\n        for letter in word:\n            if letter not in 'aeiou':\n  \
    \              count += 1\n        if count == n:\n            result.append(word)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('Mary had a\
    \ little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb',\
    \ 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n\
    \    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle\
    \ sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a\
    \ b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ovjl_xa.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp9ovjl_xa.py\", line 42,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp9ovjl_xa.py\", line\
    \ 37, in check\n    assert candidate('Uncle sam', 3) == ['Uncle']\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word)\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04nj2yx2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp04nj2yx2.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp04nj2yx2.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp04nj2yx2.py\", line 24, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if len(word) - len(set(word)) == n:\n       \
    \     result.append(word)\n    return result\n\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmrp6g_md.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpmrp6g_md.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmpmrp6g_md.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n\
    \    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word)\
    \ == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04nj2yx2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp04nj2yx2.py\", line 38,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp04nj2yx2.py\", line\
    \ 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp04nj2yx2.py\", line 24, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    words = s.split()\n\
    \    result = []\n    for word in words:\n        if len(word) - len(re.findall('[aeiou]',\
    \ word)) == n:\n            result.append(word)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp92n1fk19.py\", line 37,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp92n1fk19.py\", line\
    \ 28, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp92n1fk19.py\", line 23, in select_words\n    if len(word) -\
    \ len(re.findall('[aeiou]', word)) == n:\nNameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    words = s.split()\n    result = []\n\
    \    for word in words:\n        if count_consonants(word) == n:\n           \
    \ result.append(word)\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary\
    \ had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white\
    \ space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert\
    \ candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n\
    \    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n\
    \    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps1naxctx.py\", line 36,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmps1naxctx.py\", line\
    \ 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmps1naxctx.py\", line 22, in select_words\n    if count_consonants(word)\
    \ == n:\nNameError: name 'count_consonants' is not defined\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def select_words(s, n):\n    \"\"\"Given a string s and a natural number\
    \ n, you have been tasked to implement \n    a function that returns a list of\
    \ all words from string s that contain exactly \n    n consonants, in order these\
    \ words appear in the string s.\n    If the string s is empty then the function\
    \ should return an empty list.\n    Note: you may assume the input string contains\
    \ only letters and spaces.\n    Examples:\n    >>> select_words('Mary had a little\
    \ lamb', 4)\n    ['little']\n    >>> select_words('Mary had a little lamb', 3)\n\
    \    ['Mary', 'lamb']\n    >>> select_words('simple white space', 2)\n    []\n\
    \    >>> select_words('Hello world', 4)\n    ['world']\n    >>> select_words('Uncle\
    \ sam', 3)\n    ['Uncle']\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) ==\
    \ ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n\
    \    assert candidate('simple white space', 2) == []\n    assert candidate('Hello\
    \ world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n\
    \    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) ==\
    \ ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6rj3anq4.py\", line 32,\
    \ in test_check\n    check(select_words)\n  File \"/tmp/tmp6rj3anq4.py\", line\
    \ 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n\
    \  File \"/tmp/tmp6rj3anq4.py\", line 20, in select_words\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
