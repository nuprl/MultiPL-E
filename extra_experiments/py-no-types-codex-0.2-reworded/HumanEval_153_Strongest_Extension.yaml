name: HumanEval_153_Strongest_Extension
language: notypes.py
prompt: "def Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given\
  \ the name of a class (a string) and a list of extensions.\n    The extensions are\
  \ to be used to load additional classes to the class. The\n    strength of the extension\
  \ is as follows: Let CAP be the number of the uppercase\n    letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n    in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n    You should find the strongest\
  \ extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
  \    If there are two or more extensions with the same strength, you should\n  \
  \  choose the one that comes first in the list.\n    For example, if you are given\
  \ \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese',\
  \ 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
  \ is the strongest extension \n    (its strength is -1).\n    Example:\n    >>>\
  \ Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
  \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
  \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
  \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
  \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
  \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
  \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n\
  \    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
  \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
  \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
  \ntest_check()\n"
completions: ["    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: len(re.findall('[A-Z]', x)) - len(re.findall('[a-z]', x)))\n",
  "    # your code here\n    return\n\n", "    # your code here\n    pass\n\n", " \
    \   # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # Your code here\n    # You\
    \ can use the function count_upper_lower_case(string)\n    # that you implemented\
    \ in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower_case(string)\n    # that you implemented in the previous task\n\
    \    # You can also use the function count_upper_lower_case(string)\n    # that\
    \ you implemented in the previous task\n    # You can also use the function count_upper_lower_case(string)\n\
    \    # that you implemented in the previous task\n    # You can also use the function\
    \ count_upper_lower", "    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n",
  "    # Your code here\n    # You can use the function count_upper_lower(s)\n   \
    \ # to count the number of uppercase and lowercase letters in a string s\n   \
    \ # You can use the function count_upper_lower(s)\n    # to count the number of\
    \ uppercase and lowercase letters in a string s\n    # You can use the function\
    \ count_upper_lower(s)\n    # to count the number of uppercase and lowercase letters\
    \ in a string s\n    # You can use the function count_upper_lower(s)\n    # to\
    \ count the number of uppercase and lowercase letters in a string s\n    # You\
    \ can use the function count_upper_lower(s)\n    # to count the number of uppercase\
    \ and lowercase letters in a string s\n    # You can use the function count_upper_lower(s)\n\
    \    # to count the number of uppercase and lowercase letters in a string s\n\
    \    # You can use the function count_upper_lower(s)\n    # to count the number\
    \ of uppercase and lowercase letters in a string s\n    # You can use the function\
    \ count_upper_lower(s)\n    # to count the number of uppercase and lowercase letters\
    \ in a string s\n    # You can use the function count_upper_lower(s)\n    # to\
    \ count the number of uppercase and lowercase letters in a string s\n    # You\
    \ can use the function count_upper_lower(s)\n    # to count the number of uppercase\
    \ and lowercase letters in a string s\n    # You can use the function count_upper_lower(s)\n\
    \    # to count the number of uppercase and lowercase letters in a string s\n\
    \    # You can use the function count_upper_lower(s)\n    # to count the number\
    \ of uppercase and lowercase letters in a string s\n    # You can use the function\
    \ count_upper_lower(s)\n    # to count the number of uppercase and lowercase letters\
    \ in a string s\n    # You can use the function count_upper_lower(s)\n    # to\
    \ count the number of uppercase and lowercase letters in a string s\n    # You\
    \ can use the function count_upper_lower(s)", "    # your code here\n    pass\n\
    \n", "    # your code here\n    pass\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), x))\n\
    \n", "    # your code here\n    pass\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    # your code here\n    return\n", "   \
    \ # your code here\n    pass\n\n", "    # your code here\n    pass\n\n", "   \
    \ # your code here\n    return class_name + '.' + max(extensions, key=lambda x:\
    \ (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n", " \
    \   # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: x.count(x.upper()) - x.count(x.lower()))\n\n", "    # your code here\n  \
    \  return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x if\
    \ c.isupper()), x))\n", "    # your code here\n    # return 'my_class.AA'\n  \
    \  # pass\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for char\
    \ in extension:\n            if char.isupper():\n                strength += 1\n\
    \            elif char.islower():\n                strength -= 1\n        if strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    # your code here\n    strength = 0\n  \
    \  strongest = ''\n    for ext in extensions:\n        CAP = sum(1 for c in ext\
    \ if c.isupper())\n        SM = sum(1 for c in ext if c.islower())\n        if\
    \ CAP - SM > strength:\n            strength = CAP - SM\n            strongest\
    \ = ext\n    return class_name + '.' + strongest\n", "    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n", "    # Your code here\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use the function Count_Upper_Lower_Case from the previous task\n\
    \    # You can use", "    # your code here\n    pass\n\n", "    # your code here\n\
    \    pass\n\n", "    # your code here\n    pass\n\n", "    # your code here\n\
    \    pass\n\n", "    # your code here\n    pass\n\n", "    # your code here\n\
    \    pass\n\n", "    # your code here\n    return '{}.{}'.format(class_name, max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), x)))\n", "    # Your code here\n\
    \    pass\n\n", "    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (len(re.findall('[A-Z]', x)), x))\n\n", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()),\
    \ -sum(1 for c in x if c.islower())))\n", "    # your code here\n    return None\n",
  "    # Your code here\n    pass\n", "    # your code here\n    pass\n", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: (sum(1\
    \ for c in x if c.isupper()), x))\n", "    # Your code here\n    # You can use\
    \ the function count_upper_lower(s)\n    # that you have already implemented\n\
    \    # You can also use the function is_stronger(s1, s2)\n    # that you have\
    \ already implemented\n    # You can also use the function is_equal(s1, s2)\n\
    \    # that you have already implemented\n    # You can also use the function\
    \ is_weaker(s1, s2)\n    # that you have already implemented\n    # You can also\
    \ use the function is_stronger_or_equal(s1, s2)\n    # that you have already implemented\n\
    \    # You can also use the function is_weaker_or_equal(s1, s2)\n    # that you\
    \ have already implemented\n    # You can also use the function is_stronger_or_equal(s1,\
    \ s2)\n    # that you have already implemented\n    # You can also use the function\
    \ is_weaker_or_equal(s1, s2)\n    # that you have already implemented\n    # You\
    \ can also use the function is_stronger_or_equal(s1, s2)\n    # that you have\
    \ already implemented\n    # You can also use the function is_weaker_or_equal(s1,\
    \ s2)\n    # that you have already implemented\n    # You can also use the function\
    \ is_stronger_or_equal(s1, s2)\n    # that you have already implemented\n    #\
    \ You can also use the function is_weaker_or_equal(s1, s2)\n    # that you have\
    \ already implemented\n    # You can also use the function is_stronger_or_equal(s1,\
    \ s2)\n    # that you have already implemented\n    # You can also use the function\
    \ is_weaker_or_equal(s1, s2)\n    # that you have already implemented\n    # You\
    \ can also use the function is_stronger_or_equal(s1, s2)\n    # that you have\
    \ already implemented\n    # You can also use the function is_weaker_or_equal(s1,\
    \ s2)\n    # that you have already implemented\n    # You can also use the function\
    \ is_stronger_or", "    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: len(re.findall('[A-Z]', x)) - len(re.findall('[a-z]', x)))\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()),\
    \ -sum(1 for c in x if c.islower())))\n", "    # Your code here\n    pass\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # your code here\n    pass\n\
    \n", "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # your code here\n    return\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # your code here\n    pass\n",
  "    # Your code here\n    # You can use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    # You can also use the function count_upper_lower(string)\n\
    \    # which returns a tuple of the number of uppercase and lowercase letters\n\
    \    # in the string.\n    #", "    # your code here\n    pass\n", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: (sum(1\
    \ for c in x if c.isupper()), x))\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    # Your code here\n    pass\n\n", "   \
    \ # your code here\n    return None\n\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]', x)) - len(re.findall('[a-z]',\
    \ x)))\n", "    # Your code here\n    # You can use the function count_upper_lower_case(string)\n\
    \    # which returns a tuple of the number of upper case and lower case letters\n\
    \    # in the string.\n    # You can also use the function is_upper(char) which\
    \ returns True if char\n    # is an upper case letter, and False otherwise.\n\
    \    # You can also use the function is_lower(char) which returns True if char\n\
    \    # is a lower case letter, and False otherwise.\n    # You can also use the\
    \ function is_letter(char) which returns True if char\n    # is a letter, and\
    \ False otherwise.\n    # You can also use the function is_digit(char) which returns\
    \ True if char\n    # is a digit, and False otherwise.\n    # You can also use\
    \ the function is_space(char) which returns True if char\n    # is a space, and\
    \ False otherwise.\n    # You can also use the function is_punctuation(char) which\
    \ returns True if char\n    # is a punctuation, and False otherwise.\n    # You\
    \ can also use the function is_alnum(char) which returns True if char\n    # is\
    \ a letter or a digit, and False otherwise.\n    # You can also use the function\
    \ is_alpha(char) which returns True if char\n    # is a letter, and False otherwise.\n\
    \    # You can also use the function is_decimal(char) which returns True if char\n\
    \    # is a decimal digit, and False otherwise.\n    # You can also use the function\
    \ is_digit(char) which returns True if char\n    # is a digit, and False otherwise.\n\
    \    # You can also use the function is_numeric(char) which returns True if char\n\
    \    # is a numeric character, and False otherwise.\n    # You can also use the\
    \ function is_printable(char) which returns True if char\n    # is a printable\
    \ character, and False otherwise.\n    # You can also use the function is_whitespace(char)\
    \ which returns True if char\n    # is a whitespace character, and False otherwise.\n\
    \    # You can also use the function ord(char) which returns the Unicode code\
    \ point\n    # for a one-character string.\n    # You can also use the function\
    \ ch", "    # your code here\n    pass\n\n", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()),\
    \ x))\n", "    # your code here\n    pass\n", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]', x))\
    \ - len(re.findall('[a-z]', x)))\n", "    # your code here\n    # return 'my_class.AA'\n\
    \    pass\n", "    # your code here\n    pass\n", "    # Write your code here\n\
    \    return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x\
    \ if c.isupper()), -sum(1 for c in x if c.islower())))\n", "    # your code here\n\
    \    pass\n\n", "    # your code here\n    pass\n", "    # Your code here\n  \
    \  # Please note that the first letter of the class name is capitalized\n    #\
    \ while the first letter of the extension name is not.\n    # You may find the\
    \ string method isupper() useful.\n    # You may assume that the class name and\
    \ the extension names are non-empty strings.\n    # You may assume that the extension\
    \ names are unique.\n    # You may assume that the list of extensions is non-empty.\n\
    \    # You may assume that the class name and the extension names contain only\
    \ letters.\n    # You may assume that the class name and the extension names do\
    \ not contain any spaces.\n    # You may assume that the class name and the extension\
    \ names do not contain any digits.\n    # You may assume that the class name and\
    \ the extension names do not contain any special characters.\n    # You may assume\
    \ that the class name and the extension names do not contain any uppercase letters.\n\
    \    # You may assume that the class name and the extension names do not contain\
    \ any lowercase letters.\n    # You may assume that the class name and the extension\
    \ names do not contain any punctuation marks.\n    # You may assume that the class\
    \ name and the extension names do not contain any symbols.\n    # You may assume\
    \ that the class name and the extension names do not contain any control characters.\n\
    \    # You may assume that the class name and the extension names do not contain\
    \ any whitespace characters.\n    # You may assume that the class name and the\
    \ extension names do not contain any non-printable characters.\n    # You may\
    \ assume that the class name and the extension names do not contain any non-ASCII\
    \ characters.\n    # You may assume that the class name and the extension names\
    \ do not contain any non-Latin characters.\n    # You may assume that the class\
    \ name and the extension names do not contain any non-Roman characters.\n    #\
    \ You may assume that the class name and the extension names do not contain any\
    \ non-Greek characters.\n    # You may assume that the class name and the extension\
    \ names do not contain any non-Cyrillic characters.\n    # You may assume that\
    \ the class name and the extension names do not contain any non-Arabic characters.\n\
    \    # You may assume that the class name and the extension names do not contain\
    \ any non-Hebrew characters.\n    # You may assume that the class name and the\
    \ extension", "    # your code here\n    return \n", "    # your code here\n \
    \   return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n", "    # your code here\n\
    \    return class_name + '.' + max(extensions, key=lambda x: len(re.findall(r'[A-Z]',\
    \ x)) - len(re.findall(r'[a-z]', x)))\n", "    # Your code here\n    # Please\
    \ note that the first line of the code stub is not included in the\n    # autograder\
    \ submission. You will need to add it yourself for testing.\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), x))\n",
  "    # your code here\n    pass\n\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]', x)) - len(re.findall('[a-z]',\
    \ x)))\n", "    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), x))\n\n", "    # +++your code\
    \ here+++\n    return\n\n", "    # Your code here\n    pass\n\n", "    # Your\
    \ code here\n    # You can use the function count_upper_lower_case(string)\n \
    \   # to count the number of uppercase and lowercase letters in a string.\n  \
    \  # You can also use the function is_upper_case(string) to check if a string\n\
    \    # is all uppercase.\n    # You can use the function is_lower_case(string)\
    \ to check if a string\n    # is all lowercase.\n    # You can use the function\
    \ is_upper_lower_case(string) to check if a string\n    # is all uppercase or\
    \ all lowercase.\n    # You can use the function is_alpha(string) to check if\
    \ a string\n    # is all alphabetic.\n    # You can use the function is_digit(string)\
    \ to check if a string\n    # is all digits.\n    # You can use the function is_alpha_digit(string)\
    \ to check if a string\n    # is all alphabetic or all digits.\n    # You can\
    \ use the function is_alpha_digit_space(string) to check if a string\n    # is\
    \ all alphabetic, all digits, or all spaces.\n    # You can use the function is_alpha_digit_space_punctuation(string)\
    \ to check if a string\n    # is all alphabetic, all digits, all spaces, or all\
    \ punctuation.\n    # You can use the function is_alpha_digit_space_punctuation_newline(string)\
    \ to check if a string\n    # is all alphabetic, all digits, all spaces, all punctuation,\
    \ or all newlines.\n    # You can use the function is_alpha_digit_space_punctuation_newline_tab(string)\
    \ to check if a string\n    # is all alphabetic, all digits, all spaces, all punctuation,\
    \ all newlines, or all tabs.\n    # You can use the function is_alpha_digit_space_punctuation_newline_tab_carriage(string)\
    \ to check if a string\n    # is all alphabetic, all digits, all spaces, all punctuation,\
    \ all newlines, all tabs, or all carriage returns.\n    # You can use the function\
    \ is_alpha_digit_space_punctuation_new", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n\n", "    # your code here\n    pass\n\n", " \
    \   # Your code here\n    pass\n\n", "    # Your code here\n    # Please note\
    \ that the first line of the code stub is not included in the\n    # autograder\n\
    \    pass\n\n", "    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), x))\n", "    # your code here\n\
    \    pass\n\n", "    # your code here\n    return\n", "    # your code here\n\
    \    pass\n\n", "    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), x))\n\n", "    # your code\
    \ here\n    return class_name + '.' + max(extensions, key=lambda x: (sum(1 for\
    \ c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n", "    # your\
    \ code here\n    pass\n\n", "    # your code here\n    pass\n", "    # Your code\
    \ here\n    # You can use the function isupper() to check if a character is uppercase.\n\
    \    # You can use the function islower() to check if a character is lowercase.\n\
    \    # You can use the function len() to get the length of a string.\n    # You\
    \ can use the function ord() to get the ASCII code of a character.\n    # You\
    \ can use the function chr() to get the character from its ASCII code.\n    #\
    \ You can use the function str() to convert a number to a string.\n    # You can\
    \ use the function int() to convert a string to a number.\n    # You can use the\
    \ function float() to convert a string to a floating point number.\n    # You\
    \ can use the function round() to round a floating point number.\n    # You can\
    \ use the function max() to find the maximum value in a list.\n    # You can use\
    \ the function min() to find the minimum value in a list.\n    # You can use the\
    \ function sum() to find the sum of the values in a list.\n    # You can use the\
    \ function sorted() to sort a list.\n    # You can use the function reversed()\
    \ to reverse a list.\n    # You can use the function enumerate() to get the index\
    \ and value of each item in a list.\n    # You can use the function zip() to combine\
    \ two lists into a list of tuples.\n    # You can use the function range() to\
    \ create a list of numbers.\n    # You can use the function abs() to get the absolute\
    \ value of a number.\n    # You can use the function all() to check if all items\
    \ in a list are True.\n    # You can use the function any() to check if any item\
    \ in a list is True.\n    # You can use the function reversed() to reverse a list.\n\
    \    # You can use the function reversed() to reverse a list.\n    # You can use\
    \ the function reversed() to reverse a list.\n    # You can use the function reversed()\
    \ to reverse a list.\n    # You can use the function reversed() to reverse a list.\n\
    \    # You can use the function reversed() to reverse a list.\n    # You can use\
    \ the function reversed() to reverse a list.\n    # You can use the function reversed()\
    \ to reverse a list.\n    #", "    # your code here\n    return class_name + '.'\
    \ + max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for\
    \ c in x if c.islower()))\n", "    # Your code here\n    pass\n\n", "    # Your\
    \ code here\n    # You can use the function isupper() to check if a letter is\
    \ uppercase.\n    # You can use the function islower() to check if a letter is\
    \ lowercase.\n    # You can use the function len() to get the length of a string.\n\
    \    # You can use the function ord() to get the ASCII code of a letter.\n   \
    \ # You can use the function chr() to get the letter from its ASCII code.\n  \
    \  # You can use the function range() to get a list of numbers.\n    # You can\
    \ use the function str() to convert a number to a string.\n    # You can use the\
    \ function int() to convert a string to a number.\n    # You can use the function\
    \ float() to convert a string to a float.\n    # You can use the function max()\
    \ to get the maximum value from a list.\n    # You can use the function min()\
    \ to get the minimum value from a list.\n    # You can use the function sum()\
    \ to get the sum of all the values in a list.\n    # You can use the function\
    \ abs() to get the absolute value of a number.\n    # You can use the function\
    \ pow() to get the power of a number.\n    # You can use the function round()\
    \ to round a number.\n    # You can use the function divmod() to get the quotient\
    \ and the remainder of a division.\n    # You can use the function sorted() to\
    \ sort a list.\n    # You can use the function reversed() to reverse a list.\n\
    \    # You can use the function enumerate() to get the index and the value of\
    \ each element in a list.\n    # You can use the function zip() to combine two\
    \ lists.\n    # You can use the function all() to check if all the elements in\
    \ a list are True.\n    # You can use the function any() to check if any of the\
    \ elements in a list are True.\n    # You can use the function filter() to filter\
    \ a list.\n    # You can use the function map() to map a list.\n    # You can\
    \ use the function reduce() to reduce a list.\n    # You can use the function\
    \ str.join() to join a list of strings.\n    # You can use the function str.split()\
    \ to split a string.\n    # You can use", "    # Your code here\n    # Hint: Use\
    \ the function isupper() to check if a character is uppercase.\n    # Hint: Use\
    \ the function islower() to check if a character is lowercase.\n    # Hint: Use\
    \ the function ord() to get the integer value of a character.\n    # Hint: Use\
    \ the function chr() to get the character from its integer value.\n    # Hint:\
    \ Use the function len() to get the length of a string.\n    # Hint: Use the function\
    \ range() to get a list of integers.\n    # Hint: Use the function enumerate()\
    \ to get the index of an element in a list.\n    # Hint: Use the function zip()\
    \ to combine two lists into a list of tuples.\n    # Hint: Use the function max()\
    \ to get the maximum value of a list.\n    # Hint: Use the function min() to get\
    \ the minimum value of a list.\n    # Hint: Use the function abs() to get the\
    \ absolute value of a number.\n    # Hint: Use the function sum() to get the sum\
    \ of a list.\n    # Hint: Use the function divmod() to get the quotient and remainder\
    \ of a division.\n    # Hint: Use the function pow() to get the power of a number.\n\
    \    # Hint: Use the function round() to round a number.\n    # Hint: Use the\
    \ function sorted() to sort a list.\n    # Hint: Use the function reversed() to\
    \ reverse a list.\n    # Hint: Use the function filter() to filter a list.\n \
    \   # Hint: Use the function map() to map a list.\n    # Hint: Use the function\
    \ reduce() to reduce a list.\n    # Hint: Use the function all() to check if all\
    \ elements in a list are True.\n    # Hint: Use the function any() to check if\
    \ any element in a list is True.\n    # Hint: Use the function any() to check\
    \ if any element in a list is True.\n    # Hint: Use the function any() to check\
    \ if any element in a list is True.\n    # Hint: Use the function any() to check\
    \ if any element in a list is True.\n    # Hint: Use the function any() to check",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]', x))\
    \ - len(re.findall('[a-z]', x)))\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]', x)) - len(re.findall('[a-z]',\
    \ x)))\n", "    # your code here\n    pass\n\n\n", "    # your code here\n   \
    \ pass\n", "    # Your code here\n    # Please note that the solution is not unique\n\
    \    # You can write your own code to test the correctness of your solution\n\
    \    # Hint: You can use the function isupper() and islower()\n    # Hint: You\
    \ can use the function ord() to get the ASCII code of a character\n    # Hint:\
    \ You can use the function chr() to get the character from ASCII code\n    # Hint:\
    \ You can use the function len() to get the length of a string\n    # Hint: You\
    \ can use the function range() to generate a list of integers\n    # Hint: You\
    \ can use the function enumerate() to get the index of an item in a list\n   \
    \ # Hint: You can use the function max() to get the maximum value in a list\n\
    \    # Hint: You can use the function min() to get the minimum value in a list\n\
    \    # Hint: You can use the function abs() to get the absolute value of a number\n\
    \    # Hint: You can use the function round() to round a number\n    # Hint: You\
    \ can use the function sum() to get the sum of a list\n    # Hint: You can use\
    \ the function sorted() to sort a list\n    # Hint: You can use the function reversed()\
    \ to reverse a list\n    # Hint: You can use the function join() to join a list\
    \ of strings\n    # Hint: You can use the function split() to split a string into\
    \ a list of strings\n    # Hint: You can use the function strip() to remove the\
    \ leading and trailing spaces of a string\n    # Hint: You can use the function\
    \ replace() to replace a substring with another substring\n    # Hint: You can\
    \ use the function find() to find the index of a substring in a string\n    #\
    \ Hint: You can use the function count() to count the number of occurrences of\
    \ a substring in a string\n    # Hint: You can use the function index() to get\
    \ the index of an item in a list\n    # Hint: You can use the function append()\
    \ to add an item to the end of a list\n    # Hint: You can use the function insert()\
    \ to insert an item at a specific index of a list\n    # Hint: You can use the\
    \ function remove() to remove an", "    # Your code here\n    # You can use the\
    \ function count_upper_lower(string)\n    # that you have written above.\n   \
    \ # You can also use the function count_upper_lower(string)\n    # that you have\
    \ written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_lower(string)\n\
    \    # that you have written above.\n    # You can also use the function count_upper_",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n",
  "    # your code here\n    pass\n", "    # your code here\n    pass\n\n", "    #\
    \ your code here\n    return class_name + '.' + max(extensions, key=lambda x:\
    \ (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n\n",
  "    # your code here\n    strongest = 0\n    strongest_extension = ''\n    for\
    \ extension in extensions:\n        strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                strength += 1\n           \
    \ elif letter.islower():\n                strength -= 1\n        if strength >\
    \ strongest:\n            strongest = strength\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: (sum(1\
    \ for i in x if i.isupper()), x))\n", "    # your code here\n    return\n", " \
    \   # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: len(re.findall('[A-Z]', x)) - len(re.findall('[a-z]', x)))\n", "    # Your\
    \ code here\n    # Hint: You can use the function 'count' to count the number\
    \ of \n    #       occurrences of a character in a string.\n    #       For example:\n\
    \    #       >>> 'hello'.count('l')\n    #       2\n    #       >>> 'hello'.count('e')\n\
    \    #       1\n    #       >>> 'hello'.count('o')\n    #       1\n    #     \
    \  >>> 'hello'.count('h')\n    #       1\n    #       >>> 'hello'.count('z')\n\
    \    #       0\n    #       >>> 'hello'.count('H')\n    #       0\n    #     \
    \  >>> 'hello'.count('L')\n    #       0\n    #       >>> 'hello'.count('E')\n\
    \    #       0\n    #       >>> 'hello'.count('O')\n    #       0\n    #     \
    \  >>> 'hello'.count('Z')\n    #       0\n    #       >>> 'hello'.count('H')\n\
    \    #       0\n    #       >>> 'hello'.count('L')\n    #       0\n    #     \
    \  >>> 'hello'.count('E')\n    #       0\n    #       >>> 'hello'.count('O')\n\
    \    #       0\n    #       >>> 'hello'.count('Z')\n    #       0\n    #     \
    \  >>> 'hello'.count('H')\n    #       0\n    #       >>> 'hello'.count('L')\n\
    \    #       0\n    #       >>> 'hello'.count('E')\n    #       0\n    #     \
    \  >>> 'hello'.count('O')\n    #       0\n    #       >>> 'hello'.count('Z')\n\
    \    #       0\n    #       >>> 'hello'.count('H')\n    #       0\n    #     \
    \  >>> 'hello'.count('L')\n    #       0\n    #       >>> 'hello'.count('E')\n\
    \    #       0\n    #       >>> 'hello'.count('O')\n    #       0\n    #     \
    \  >>> 'hello'.count('Z')\n    #       0\n    #       >>> 'hello'.count('H')\n\
    \    #       0\n    #       >>> 'hello'.count('L')\n    #       0\n    #     \
    \  >>> 'hello'.", "    # Your code here\n    pass\n\n", "    # Write your code\
    \ here\n    # Hint: You may use the function 'isupper' to check if a character\
    \ is uppercase.\n    # Hint: You may use the function 'islower' to check if a\
    \ character is lowercase.\n    # Hint: You may use the function 'ord' to get the\
    \ ASCII value of a character.\n    # Hint: You may use the function 'chr' to get\
    \ the character of a given ASCII value.\n    # Hint: You may use the function\
    \ 'len' to get the length of a string.\n    # Hint: You may use the function 'range'\
    \ to get a list of numbers.\n    # Hint: You may use the function 'max' to get\
    \ the maximum value in a list.\n    # Hint: You may use the function 'min' to\
    \ get the minimum value in a list.\n    # Hint: You may use the function 'index'\
    \ to get the index of an element in a list.\n    # Hint: You may use the function\
    \ 'append' to add an element to a list.\n    # Hint: You may use the function\
    \ 'pop' to remove an element from a list.\n    # Hint: You may use the function\
    \ 'remove' to remove an element from a list.\n    # Hint: You may use the function\
    \ 'split' to split a string into a list of strings.\n    # Hint: You may use the\
    \ function 'join' to join a list of strings into a string.\n    # Hint: You may\
    \ use the function 'sort' to sort a list.\n    # Hint: You may use the function\
    \ 'sorted' to sort a list.\n    # Hint: You may use the function 'reverse' to\
    \ reverse a list.\n    # Hint: You may use the function 'reversed' to reverse\
    \ a list.\n    # Hint: You may use the function 'count' to count the number of\
    \ occurrences of an element in a list.\n    # Hint: You may use the function 'sum'\
    \ to sum the elements of a list.\n    # Hint: You may use the function 'map' to\
    \ map a function to a list.\n    # Hint: You may use the function 'filter' to\
    \ filter a list.\n    # Hint: You may use the function", "    # Your code here\n\
    \    pass\n\n", "    # Your code here\n    pass\n", "    # your code here\n  \
    \  return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n", "    # Your code here\n    # You can\
    \ use the function count_upper_lower(string)\n    # to count the number of uppercase\
    \ and lowercase letters in a string\n    # For example: count_upper_lower('AbCdEf')\
    \ returns (3, 3)\n    # You can also use the function count_upper_lower(string)\n\
    \    # to count the number of uppercase and lowercase letters in a string\n  \
    \  # For example: count_upper_lower('AbCdEf') returns (3, 3)\n    # You can also\
    \ use the function count_upper_lower(string)\n    # to count the number of uppercase\
    \ and lowercase letters in a string\n    # For example: count_upper_lower('AbCdEf')\
    \ returns (3, 3)\n    # You can also use the function count_upper_lower(string)\n\
    \    # to count the number of uppercase and lowercase letters in a string\n  \
    \  # For example: count_upper_lower('AbCdEf') returns (3, 3)\n    # You can also\
    \ use the function count_upper_lower(string)\n    # to count the number of uppercase\
    \ and lowercase letters in a string\n    # For example: count_upper_lower('AbCdEf')\
    \ returns (3, 3)\n    # You can also use the function count_upper_lower(string)\n\
    \    # to count the number of uppercase and lowercase letters in a string\n  \
    \  # For example: count_upper_lower('AbCdEf') returns (3, 3)\n    # You can also\
    \ use the function count_upper_lower(string)\n    # to count the number of uppercase\
    \ and lowercase letters in a string\n    # For example: count_upper_lower('AbCdEf')\
    \ returns (3, 3)\n    # You can also use the function count_upper_lower(string)\n\
    \    # to count the number of uppercase and lowercase letters in a string\n  \
    \  # For example: count_upper_lower('AbCdEf') returns (3, 3)\n    # You can also\
    \ use the function count_upper_lower(string)\n    # to count the number of uppercase\
    \ and lowercase letters in a string", "    # Your code here\n    pass\n\n", " \
    \   # your code here\n    return\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), x))\n",
  "    # your code here\n    return class_name + \".\" + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for i in x if i.isupper()), -sum(1 for i in x if i.islower())))\n",
  "    # Your code here\n    pass\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), x))\n",
  "    # Your code here\n    pass\n\n", "    # Your code here\n    pass\n\n", "  \
    \  # your code here\n    return None\n", "    # your code here\n    return None\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # Your code here\n    # You\
    \ can use the function count_upper_lower(string)\n    # to count the number of\
    \ upper and lower case letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of upper and lower case letters in a string\n    #\
    \ You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and lower case letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of upper and lower case\
    \ letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of upper and lower case letters in a string\n    #\
    \ You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and lower case letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of upper and lower case\
    \ letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of upper and lower case letters in a string\n    #\
    \ You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and lower case letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of upper and lower case\
    \ letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of upper and lower case letters in a string\n    #\
    \ You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and lower case letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of upper and lower case\
    \ letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of upper and lower case letters in a string\n    #\
    \ You can use the function count_upper_lower(string)\n    # to count the number\
    \ of upper and lower case letters in a string\n    # You can use the function\
    \ count_upper_lower(string)\n    # to count the number of upper and", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: (sum(1\
    \ for c in x if c.isupper()), x))\n", "    # Your code here\n    pass\n\n", " \
    \   # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n",
  "    # your code here\n    pass\n", "    # Your code here\n    # You can use the\
    \ function count_upper_lower(string)\n    # to count the number of uppercase and\
    \ lowercase letters in a string\n    # You can use the function count_upper_lower(string)\n\
    \    # to count the number of uppercase and lowercase letters in a string\n  \
    \  def count_upper_lower(string):\n        upper = 0\n        lower = 0\n    \
    \    for char in string:\n            if char.isupper():\n                upper\
    \ += 1\n            elif char.islower():\n                lower += 1\n       \
    \ return upper, lower\n    strongest = 0\n    strongest_extension = ''\n    for\
    \ extension in extensions:\n        upper, lower = count_upper_lower(extension)\n\
    \        if upper - lower > strongest:\n            strongest = upper - lower\n\
    \            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n    \n    ", "    # your code here\n\
    \    pass\n\n", "    # your code here\n    pass\n\n", "    # your code here\n\
    \    pass\n\n", "    # Your code here\n    pass\n\n", "    # your code here\n\
    \    pass\n", "    # your code here\n    pass\n\n", "    # your code here\n  \
    \  # return 'my_class.AA'\n    pass\n", "    # your code here\n    return class_name\
    \ + \".\" + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), x))\n",
  "    # Your code here\n    # You can use the function Count_Upper_Lower_Case(string)\n\
    \    # that you have written in the previous question\n    pass\n", "    # Your\
    \ code here\n    # Please note that the autograder will not call this function,\
    \ so do not change its name\n    # You may create other functions as needed\n\
    \    pass\n", "    # Your code here\n    # Please note that the first letter of\
    \ the class name is always capital\n    # and the extension names are always in\
    \ lowercase.\n    # You can assume that the class name is always a string and\
    \ the list of\n    # extensions is always a list of strings.\n    # You can also\
    \ assume that the list of extensions is never empty.\n    # You can also assume\
    \ that the class name is never empty.\n    # You can also assume that the class\
    \ name and the extension names will\n    # never contain any spaces.\n    # You\
    \ can also assume that the class name and the extension names will\n    # always\
    \ contain at least one letter.\n    # You can also assume that the class name\
    \ and the extension names will\n    # always contain only letters.\n    # You\
    \ can also assume that the class name and the extension names will\n    # always\
    \ contain only letters and numbers.\n    # You can also assume that the class\
    \ name and the extension names will\n    # always contain only letters, numbers\
    \ and underscores.\n    # You can also assume that the class name and the extension\
    \ names will\n    # always contain only letters, numbers, underscores and dots.\n\
    \    # You can also assume that the class name and the extension names will\n\
    \    # always contain only letters, numbers, underscores, dots and dashes.\n \
    \   # You can also assume that the class name and the extension names will\n \
    \   # always contain only letters, numbers, underscores, dots, dashes and\n  \
    \  # spaces.\n    # You can also assume that the class name and the extension\
    \ names will\n    # always contain only letters, numbers, underscores, dots, dashes,\
    \ spaces\n    # and parentheses.\n    # You can also assume that the class name\
    \ and the extension names will\n    # always contain only letters, numbers, underscores,\
    \ dots, dashes, spaces,\n    # parentheses and brackets.\n    # You can also assume\
    \ that the class name and the extension names will\n    # always contain only\
    \ letters, numbers, underscores, dots, dashes, spaces,\n    # parentheses, brackets\
    \ and curly braces.\n    # You can also assume that the class name and the extension\
    \ names will\n    # always contain only letters, numbers, underscores, dots, dashes,\
    \ spaces,\n    # parentheses, brackets, curly braces and commas.\n    # You can\
    \ also assume that the class name and the", "    # your code here\n    pass\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper())\
    \ - sum(1 for c in x if c.islower()))\n", "    # Your code here\n    # You can\
    \ use the function count_upper_lower(string)\n    # which returns a tuple (number_of_uppercase_letters,\
    \ number_of_lowercase_letters)\n    # for a given string\n    # You can use the\
    \ function count_upper_lower(string)\n    # which returns a tuple (number_of_uppercase_letters,\
    \ number_of_lowercase_letters)\n    # for a given string\n    # You can use the\
    \ function count_upper_lower(string)\n    # which returns a tuple (number_of_uppercase_letters,\
    \ number_of_lowercase_letters)\n    # for a given string\n    # You can use the\
    \ function count_upper_lower(string)\n    # which returns a tuple (number_of_uppercase_letters,\
    \ number_of_lowercase_letters)\n    # for a given string\n    # You can use the\
    \ function count_upper_lower(string)\n    # which returns a tuple (number_of_uppercase_letters,\
    \ number_of_lowercase_letters)\n    # for a given string\n    # You can use the\
    \ function count_upper_lower(string)\n    # which returns a tuple (number_of_uppercase_letters,\
    \ number_of_lowercase_letters)\n    # for a given string\n    # You can use the\
    \ function count_upper_lower(string)\n    # which returns a tuple (number_of_uppercase_letters,\
    \ number_of_lowercase_letters)\n    # for a given string\n    # You can use the\
    \ function count_upper_lower(string)\n    # which returns a tuple (number_of_uppercase_letters,\
    \ number_of_lowercase_letters)\n    # for a given string\n    # You can use the\
    \ function count_upper_lower(string)\n    # which returns a tuple (number_of_uppercase_letters,\
    \ number_of_lowercase_letters)\n    # for a given string\n    # You can use the\
    \ function count_upper_lower(string)\n    # which returns a tuple (number_of_uppercase_letters,\
    \ number_of_lowercase_letters)\n    # for a given string\n    # You can use",
  "    # Your code here\n    # Hint: You can use the function 'isupper' to check if\
    \ a character is uppercase.\n    #       You can use the function 'islower' to\
    \ check if a character is lowercase.\n    #       You can use the function 'ord'\
    \ to get the ASCII value of a character.\n    #       You can use the function\
    \ 'chr' to get the character from its ASCII value.\n    #       You can use the\
    \ function 'len' to get the length of a string.\n    #       You can use the function\
    \ 'range' to get a list of numbers.\n    #       You can use the function 'sorted'\
    \ to sort a list.\n    #       You can use the function 'enumerate' to get the\
    \ index of an element in a list.\n    #       You can use the function 'zip' to\
    \ combine two lists.\n    #       You can use the function 'max' to get the maximum\
    \ value of a list.\n    #       You can use the function 'min' to get the minimum\
    \ value of a list.\n    #       You can use the function 'sum' to get the sum\
    \ of a list.\n    #       You can use the function 'all' to check if all elements\
    \ of a list are True.\n    #       You can use the function 'any' to check if\
    \ any element of a list is True.\n    #       You can use the function 'reversed'\
    \ to get a reversed list.\n    #       You can use the function 'filter' to filter\
    \ a list.\n    #       You can use the function 'map' to map a list.\n    #  \
    \     You can use the function 'reduce' to reduce a list.\n    #       You can\
    \ use the function 'abs' to get the absolute value of a number.\n    #       You\
    \ can use the function 'round' to round a number.\n    #       You can use the\
    \ function 'divmod' to get the quotient and remainder of a division.\n    #  \
    \     You can use the function 'pow' to get the power of a number.\n    #    \
    \   You can use the function 'bin' to get the binary representation of a number.\n\
    \    #       You can use the function 'hex' to get the hexadecimal representation\
    \ of a number.\n    #       You can use the function", "    # Your code here\n\
    \    # You can use the function isupper() to check if a character is uppercase.\n\
    \    # You can use the function islower() to check if a character is lowercase.\n\
    \    # You can use the function ord() to get the ASCII value of a character.\n\
    \    # You can use the function chr() to get the character of a given ASCII value.\n\
    \    # You can use the function len() to get the length of a string.\n    # You\
    \ can use the function range() to get a list of numbers.\n    # You can use the\
    \ function str() to convert a number to a string.\n    # You can use the function\
    \ int() to convert a string to a number.\n    # You can use the function float()\
    \ to convert a string to a float.\n    # You can use the function max() to get\
    \ the maximum value of a list.\n    # You can use the function min() to get the\
    \ minimum value of a list.\n    # You can use the function abs() to get the absolute\
    \ value of a number.\n    # You can use the function sum() to get the sum of a\
    \ list.\n    # You can use the function round() to round a number.\n    # You\
    \ can use the function sorted() to sort a list.\n    # You can use the function\
    \ reversed() to reverse a list.\n    # You can use the function enumerate() to\
    \ get the index and value of a list.\n    # You can use the function zip() to\
    \ combine two lists.\n    # You can use the function filter() to filter a list.\n\
    \    # You can use the function map() to map a list.\n    # You can use the function\
    \ reduce() to reduce a list.\n    # You can use the function any() to check if\
    \ any of the elements in a list are True.\n    # You can use the function all()\
    \ to check if all of the elements in a list are True.\n    # You can use the function\
    \ isinstance() to check if an object is an instance of a class.\n    # You can\
    \ use the function issubclass() to check if a class is a subclass of another class.\n\
    \    # You can use the function hasattr() to check if an object has an attribute.\n\
    \    # You can use the function getattr() to get the value of an attribute.\n\
    \    #", "    # your code here\n    return class_name + \".\" + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    # your code here\n    pass\n\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), x))\n",
  "    # your code here\n    pass\n\n", "    # your code here\n    pass\n\n", "  \
    \  # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: len(re.findall('[A-Z]', x)) - len(re.findall('[a-z]', x)))\n", "    # Your\
    \ code here\n    # You can use the function count_upper_lower_letters(word)\n\
    \    # to count the number of uppercase and lowercase letters in a word\n    #\
    \ You can use the function count_upper_lower_letters(word)\n    # to count the\
    \ number of uppercase and lowercase letters in a word\n    # You can use the function\
    \ count_upper_lower_letters(word)\n    # to count the number of uppercase and\
    \ lowercase letters in a word\n    # You can use the function count_upper_lower_letters(word)\n\
    \    # to count the number of uppercase and lowercase letters in a word\n    #\
    \ You can use the function count_upper_lower_letters(word)\n    # to count the\
    \ number of uppercase and lowercase letters in a word\n    # You can use the function\
    \ count_upper_lower_letters(word)\n    # to count the number of uppercase and\
    \ lowercase letters in a word\n    # You can use the function count_upper_lower_letters(word)\n\
    \    # to count the number of uppercase and lowercase letters in a word\n    #\
    \ You can use the function count_upper_lower_letters(word)\n    # to count the\
    \ number of uppercase and lowercase letters in a word\n    # You can use the function\
    \ count_upper_lower_letters(word)\n    # to count the number of uppercase and\
    \ lowercase letters in a word\n    # You can use the function count_upper_lower_letters(word)\n\
    \    # to count the number of uppercase and lowercase letters in a word\n    #\
    \ You can use the function count_upper_lower_letters(word)\n    # to count the\
    \ number of uppercase and lowercase letters in a word\n    # You can use the function\
    \ count_upper_lower_letters(word)\n    # to count the number of uppercase and\
    \ lowercase letters in a word\n    # You can use the function count_upper_lower_letters(word)\n\
    \    # to count the number of uppercase and lowercase letters in a word\n    #\
    \ You can use the function count_upper_lower_letters(word)\n    # to count the\
    \ number of uppercase and lowercase letters in a word\n   ", "    # your code\
    \ here\n    return class_name + '.' + max(extensions, key=lambda x: (sum(1 for\
    \ c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n", "    # your\
    \ code here\n    pass\n\n\n", "    # Your code here\n    # You can use the function\
    \ count_upper_lower from the previous problem\n    # to count the number of uppercase\
    \ and lowercase letters in a string\n    # You can also use the function count_upper_lower_dict\
    \ from the previous\n    # problem to count the number of uppercase and lowercase\
    \ letters in a string\n    # and return a dictionary with the counts\n    # You\
    \ can also use the function count_upper_lower_dict_list from the previous\n  \
    \  # problem to count the number of uppercase and lowercase letters in a list\n\
    \    # of strings and return a list of dictionaries with the counts\n    # You\
    \ can also use the function count_upper_lower_dict_list_dict from the previous\n\
    \    # problem to count the number of uppercase and lowercase letters in a list\n\
    \    # of strings and return a dictionary of dictionaries with the counts\n  \
    \  # You can also use the function count_upper_lower_dict_list_dict_list from\
    \ the previous\n    # problem to count the number of uppercase and lowercase letters\
    \ in a list\n    # of strings and return a list of dictionaries of dictionaries\
    \ with the counts\n    # You can also use the function count_upper_lower_dict_list_dict_list_dict\
    \ from the previous\n    # problem to count the number of uppercase and lowercase\
    \ letters in a list\n    # of strings and return a dictionary of dictionaries\
    \ of dictionaries with the counts\n    # You can also use the function count_upper_lower_dict_list_dict_list_dict_list\
    \ from the previous\n    # problem to count the number of uppercase and lowercase\
    \ letters in a list\n    # of strings and return a list of dictionaries of dictionaries\
    \ of dictionaries with the counts\n    # You can also use the function count_upper_lower_dict_list_dict_list_dict_list_dict\
    \ from the previous\n    # problem to count the number of uppercase and lowercase\
    \ letters in a list\n    # of strings and return a dictionary of dictionaries\
    \ of dictionaries of dictionaries with the counts\n    # You can also use the\
    \ function count_upper_lower_dict_list_dict_list_dict_list_dict_list from the\
    \ previous\n    # problem to count the number of uppercase", "    # your code\
    \ here\n    return class_name + \".\" + max(extensions, key=lambda x: (sum(1 for\
    \ c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n", "    # your\
    \ code here\n    return class_name + '.' + max(extensions, key=lambda x: len(re.findall('[A-Z]',\
    \ x)) - len(re.findall('[a-z]', x)))\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1\
    \ for c in x if c.islower()))\n", "    # Your code here\n    pass\n\n", "    #\
    \ Your code here\n    # You can use the function isupper() and islower() to check\
    \ if a character is uppercase or lowercase.\n    # You can use the function ord()\
    \ to get the ASCII value of a character.\n    # You can use the function chr()\
    \ to get the character from the ASCII value.\n    # You can use the function len()\
    \ to get the length of a string.\n    # You can use the function range() to get\
    \ a list of numbers.\n    # You can use the function sum() to sum a list of numbers.\n\
    \    # You can use the function zip() to zip two lists into a list of tuples.\n\
    \    # You can use the function max() to get the maximum value from a list.\n\
    \    # You can use the function min() to get the minimum value from a list.\n\
    \    # You can use the function sorted() to sort a list.\n    # You can use the\
    \ function reversed() to reverse a list.\n    # You can use the function enumerate()\
    \ to get a list of tuples with the index and the value.\n    # You can use the\
    \ function str() to convert an integer to a string.\n    # You can use the function\
    \ int() to convert a string to an integer.\n    # You can use the function float()\
    \ to convert a string to a float.\n    # You can use the function abs() to get\
    \ the absolute value of a number.\n    # You can use the function all() to check\
    \ if all the values in a list are true.\n    # You can use the function any()\
    \ to check if any of the values in a list are true.\n    # You can use the function\
    \ map() to apply a function to all the values in a list.\n    # You can use the\
    \ function filter() to filter a list based on a function.\n    # You can use the\
    \ function reduce() to reduce a list to a single value.\n    # You can use the\
    \ function round() to round a number.\n    # You can use the function pow() to\
    \ raise a number to a power.\n    # You can use the function divmod() to get the\
    \ quotient and the remainder of a division.\n    # You can use the function pow()\
    \ to raise a number to a power.\n    # You can use the function divmod() to get\
    \ the quotient and the remainder of a", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    # Your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    #your code here\n    pass\n", "    # Your\
    \ code here\n    # Hint: You can use the function count_uppercase_letters(s)\n\
    \    #       and count_lowercase_letters(s)\n    #       that you have already\
    \ written in the previous exercise.\n    strongest_extension = extensions[0]\n\
    \    strongest_strength = count_uppercase_letters(extensions[0]) - count_lowercase_letters(extensions[0])\n\
    \    for extension in extensions:\n        strength = count_uppercase_letters(extension)\
    \ - count_lowercase_letters(extension)\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n", "    # your\
    \ code here\n    # return 'my_class.AA'\n    pass\n", "    # your code here\n\
    \    pass\n\n", "    # your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), x))\n", "    # Your code here\n\
    \    # You can use the function isupper() to check if a character is uppercase\n\
    \    # and the function islower() to check if a character is lowercase.\n    #\
    \ You can use the function ord() to get the ASCII code of a character.\n    #\
    \ You can use the function chr() to get the character from its ASCII code.\n \
    \   # You can use the function len() to get the length of a string.\n    # You\
    \ can use the function range() to get a list of numbers.\n    # You can use the\
    \ function enumerate() to get the index and value of a list.\n    # You can use\
    \ the function zip() to combine two lists.\n    # You can use the function max()\
    \ to get the maximum value of a list.\n    # You can use the function min() to\
    \ get the minimum value of a list.\n    # You can use the function sum() to get\
    \ the sum of a list.\n    # You can use the function abs() to get the absolute\
    \ value of a number.\n    # You can use the function pow() to get the power of\
    \ a number.\n    # You can use the function round() to round a number.\n    #\
    \ You can use the function sorted() to sort a list.\n    # You can use the function\
    \ reversed() to reverse a list.\n    # You can use the function join() to join\
    \ a list of strings.\n    # You can use the function split() to split a string\
    \ into a list of strings.\n    # You can use the function replace() to replace\
    \ a substring with another string.\n    # You can use the function strip() to\
    \ remove the whitespaces from the beginning and end of a string.\n    # You can\
    \ use the function lstrip() to remove the whitespaces from the beginning of a\
    \ string.\n    # You can use the function rstrip() to remove the whitespaces from\
    \ the end of a string.\n    # You can use the function find() to find the index\
    \ of a substring in a string.\n    # You can use the function count() to count\
    \ the number of occurrences of a substring in a string.\n    # You can use the\
    \ function index() to get the index of an element in a list.\n    # You can use\
    \ the function append() to add an element to the end of a list.\n    # You can\
    \ use", "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n",
  "    # Get the strength of each extension\n    strengths = [Extension_Strength(ext)\
    \ for ext in extensions]\n    # Get the index of the strongest extension\n   \
    \ strongest_index = strengths.index(max(strengths))\n    # Return the strongest\
    \ extension\n    return class_name + '.' + extensions[strongest_index]\n", " \
    \   # your code here\n    pass\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    # your code here\n    return class_name\
    \ + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1\
    \ for c in x if c.islower())))\n", "    # your code here\n    pass\n", "    #\
    \ your code here\n    return class_name + '.' + max(extensions, key=lambda x:\
    \ (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n", " \
    \   # your code here\n    pass\n", "    # Your code here\n    # Please note that\
    \ the first letter of the class name is capitalized.\n    # Please note that the\
    \ first letter of the extension name is capitalized.\n    # Please note that the\
    \ extension name is case sensitive.\n    # Please note that the extension name\
    \ is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please note\
    \ that the extension name is case sensitive.\n    # Please note that the extension\
    \ name is case sensitive.\n    # Please note that the extension name is case sensitive.\n\
    \    # Please note that the extension name is case sensitive.\n    # Please",
  "    # your code here\n    pass\n\n", "    # Your code here\n    # You can use the\
    \ function isupper() and islower() from the string module\n    # to check if a\
    \ character is uppercase or lowercase.\n    # You can use the function ord() to\
    \ get the ASCII code of a character.\n    # You can use the function chr() to\
    \ get the character from its ASCII code.\n    # You can use the function len()\
    \ to get the length of a string.\n    # You can use the function range() to get\
    \ a list of numbers.\n    # You can use the function zip() to combine two lists\
    \ into a list of pairs.\n    # You can use the function enumerate() to get a list\
    \ of pairs (index, element).\n    # You can use the function max() to get the\
    \ maximum value of a list.\n    # You can use the function min() to get the minimum\
    \ value of a list.\n    # You can use the function sum() to get the sum of the\
    \ elements of a list.\n    # You can use the function sorted() to sort a list.\n\
    \    # You can use the function reversed() to reverse a list.\n    # You can use\
    \ the function filter() to filter a list.\n    # You can use the function map()\
    \ to map a function to a list.\n    # You can use the function reduce() to reduce\
    \ a list.\n    # You can use the function any() to check if any element of a list\
    \ is True.\n    # You can use the function all() to check if all elements of a\
    \ list are True.\n    # You can use the function str() to convert a number to\
    \ a string.\n    # You can use the function int() to convert a string to a number.\n\
    \    # You can use the function float() to convert a string to a float.\n    #\
    \ You can use the function chr() to convert an integer to a character.\n    #\
    \ You can use the function ord() to convert a character to an integer.\n    #\
    \ You can use the function bin() to convert an integer to a binary string.\n \
    \   # You can use the function hex() to convert an integer to a hexadecimal string.\n\
    \    # You can use the function oct() to convert an integer to an octal string.\n\
    \    # You can use the function pow() to raise a number to a power.\n    # You\
    \ can use", "    # your code here\n    pass\n\n", "    # your code here\n    pass\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n\n", "    # your code here\n    pass\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n",
  "    # your code here\n    return class_name + '.' + max(extensions, key=lambda\
    \ x: (sum(1 for c in x if c.isupper()), x))\n", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper())\
    \ - sum(1 for c in x if c.islower()))\n\n", "    # your code here\n    return\
    \ class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x if c.isupper()),\
    \ -sum(1 for c in x if c.islower())))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
