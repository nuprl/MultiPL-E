language: notypes.py
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    if string == '':\n        return []\n    else:\n\
    \        return all_prefixes(string[:-1]) + [string]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    if string == '':\n        return []\n    return\
    \ [string[:i] for i in range(1, len(string) + 1)]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def all_prefixes(string):\n    \"\"\" Return list of all prefixes from\
    \ shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a',\
    \ 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string)\
    \ + 1)]\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert\
    \ candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
