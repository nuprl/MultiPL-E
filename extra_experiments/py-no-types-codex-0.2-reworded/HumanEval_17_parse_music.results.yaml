language: notypes.py
name: HumanEval_17_parse_music
results:
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_dict = {'o': 4, 'o|':\
    \ 2, '.|': 1}\n    music_list = music_string.split()\n    return [music_dict[note]\
    \ for note in music_list]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[x] for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Your code here\n    return\
    \ [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate('') == []\n  \
    \  assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rtzl69b.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8rtzl69b.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8rtzl69b.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if i == 'o' else\
    \ 2 if i == 'o|' else 1 for i in music_string.split()]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = []\n    for note\
    \ in music_string.split():\n        if note == 'o':\n            beats.append(4)\n\
    \        elif note == 'o|':\n            beats.append(2)\n        elif note ==\
    \ '.|':\n            beats.append(1)\n    return beats\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [notes[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: Implement this function.\n\
    \    # Hint: You can use the split() method to split the string into a list of\
    \ strings.\n    # You can use the strip() method to remove the '|' characters\
    \ from the strings.\n    # You can use the replace() method to replace the 'o'\
    \ characters with '4' characters.\n    # You can use the replace() method to replace\
    \ the '.' characters with '1' characters.\n    # You can use the map() method\
    \ to convert the strings to integers.\n    # You can use the list() method to\
    \ convert the map object to a list.\n    # You can use the sum() method to add\
    \ up the elements of a list.\n    # You can use the len() method to get the length\
    \ of a list.\n    # You can use the range() method to get a list of integers.\n\
    \    # You can use the zip() method to combine two lists.\n    # You can use the\
    \ list() method to convert the zip object to a list.\n    # You can use the in\
    \ operator to check if an element is in a list.\n    # You can use the append()\
    \ method to add an element to a list.\n    # You can use the index() method to\
    \ get the index of an element in a list.\n    # You can use the del operator to\
    \ delete an element from a list.\n    # You can use the count() method to count\
    \ the number of occurrences of an element in a list.\n    # You can use the pop()\
    \ method to remove an element from a list.\n    # You can use the remove() method\
    \ to remove an element from a list.\n    # You can use the insert() method to\
    \ insert an element into a list.\n    # You can use the sort() method to sort\
    \ a list.\n    # You can use the reverse() method to reverse a list.\n    # You\
    \ can use the extend() method to extend a list.\n    # You can use the copy()\
    \ method to copy a list.\n    # You can use the clear() method to clear a list.\n\
    \    # You can use the any() method to check if any element of a list is true.\n\
    \    # You can use the all() method to check if all elements of a list are true.\n\
    \    # You can use the enumerate() method to get the index and the element of\
    \ a\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjb6ycuf9.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpjb6ycuf9.py\", line 50,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpjb6ycuf9.py\", line\
    \ 43, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # YOUR CODE HERE\n    raise\
    \ NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpab5pal61.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpab5pal61.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpab5pal61.py\", line\
    \ 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmpab5pal61.py\"\
    , line 15, in parse_music\n    raise NotImplementedError()\nNotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: Implement this function.\n\
    \    # Hint: You can use regular expressions.\n    # Hint: You can use the split()\
    \ function.\n    # Hint: You can use the map() function.\n    # Hint: You can\
    \ use the int() function.\n    # Hint: You can use the list() function.\n    #\
    \ Hint: You can use the sum() function.\n    # Hint: You can use the zip() function.\n\
    \    # Hint: You can use the enumerate() function.\n    # Hint: You can use the\
    \ filter() function.\n    # Hint: You can use the any() function.\n    # Hint:\
    \ You can use the all() function.\n    # Hint: You can use the sorted() function.\n\
    \    # Hint: You can use the reversed() function.\n    # Hint: You can use the\
    \ set() function.\n    # Hint: You can use the len() function.\n    # Hint: You\
    \ can use the sum() function.\n    # Hint: You can use the max() function.\n \
    \   # Hint: You can use the min() function.\n    # Hint: You can use the abs()\
    \ function.\n    # Hint: You can use the divmod() function.\n    # Hint: You can\
    \ use the pow() function.\n    # Hint: You can use the round() function.\n   \
    \ # Hint: You can use the bin() function.\n    # Hint: You can use the hex() function.\n\
    \    # Hint: You can use the ord() function.\n    # Hint: You can use the chr()\
    \ function.\n    # Hint: You can use the isinstance() function.\n    # Hint: You\
    \ can use the type() function.\n    # Hint: You can use the dir() function.\n\
    \    # Hint: You can use the help() function.\n    # Hint: You can use the id()\
    \ function.\n    # Hint: You can use the hash() function.\n    # Hint: You can\
    \ use the repr() function.\n    # Hint: You can use the str() function.\n    #\
    \ Hint: You can use the format() function.\n    # Hint: You can use the\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn416y1rb.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpn416y1rb.py\", line 59,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpn416y1rb.py\", line\
    \ 52, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: Your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd7r4f8x.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphd7r4f8x.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmphd7r4f8x.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: Implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqss48hq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfqss48hq.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpfqss48hq.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.replace('o',\
    \ '4 ')\n    music_string = music_string.replace('o|', '2 ')\n    music_string\
    \ = music_string.replace('.|', '1 ')\n    music_string = music_string.split()\n\
    \    return [int(x) for x in music_string]\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpia5b11d4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpia5b11d4.py\", line 29,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpia5b11d4.py\", line\
    \ 25, in check\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n  File \"/tmp/tmpia5b11d4.py\", line 18, in parse_music\n    return\
    \ [int(x) for x in music_string]\n  File \"/tmp/tmpia5b11d4.py\", line 18, in\
    \ <listcomp>\n    return [int(x) for x in music_string]\nValueError: invalid literal\
    \ for int() with base 10: '|'\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # YOUR CODE HERE\n    #raise\
    \ NotImplementedError()\n    music_string = music_string.replace('o', '4')\n \
    \   music_string = music_string.replace('o|', '2')\n    music_string = music_string.replace('.|',\
    \ '1')\n    music_string = music_string.split()\n    music_string = [int(i) for\
    \ i in music_string]\n    return music_string\n\ndef check(candidate):\n    assert\
    \ candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert\
    \ candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .|\
    \ o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o|\
    \ o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwifzssdk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwifzssdk.py\", line 31,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpwifzssdk.py\", line\
    \ 27, in check\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n  File \"/tmp/tmpwifzssdk.py\", line 20, in parse_music\n    music_string\
    \ = [int(i) for i in music_string]\n  File \"/tmp/tmpwifzssdk.py\", line 20, in\
    \ <listcomp>\n    music_string = [int(i) for i in music_string]\nValueError: invalid\
    \ literal for int() with base 10: '4|'\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: write your code here\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate('') == []\n  \
    \  assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprwzw9x04.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprwzw9x04.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmprwzw9x04.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # YOUR CODE HERE\n    #raise\
    \ NotImplementedError()\n    #print(music_string)\n    #print(music_string.split('\
    \ '))\n    #print(len(music_string.split(' ')))\n    #print(music_string.split('\
    \ ')[0])\n    #print(music_string.split(' ')[1])\n    #print(music_string.split('\
    \ ')[2])\n    #print(music_string.split(' ')[3])\n    #print(music_string.split('\
    \ ')[4])\n    #print(music_string.split(' ')[5])\n    #print(music_string.split('\
    \ ')[6])\n    #print(music_string.split(' ')[7])\n    #print(music_string.split('\
    \ ')[8])\n    #print(music_string.split(' ')[9])\n    #print(music_string.split('\
    \ ')[10])\n    #print(music_string.split(' ')[11])\n    #print(music_string.split('\
    \ ')[12])\n    #print(music_string.split(' ')[13])\n    #print(music_string.split('\
    \ ')[14])\n    #print(music_string.split(' ')[15])\n    #print(music_string.split('\
    \ ')[16])\n    #print(music_string.split(' ')[17])\n    #print(music_string.split('\
    \ ')[18])\n    #print(music_string.split(' ')[19])\n    #print(music_string.split('\
    \ ')[20])\n    #print(music_string.split(' ')[21])\n    #print(music_string.split('\
    \ ')[22])\n    #print(music_string.split(' ')[23])\n    #print(music_string.split('\
    \ ')[24])\n    #print(music_string.split(' ')[25])\n    #print(music_string.split('\
    \ ')[26])\n    #print(music_string.split(' ')[27])\n    #print(music_string.split('\
    \ ')[28])\n    #print(music_string.split(' ')[29])\n    #print(music_string.\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1dz2te0z.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp1dz2te0z.py\", line 58,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp1dz2te0z.py\", line\
    \ 51, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement me!\n \
    \   return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement me\n  \
    \  return []\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr03dr5kj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr03dr5kj.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpr03dr5kj.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement me\n  \
    \  #raise NotImplementedError()\n    music_string = music_string.split()\n   \
    \ result = []\n    for i in music_string:\n        if i == 'o':\n            result.append(4)\n\
    \        elif i == 'o|':\n            result.append(2)\n        elif i == '.|':\n\
    \            result.append(1)\n    return result\n\ndef check(candidate):\n  \
    \  assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[x] for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement me\n  \
    \  return []\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr03dr5kj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr03dr5kj.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpr03dr5kj.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate('') == []\n  \
    \  assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rtzl69b.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8rtzl69b.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8rtzl69b.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_string = music_string.split()\n\
    \    music_list = []\n    for i in music_string:\n        if i == 'o':\n     \
    \       music_list.append(4)\n        elif i == 'o|':\n            music_list.append(2)\n\
    \        elif i == '.|':\n            music_list.append(1)\n    return music_list\n\
    \n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: Implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqss48hq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfqss48hq.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpfqss48hq.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: Implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqss48hq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfqss48hq.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpfqss48hq.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: Write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpioulaj2l.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpioulaj2l.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpioulaj2l.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate('') == []\n  \
    \  assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rtzl69b.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8rtzl69b.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8rtzl69b.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n\
    \    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp07ihhpvz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp07ihhpvz.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp07ihhpvz.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: Implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfqss48hq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfqss48hq.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpfqss48hq.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # REPLACE THE ERROR BELOW\
    \ WITH YOUR OWN CODE\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8g24oe95.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8g24oe95.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8g24oe95.py\", line\
    \ 19, in check\n    assert candidate('') == []\n  File \"/tmp/tmp8g24oe95.py\"\
    , line 15, in parse_music\n    raise NotImplementedError()\nNotImplementedError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # YOUR CODE HERE\n    music_list\
    \ = music_string.split()\n    music_list_int = []\n    for i in music_list:\n\
    \        if i == 'o':\n            music_list_int.append(4)\n        elif i ==\
    \ 'o|':\n            music_list_int.append(2)\n        elif i == '.|':\n     \
    \       music_list_int.append(1)\n    return music_list_int\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split()\n\
    \    music_list_int = []\n    for i in music_list:\n        if i == 'o':\n   \
    \         music_list_int.append(4)\n        elif i == 'o|':\n            music_list_int.append(2)\n\
    \        elif i == '.|':\n            music_list_int.append(1)\n    return music_list_int\n\
    \n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # YOUR CODE HERE\n    #raise\
    \ NotImplementedError()\n    return [4 if x == 'o' else 2 if x == 'o|' else 1\
    \ for x in music_string.split()]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: Implement this function\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate('') == []\n  \
    \  assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuz3mpu4o.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpuz3mpu4o.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpuz3mpu4o.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate('') == []\n  \
    \  assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rtzl69b.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8rtzl69b.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8rtzl69b.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    return []\n\n\ndef check(candidate):\n    assert candidate('') == []\n  \
    \  assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .|\
    \ .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2,\
    \ 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2,\
    \ 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rtzl69b.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8rtzl69b.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmp8rtzl69b.py\", line\
    \ 20, in check\n    assert candidate('o o o o') == [4, 4, 4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    music_list = music_string.split('\
    \ ')\n    result = []\n    for note in music_list:\n        if note == 'o':\n\
    \            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n\
    \        elif note == '.|':\n            result.append(1)\n    return result\n\
    \n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
    \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ (2 if x == 'o|' else 1) for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    beats = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    return [beats[note] for note in music_string.split()]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('o o\
    \ o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
    \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n   \
    \ assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef\
    \ test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskhxtxlt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpskhxtxlt.py\", line 25,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpskhxtxlt.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if x == 'o' else\
    \ 2 if x == 'o|' else 1 for x in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [4 if note == 'o'\
    \ else 2 if note == 'o|' else 1 for note in music_string.split()]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4,\
    \ 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o|\
    \ o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .|\
    \ o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement me\n  \
    \  pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpytm5p5t5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpytm5p5t5.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpytm5p5t5.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
- exit_code: 0
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # YOUR CODE HERE\n    # raise\
    \ NotImplementedError()\n    return [4 if x == 'o' else 2 if x == 'o|' else 1\
    \ for x in music_string.split()]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.|\
    \ .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2,\
    \ 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1,\
    \ 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660271067
- exit_code: -1
  program: "def parse_music(music_string):\n    \"\"\" Input to this function is a\
    \ string representing musical notes in a special ASCII format.\n    Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note,\
    \ lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note,\
    \ lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n   \
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert\
    \ candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') ==\
    \ [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2,\
    \ 4, 2]\n\ndef test_check():\n    check(parse_music)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpit9ib_h4.py\", line 26,\
    \ in test_check\n    check(parse_music)\n  File \"/tmp/tmpit9ib_h4.py\", line\
    \ 19, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1660271067
