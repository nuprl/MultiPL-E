completions:
- '  return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '  return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(v => typeof v === "number" && Number.isInteger(v));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && !isNaN(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(v => typeof v === "number" && Number.isInteger(v));

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && !isNaN(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number");

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(is_integer);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number");

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && !isNaN(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number");

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(is_integer);

  }

  '
- "    let result: number[] = [];\n    for (let i = 0; i < values.length; i++) {\n\
  \        if (typeof values[i] === \"number\") {\n            result.push(values[i]);\n\
  \        }\n    }\n    return result;\n}\n"
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && value % 1 === 0;\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- "    return values.filter(function (value: any): boolean {\n        return typeof\
  \ value === \"number\" && value % 1 === 0;\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '  return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(v => typeof v === "number" && Number.isInteger(v));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && !isNaN(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '  return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(v => typeof v === "number" && Number.isInteger(v));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(v => typeof v === "number" && Number.isInteger(v));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && !isNaN(value));

  }

  '
- '    return values.filter(value => typeof value === "number");

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(v => typeof v === "number" && Math.floor(v) === v);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number");

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(v => typeof v === "number" && v % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && !isNaN(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '  return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && !Number.isNaN(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && !isNaN(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '  return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && value % 1 === 0;\n    });\n}\n"
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && value % 1 === 0);

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- '    return values.filter(value => typeof value === "number" && Number.isInteger(value));

  }

  '
- "    return values.filter(function (value) {\n        return typeof value === \"\
  number\" && Number.isInteger(value);\n    });\n}\n"
language: ts
name: HumanEval_22_filter_integers
prompt: '// @ts-nocheck


  //Filter given array of any tsthon values only for integers

  // >>> filter_integers(["a", 3.14, 5])

  // [5]

  // >>> filter_integers([1, 2, 3, "abc", {}, []])

  // [1, 2, 3]

  function filter_integers(values: any[]): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
  \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
