language: ts
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (hex.indexOf(num[i]) !== -1) {\n            result++;\n \
    \       }\n    }\n    return result;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    const primes = [2, 3, 5, 7, 11, 13];\n \
    \   let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (isPrime(hex[num[i]])) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4qbocp6_.js:44\n        if (isPrime(hex[num[i]])) {\n        ^\n\
    \nReferenceError: isPrime is not defined\n    at hex_key (/tmp/tmp4qbocp6_.js:44:9)\n\
    \    at test (/tmp/tmp4qbocp6_.js:53:22)\n    at Object.<anonymous> (/tmp/tmp4qbocp6_.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (hex.includes(num[i])) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes: string = \"2357BD\";\n  \
    \  let count: number = 0;\n    for (let i: number = 0; i < num.length; i++) {\n\
    \        if (hexPrimes.indexOf(num[i]) > -1) {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = ['A', 'B',\
    \ 'D', '2', '3', '5', '7'];\n    for (let i = 0; i < num.length; i++) {\n    \
    \    if (hex.includes(num[i])) {\n            count++;\n        }\n    }\n   \
    \ return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpf87xepr8.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf87xepr8.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: '2

    2

    6

    7

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i\
    \ < num.length; i++) {\n        if (hex.indexOf(num[i]) !== -1) {\n          \
    \  result++;\n        }\n    }\n    return result;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        let digit = hex[num[i]];\n        if (digit === 2 || digit ===\
    \ 3 || digit === 5 || digit === 7 || digit === 11 || digit === 13) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hexPrimes:\
    \ string[] = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number\
    \ = 0; i < num.length; i++) {\n        if (hexPrimes.indexOf(num[i]) !== -1) {\n\
    \            result++;\n        }\n    }\n    return result;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    let primes: string[] = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (primes.indexOf(num[i]) !== -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex: string[] = ['0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let primes:\
    \ string[] = ['2', '3', '5', '7', 'B', 'D'];\n    let count: number = 0;\n   \
    \ for (let i: number = 0; i < num.length; i++) {\n        if (primes.indexOf(num[i])\
    \ > -1) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex: string[] =\
    \ [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex.includes(num[i])) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (hex.includes(num[i])) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n  \
    \      \"E\": 14,\n        \"F\": 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (num[i] in hex) {\n            if (hex[num[i]] == 2 || hex[num[i]]\
    \ == 3 || hex[num[i]] == 5 || hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]]\
    \ == 13) {\n                count++;\n            }\n        } else {\n      \
    \      if (parseInt(num[i]) == 2 || parseInt(num[i]) == 3 || parseInt(num[i])\
    \ == 5 || parseInt(num[i]) == 7 || parseInt(num[i]) == 11 || parseInt(num[i])\
    \ == 13) {\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"\
    6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    for\
    \ (let i = 0; i < num.length; i++) {\n        if (primes.includes(hex.indexOf(num[i])))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hex[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexDigits = {\n        '0': 0,\n   \
    \     '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5':\
    \ 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n   \
    \     'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n       \
    \ 'E': 14,\n        'F': 15\n    };\n    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hexDigits[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let arr = num.split('');\n    let count\
    \ = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === '2'\
    \ || arr[i] === '3' || arr[i] === '5' || arr[i] === '7' || arr[i] === 'B' || arr[i]\
    \ === 'D') {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        let digit = hex[num[i]];\n        if (digit === 2 || digit ===\
    \ 3 || digit === 5 || digit === 7 || digit === 11 || digit === 13) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexDigits = {\n        \"0\": 0,\n \
    \       \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n \
    \       \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n \
    \       \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n\
    \        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    };\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hexDigits[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2':\
    \ 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n   \
    \     '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B':\
    \ 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n\
    \    }\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hex[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        let hex\
    \ = num[i].toUpperCase();\n        if (primes.includes(parseInt(hex, 16))) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i\
    \ < num.length; i++) {\n        if (hex.indexOf(num[i]) !== -1) {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'];\n    let hex_prime: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for\
    \ (let i: number = 0; i < num.length; i++) {\n        if (hex_prime.indexOf(num[i])\
    \ !== -1) {\n            result++;\n        }\n    }\n    return result;\n}\n\n\
    console.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    let primes: string[] = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (primes.indexOf(num[i]) !== -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n      \
    \  \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n      \
    \  \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n    \
    \    \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n \
    \   }\n    for (let i = 0; i < num.length; i++) {\n        if (isPrime(hex[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp41fokudx.js:44\n        if (isPrime(hex[num[i]])) {\n        ^\n\
    \nReferenceError: isPrime is not defined\n    at hex_key (/tmp/tmp41fokudx.js:44:9)\n\
    \    at test (/tmp/tmp41fokudx.js:53:22)\n    at Object.<anonymous> (/tmp/tmp41fokudx.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    let count = 0;\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'];\n    let prime: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        for (let j: number = 0; j < prime.length;\
    \ j++) {\n            if (num[i] === prime[j]) {\n                count++;\n \
    \           }\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n      \
    \  \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n      \
    \  \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n    \
    \    \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n \
    \   }\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]] ===\
    \ 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]]\
    \ === 11 || hex[num[i]] === 13) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'];\n    let primes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (primes.indexOf(num[i]) !==\
    \ -1) {\n            result++;\n        }\n    }\n    return result;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n      \
    \  \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n      \
    \  \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n    \
    \    \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n \
    \   }\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]] ===\
    \ 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]]\
    \ === 11 || hex[num[i]] === 13) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        let char\
    \ = num[i];\n        if (primes.includes(parseInt(char, 16))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '2': true,\n        '3': true,\n        '5': true,\n        '7': true,\n  \
    \      'B': true,\n        'D': true\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]]) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ let primes = [2, 3, 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n      \
    \  \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n      \
    \  \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n    \
    \    \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n \
    \   }\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]] ===\
    \ 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]]\
    \ === 11 || hex[num[i]] === 13) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n      \
    \  \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n      \
    \  \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n    \
    \    \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n \
    \   }\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]] ==\
    \ 2 || hex[num[i]] == 3 || hex[num[i]] == 5 || hex[num[i]] == 7 || hex[num[i]]\
    \ == 11 || hex[num[i]] == 13) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E':\
    \ 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length; i++) {\n  \
    \      let n = num[i];\n        if (hex[n]) {\n            n = hex[n];\n     \
    \   }\n        if (n == '2' || n == '3' || n == '5' || n == '7' || n == '11' ||\
    \ n == '13') {\n            count++;\n        }\n    }\n    return count;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = ['2', '3', '5', '7', 'B',\
    \ 'D'];\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n    \
    \    if (hexPrimes.includes(num[i])) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hexDigits = [\"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\"];\n    let primeDigits = [\"2\", \"3\", \"5\"\
    , \"7\", \"B\", \"D\"];\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (primeDigits.includes(num[i])) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexDigits = {\n        '0': 0,\n   \
    \     '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5':\
    \ 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n   \
    \     'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n       \
    \ 'E': 14,\n        'F': 15\n    };\n    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hexDigits[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (hex.includes(num[i])) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'];\n    let primes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (primes.indexOf(num[i]) >\
    \ -1) {\n            result++;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (hex.includes(num[i])) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] == 2 || hex[num[i]] == 3 || hex[num[i]] == 5\
    \ || hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]] == 13) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"\
    ));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'];\n    let primes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (primes.indexOf(num[i]) !==\
    \ -1) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    let count = 0;\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = \"0123456789ABCDEF\"\
    ;\n    let primes = [2, 3, 5, 7, 11, 13];\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ let primes = [2, 3, 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    const primes = [2, 3, 5, 7, 11, 13];\n \
    \   const hex = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n       \
    \ '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n\
    \        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n      \
    \  'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    };\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hex[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'];\n    let prime: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for (let\
    \ i = 0; i < num.length; i++) {\n        if (prime.includes(num[i])) {\n     \
    \       result++;\n        }\n    }\n    return result;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        \"0\": 0,\n       \
    \ \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n       \
    \ \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n       \
    \ \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n    \
    \    \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    let count =\
    \ 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]] ===\
    \ 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]]\
    \ === 11 || hex[num[i]] === 13) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'];\n    let primes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (primes.indexOf(num[i]) >\
    \ -1) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [\"2\", \"3\", \"5\", \"\
    7\", \"B\", \"D\"];\n    let counter = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hexPrimes.includes(num[i])) {\n            counter++;\n\
    \        }\n    }\n    return counter;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const hex = [\"0\",\
    \ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"];\n    const prime = [2, 3, 5, 7, 11, 13];\n    for\
    \ (let i = 0; i < num.length; i++) {\n        if (prime.includes(hex.indexOf(num[i])))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    const hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (hex.indexOf(num[i]) !== -1) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    for (let i = 0; i <\
    \ num.length; i++) {\n        if (num[i] === '2' || num[i] === '3' || num[i] ===\
    \ '5' || num[i] === '7' || num[i] === 'B' || num[i] === 'D') {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (hex.indexOf(num[i]) !== -1) {\n            result++;\n \
    \       }\n    }\n    return result;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n  let count = 0;\n  for (let i = 0; i < num.length;\
    \ i++) {\n    if (num[i] === \"2\" || num[i] === \"3\" || num[i] === \"5\" ||\
    \ num[i] === \"7\" || num[i] === \"B\" || num[i] === \"D\") {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex.includes(num[i])) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexDigits = {\n        \"0\": 0,\n \
    \       \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n \
    \       \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n \
    \       \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n\
    \        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    };\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hexDigits[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E':\
    \ 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length; i++) {\n  \
    \      if (num[i] in hex) {\n            if (hex[num[i]] == 2 || hex[num[i]] ==\
    \ 3 || hex[num[i]] == 5 || hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]]\
    \ == 13) {\n                count++;\n            }\n        } else {\n      \
    \      if (Number(num[i]) == 2 || Number(num[i]) == 3 || Number(num[i]) == 5 ||\
    \ Number(num[i]) == 7 || Number(num[i]) == 11 || Number(num[i]) == 13) {\n   \
    \             count++;\n            }\n        }\n    }\n    return count;\n}\n\
    \nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E':\
    \ 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length; i++) {\n  \
    \      if (num[i] in hex) {\n            if (hex[num[i]] === 11 || hex[num[i]]\
    \ === 13) {\n                count++;\n            }\n        } else {\n     \
    \       if (parseInt(num[i]) === 2 || parseInt(num[i]) === 3 || parseInt(num[i])\
    \ === 5 || parseInt(num[i]) === 7) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexDigits = {\n        '0': 0,\n   \
    \     '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5':\
    \ 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n   \
    \     'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n       \
    \ 'E': 14,\n        'F': 15\n    };\n    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hexDigits[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexDigits = [\"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\"];\n    let primes = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n   \
    \ for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hexDigits.indexOf(num[i])))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        \"0\": 0,\n       \
    \ \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n       \
    \ \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n       \
    \ \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n    \
    \    \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    let count =\
    \ 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]] == 2\
    \ || hex[num[i]] == 3 || hex[num[i]] == 5 || hex[num[i]] == 7 || hex[num[i]] ==\
    \ 11 || hex[num[i]] == 13) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (isPrime(hex[num[i]])) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4qbocp6_.js:44\n        if (isPrime(hex[num[i]])) {\n        ^\n\
    \nReferenceError: isPrime is not defined\n    at hex_key (/tmp/tmp4qbocp6_.js:44:9)\n\
    \    at test (/tmp/tmp4qbocp6_.js:53:22)\n    at Object.<anonymous> (/tmp/tmp4qbocp6_.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i = 0; i < num.length; i++) {\n\
    \        if (hex.includes(num[i])) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] == 2 || hex[num[i]] == 3 || hex[num[i]] == 5\
    \ || hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]] == 13) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"\
    ));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        let digit = hex[num[i]];\n        if (digit === 2 || digit ===\
    \ 3 || digit === 5 || digit === 7 || digit === 11 || digit === 13) {\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        \"0\": 0,\n       \
    \ \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n       \
    \ \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n       \
    \ \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n    \
    \    \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    let primes\
    \ = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i\
    \ < num.length; i++) {\n        if (hex.indexOf(num[i]) > -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let hex = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"\
    9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    let count = 0;\n    for (let\
    \ i = 0; i < num.length; i++) {\n        if (primes.includes(hex.indexOf(num[i])))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexDigits = {\n        '0': 0,\n   \
    \     '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5':\
    \ 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n   \
    \     'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n       \
    \ 'E': 14,\n        'F': 15\n    };\n    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hexDigits[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const hex = {\n    \
    \    '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4':\
    \ 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n   \
    \     '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D':\
    \ 13,\n        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    let hex = {\n        \"0\": 0,\n        \"1\": 1,\n    \
    \    \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n    \
    \    \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n    \
    \    \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n\
    \        \"E\": 14,\n        \"F\": 15\n    };\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes: string = \"2357BD\";\n    let\
    \ count: number = 0;\n    for (let i: number = 0; i < num.length; i++) {\n   \
    \     if (primes.indexOf(num[i]) !== -1) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n      \
    \  \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n      \
    \  \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n    \
    \    \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n \
    \   }\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]] ===\
    \ 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]]\
    \ === 11 || hex[num[i]] === 13) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let hex = \"0123456789ABCDEF\";\n    let count = 0;\n    for (let i = 0; i <\
    \ num.length; i++) {\n        if (primes.includes(hex.indexOf(num[i]))) {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (hex.indexOf(num[i]) !== -1) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E':\
    \ 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length; i++) {\n  \
    \      if (num[i] in hex) {\n            if (hex[num[i]] == 11 || hex[num[i]]\
    \ == 13) {\n                count++;\n            }\n        } else {\n      \
    \      if (parseInt(num[i]) == 2 || parseInt(num[i]) == 3 || parseInt(num[i])\
    \ == 5 || parseInt(num[i]) == 7) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n       \
    \ 5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9,\n        A:\
    \ 10,\n        B: 11,\n        C: 12,\n        D: 13,\n        E: 14,\n      \
    \  F: 15\n    }\n    for (let i = 0; i < num.length; i++) {\n        if (isPrime(hex[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpex1dnmk1.js:44\n        if (isPrime(hex[num[i]])) {\n        ^\n\
    \nReferenceError: isPrime is not defined\n    at hex_key (/tmp/tmpex1dnmk1.js:44:9)\n\
    \    at test (/tmp/tmpex1dnmk1.js:53:22)\n    at Object.<anonymous> (/tmp/tmpex1dnmk1.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let sum = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            sum++;\n        }\n    }\n    return sum;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n  let count = 0;\n  const hex = {\n    \"A\"\
    : 10,\n    \"B\": 11,\n    \"C\": 12,\n    \"D\": 13,\n    \"E\": 14,\n    \"\
    F\": 15\n  }\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === \"\
    2\" || num[i] === \"3\" || num[i] === \"5\" || num[i] === \"7\" || num[i] ===\
    \ \"B\" || num[i] === \"D\") {\n      count++;\n    }\n  }\n  return count;\n\
    }\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hex[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [\"2\", \"3\", \"5\", \"\
    7\", \"B\", \"D\"];\n    let count = 0;\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (hexPrimes.includes(num[i])) {\n            count++;\n       \
    \ }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = ['0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] == 2 || hex[num[i]] == 3 || hex[num[i]] == 5\
    \ || hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]] == 13) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"\
    ));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    let primes: string[] = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (primes.indexOf(num[i]) !== -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n      \
    \  \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n      \
    \  \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n    \
    \    \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n \
    \   }\n    let primes = [2, 3, 5, 7, 11, 13];\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex[num[i]])) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i\
    \ < num.length; i++) {\n        if (hex.indexOf(num[i]) > -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i\
    \ < num.length; i++) {\n        for (let j: number = 0; j < hex.length; j++) {\n\
    \            if (num[i] === hex[j]) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] == 2 || hex[num[i]] == 3 || hex[num[i]] == 5\
    \ || hex[num[i]] == 7 || hex[num[i]] == 11 || hex[num[i]] == 13) {\n         \
    \   count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"\
    ));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (isPrime(hex[num[i]])) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4qbocp6_.js:44\n        if (isPrime(hex[num[i]])) {\n        ^\n\
    \nReferenceError: isPrime is not defined\n    at hex_key (/tmp/tmp4qbocp6_.js:44:9)\n\
    \    at test (/tmp/tmp4qbocp6_.js:53:22)\n    at Object.<anonymous> (/tmp/tmp4qbocp6_.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268026
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hexPrimes.includes(Number(num[i])))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n1\n    at test (/tmp/tmpm2qht__7.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpm2qht__7.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: '0

    2

    2

    4

    2

    '
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i = 0; i < num.length; i++) {\n\
    \        if (hex.includes(num[i])) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hexPrimes:\
    \ string[] = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number\
    \ = 0; i < num.length; i++) {\n        if (hexPrimes.indexOf(num[i]) > -1) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = ['2', '3', '5', '7', 'B',\
    \ 'D'];\n    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n    \
    \    if (hexPrimes.includes(num[i])) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'];\n    let primes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (primes.indexOf(num[i]) >\
    \ -1) {\n            result++;\n        }\n    }\n    return result;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (hex.indexOf(num[i]) !== -1) {\n            count++;\n  \
    \      }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexDigits = {\n        '0': 0,\n   \
    \     '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5':\
    \ 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n   \
    \     'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n       \
    \ 'E': 14,\n        'F': 15\n    };\n    let primes = [2, 3, 5, 7, 11, 13];\n\
    \    let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hexDigits[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n      \
    \  \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n      \
    \  \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n    \
    \    \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n \
    \   }\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]] ==\
    \ 2 || hex[num[i]] == 3 || hex[num[i]] == 5 || hex[num[i]] == 7 || hex[num[i]]\
    \ == 11 || hex[num[i]] == 13) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(Number(num[i])))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n1\n    at test (/tmp/tmpmq65z06i.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmq65z06i.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: '0

    2

    2

    4

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let primes = [2, 3, 5, 7, 11, 13]\n    let count\
    \ = 0\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hex[num[i]]))\
    \ {\n            count++\n        }\n    }\n    return count\n}\n\nconsole.log(hex_key(\"\
    AB\"))\nconsole.log(hex_key(\"1077E\"))\nconsole.log(hex_key(\"ABED1A33\"))\n\
    console.log(hex_key(\"123456789ABCDEF0\"))\nconsole.log(hex_key(\"2020\"))\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i = 0; i < num.length; i++) {\n\
    \        if (hex.includes(num[i])) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (isPrime(hex[num[i]])) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4qbocp6_.js:44\n        if (isPrime(hex[num[i]])) {\n        ^\n\
    \nReferenceError: isPrime is not defined\n    at hex_key (/tmp/tmp4qbocp6_.js:44:9)\n\
    \    at test (/tmp/tmp4qbocp6_.js:53:22)\n    at Object.<anonymous> (/tmp/tmp4qbocp6_.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (hex.includes(num[i])) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    let primes: string[] = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (primes.indexOf(num[i]) !== -1) {\n            result++;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    const hex = {\n        '0': 0,\n       \
    \ '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n\
    \        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    const hex:\
    \ string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for (let i: number = 0; i <\
    \ num.length; i++) {\n        if (hex.includes(num[i])) {\n            result++;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i\
    \ < num.length; i++) {\n        if (hex.indexOf(num[i]) !== -1) {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes = [2, 3, 5, 7, 11, 13];\n\
    \    let hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',\
    \ 'C', 'D', 'E', 'F'];\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hexPrimes.includes(hexDigits.indexOf(num[i]))) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const hex = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (hex.includes(num[i])) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = {\n        '0': 0,\n        '1':\
    \ 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n   \
    \     '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A':\
    \ 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n\
    \        'F': 15\n    }\n    let count = 0;\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        let current = hex[num[i]];\n        if (current === 2 || current\
    \ === 3 || current === 5 || current === 7 || current === 11 || current === 13)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex: string[] = [\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\"];\n    let primes: string[] = [\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"];\n    let count: number = 0;\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        if (primes.indexOf(num[i]) !== -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    let hex = {\n        '0': 0,\n        '1': 1,\n        '2':\
    \ 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n   \
    \     '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B':\
    \ 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n\
    \    }\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hex[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    let hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n      \
    \  \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n      \
    \  \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n    \
    \    \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n \
    \   }\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]] ==\
    \ 2 || hex[num[i]] == 3 || hex[num[i]] == 5 || hex[num[i]] == 7 || hex[num[i]]\
    \ == 11 || hex[num[i]] == 13) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\n\
    console.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = num.split('');\n    let hex_num: number[] = [];\n    let primes: number[]\
    \ = [2, 3, 5, 7, 11, 13];\n    for (let i: number = 0; i < hex.length; i++) {\n\
    \        if (hex[i] === 'A') {\n            hex_num.push(10);\n        } else\
    \ if (hex[i] === 'B') {\n            hex_num.push(11);\n        } else if (hex[i]\
    \ === 'C') {\n            hex_num.push(12);\n        } else if (hex[i] === 'D')\
    \ {\n            hex_num.push(13);\n        } else if (hex[i] === 'E') {\n   \
    \         hex_num.push(14);\n        } else if (hex[i] === 'F') {\n          \
    \  hex_num.push(15);\n        } else {\n            hex_num.push(Number(hex[i]));\n\
    \        }\n    }\n    for (let i: number = 0; i < hex_num.length; i++) {\n  \
    \      for (let j: number = 0; j < primes.length; j++) {\n            if (hex_num[i]\
    \ === primes[j]) {\n                result++;\n            }\n        }\n    }\n\
    \    return result;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = \"0123456789ABCDEF\"\
    ;\n    let primes = \"2357BDF\";\n    for (let i = 0; i < num.length; i++) {\n\
    \        if (primes.includes(num[i])) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n7\n\nshould equal\n\n6\n    at test (/tmp/tmp77v0qu1q.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmp77v0qu1q.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 6,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: '1

    2

    4

    7

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex: string[] = ['0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    let primes:\
    \ string[] = ['2', '3', '5', '7', 'B', 'D'];\n    let count: number = 0;\n   \
    \ for (let i: number = 0; i < num.length; i++) {\n        if (primes.indexOf(num[i])\
    \ !== -1) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    const hex = {\n        '0': 0,\n        '1': 1,\n      \
    \  '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n\
    \        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n       \
    \ 'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F':\
    \ 15\n    };\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(hex[num[i]]))\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    let count = 0;\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268040
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    const hex = {\n        \"0\": 0,\n     \
    \   \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n     \
    \   \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n     \
    \   \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n  \
    \      \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    let count\
    \ = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (hex[num[i]] ===\
    \ 2 || hex[num[i]] === 3 || hex[num[i]] === 5 || hex[num[i]] === 7 || hex[num[i]]\
    \ === 11 || hex[num[i]] === 13) {\n            count++;\n        }\n    }\n  \
    \  return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268040
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ let primes = [2, 3, 5, 7, 11, 13, 17];\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268040
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i\
    \ < num.length; i++) {\n        if (hex.indexOf(num[i]) !== -1) {\n          \
    \  count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268029
- exit_code: 1
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (isPrime(hex[num[i]])) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4qbocp6_.js:44\n        if (isPrime(hex[num[i]])) {\n        ^\n\
    \nReferenceError: isPrime is not defined\n    at hex_key (/tmp/tmp4qbocp6_.js:44:9)\n\
    \    at test (/tmp/tmp4qbocp6_.js:53:22)\n    at Object.<anonymous> (/tmp/tmp4qbocp6_.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'];\n    let count = 0;\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n\
    \        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9':\
    \ 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n\
    \        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hex = \"0123456789ABCDEF\";\n    let\
    \ primes = [2, 3, 5, 7, 11, 13];\n    let count = 0;\n    for (let i = 0; i <\
    \ num.length; i++) {\n        if (primes.includes(hex.indexOf(num[i]))) {\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268040
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let result: number = 0;\n    let hex: string[]\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'];\n    let primes: string[] = ['2', '3', '5', '7', 'B', 'D'];\n    for (let\
    \ i: number = 0; i < num.length; i++) {\n        if (primes.indexOf(num[i]) !==\
    \ -1) {\n            result++;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268040
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hexArr = ['2', '3',\
    \ '5', '7', 'B', 'D'];\n    for (let i = 0; i < num.length; i++) {\n        if\
    \ (hexArr.includes(num[i])) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268040
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    let hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = [\"2\", \"\
    3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i = 0; i < num.length; i++) {\n\
    \        if (hex.includes(num[i])) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268038
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const primes = [2, 3,\
    \ 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = ['0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n   \
    \ let primes = [2, 3, 5, 7, 11, 13];\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268040
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    const hex = {\n    \
    \    '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4':\
    \ 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n   \
    \     '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D':\
    \ 13,\n        'E': 14,\n        'F': 15\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]] === 2 || hex[num[i]] === 3 || hex[num[i]] ===\
    \ 5 || hex[num[i]] === 7 || hex[num[i]] === 11 || hex[num[i]] === 13) {\n    \
    \        count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268035
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count: number = 0;\n    let hex: string[]\
    \ = [\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"];\n    for (let i: number = 0; i\
    \ < num.length; i++) {\n        if (hex.indexOf(num[i]) > -1) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268040
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let primes = [2, 3,\
    \ 5, 7, 11, 13];\n    let hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (primes.includes(hex.indexOf(num[i]))) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268040
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let primes = [2, 3, 5, 7, 11, 13];\n   \
    \ let count = 0;\n    for (let i = 0; i < num.length; i++) {\n        if (primes.includes(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let hexPrimes: string = \"2357BD\";\n  \
    \  let count: number = 0;\n    for (let i: number = 0; i < num.length; i++) {\n\
    \        if (hexPrimes.indexOf(num[i]) !== -1) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268040
- exit_code: 0
  program: "// @ts-nocheck\n\n//You have been tasked to write a function that receives\
    \ \n// a hexadecimal number as a string and counts the number of hexadecimal \n\
    // digits that are primes (prime number, or a prime, is a natural number \n//\
    \ greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the\
    \ following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note:\
    \ you may assume the input is always correct or empty string, \n// and symbols\
    \ A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n//\
    \ 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>>\
    \ hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction\
    \ hex_key(num: string): number {\n    let count = 0;\n    let hex = {\n      \
    \  '2': true,\n        '3': true,\n        '5': true,\n        '7': true,\n  \
    \      'B': true,\n        'D': true\n    }\n    for (let i = 0; i < num.length;\
    \ i++) {\n        if (hex[num[i]]) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1660268040
