language: ts
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp8e4z_kgs.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8e4z_kgs.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpoe2mohum.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoe2mohum.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total_chars_lst1 = 0;\n    let\
    \ total_chars_lst2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n       \
    \ total_chars_lst1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length;\
    \ i++) {\n        total_chars_lst2 += lst2[i].length;\n    }\n    if (total_chars_lst1\
    \ < total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpvscueo4p.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvscueo4p.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpoe2mohum.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoe2mohum.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total_chars_lst1 = 0;\n    let\
    \ total_chars_lst2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n       \
    \ total_chars_lst1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length;\
    \ i++) {\n        total_chars_lst2 += lst2[i].length;\n    }\n    if (total_chars_lst1\
    \ < total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpvscueo4p.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvscueo4p.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp8e4z_kgs.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8e4z_kgs.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp590zstwy.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp590zstwy.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpoe2mohum.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoe2mohum.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total_chars1 = 0;\n    let total_chars2\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total_chars1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total_chars2 += lst2[i].length;\n\
    \    }\n    if (total_chars1 < total_chars2) {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = total_match;\n\
    \  assert.deepEqual(candidate([], []),[]);\n  assert.deepEqual(candidate([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\"]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"\
    ]);\n  assert.deepEqual(candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    ]),[\"4\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp2zxwm0sl.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2zxwm0sl.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp590zstwy.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp590zstwy.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp8e4z_kgs.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8e4z_kgs.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpl5oxu5d6.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5oxu5d6.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total_chars1 = 0;\n    let total_chars2\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total_chars1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total_chars2 += lst2[i].length;\n\
    \    }\n    if (total_chars1 < total_chars2) {\n        return lst1;\n    } else\
    \ {\n        return lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpm_64l048.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm_64l048.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total_chars_1 = 0;\n    let total_chars_2\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total_chars_1 +=\
    \ lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length; i++) {\n      \
    \  total_chars_2 += lst2[i].length;\n    }\n    if (total_chars_1 < total_chars_2)\
    \ {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = total_match;\n  assert.deepEqual(candidate([], []),[]);\n\
    \  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]),[\"hi\",\
    \ \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpp3j07jha.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp3j07jha.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let count1 = 0;\n    let count2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        count1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        count2 += lst2[i].length;\n\
    \    }\n    if (count1 < count2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpqf63kkrk.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqf63kkrk.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpoe2mohum.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoe2mohum.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp1pdagi2j.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1pdagi2j.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let len1 = 0;\n    let len2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        len1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        len2 += lst2[i].length;\n\
    \    }\n    if (len1 < len2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp7tnc9ox0.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7tnc9ox0.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpoe2mohum.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoe2mohum.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let count1 = 0;\n    let count2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        count1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        count2 += lst2[i].length;\n\
    \    }\n    if (count1 < count2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpxzagbx_v.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxzagbx_v.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpl5oxu5d6.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5oxu5d6.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp1pdagi2j.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1pdagi2j.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpoe2mohum.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoe2mohum.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp590zstwy.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp590zstwy.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp8e4z_kgs.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8e4z_kgs.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp8e4z_kgs.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8e4z_kgs.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpl5oxu5d6.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5oxu5d6.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0\n    let total2 =\
    \ 0\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length\n\
    \    }\n    if (total1 < total2) {\n        return lst1\n    } else {\n      \
    \  return lst2\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp090zdz2f.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp090zdz2f.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmptghef8ze.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptghef8ze.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let count1 = 0;\n    let count2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        count1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        count2 += lst2[i].length;\n\
    \    }\n    if (count1 < count2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpqf63kkrk.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqf63kkrk.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpoe2mohum.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoe2mohum.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp590zstwy.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp590zstwy.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp8e4z_kgs.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8e4z_kgs.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmp590zstwy.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp590zstwy.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpoe2mohum.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoe2mohum.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpl5oxu5d6.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5oxu5d6.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpl5oxu5d6.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5oxu5d6.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpl5oxu5d6.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5oxu5d6.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpl5oxu5d6.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5oxu5d6.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"Hi\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"]));\nconsole.log(total_match([\"hi\", \"admin\"], [\"hI\"\
    , \"hi\", \"hi\"]));\nconsole.log(total_match([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpl5oxu5d6.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl5oxu5d6.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: '[ ''hI'', ''Hi'' ]

    [ ''hi'', ''admin'' ]

    [ ''hI'', ''hi'', ''hi'' ]

    [ ''4'' ]

    '
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total_chars_lst1 = 0;\n    let\
    \ total_chars_lst2 = 0;\n    for (let i = 0; i < lst1.length; i++) {\n       \
    \ total_chars_lst1 += lst1[i].length;\n    }\n    for (let i = 0; i < lst2.length;\
    \ i++) {\n        total_chars_lst2 += lst2[i].length;\n    }\n    if (total_chars_lst1\
    \ < total_chars_lst2) {\n        return lst1;\n    } else {\n        return lst2;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpvscueo4p.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvscueo4p.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let count1 = 0;\n    let count2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        count1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        count2 += lst2[i].length;\n\
    \    }\n    if (count1 < count2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpqf63kkrk.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqf63kkrk.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let sum1 = 0;\n    let sum2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        sum2 += lst2[i].length;\n\
    \    }\n    if (sum1 < sum2) {\n        return lst1;\n    } else {\n        return\
    \ lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpylp11h28.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylp11h28.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let lst1_total = 0;\n    let lst2_total\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        lst1_total += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        lst2_total += lst2[i].length;\n\
    \    }\n    if (lst1_total < lst2_total) {\n        return lst1;\n    } else {\n\
    \        return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpoe2mohum.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoe2mohum.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function that accepts two arrays of strings\
    \ and returns the array that has \n// total number of chars in the all strings\
    \ of the array less than the other array.\n// if the two arrays have the same\
    \ number of chars, return the first array.\n// Examples\n// >>> total_match([],\
    \ [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"\
    hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1:\
    \ string[], lst2: string[]): string[] {\n    let total1 = 0;\n    let total2 =\
    \ 0;\n    for (let i = 0; i < lst1.length; i++) {\n        total1 += lst1[i].length;\n\
    \    }\n    for (let i = 0; i < lst2.length; i++) {\n        total2 += lst2[i].length;\n\
    \    }\n    if (total1 < total2) {\n        return lst1;\n    } else {\n     \
    \   return lst2;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = total_match;\n  assert.deepEqual(candidate([],\
    \ []),[]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]),[\"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"hi\", \"admin\"], [\"hi\"\
    , \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"]);\n  assert.deepEqual(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"]);\n  assert.deepEqual(candidate([],\
    \ [\"this\"]),[]);\n  assert.deepEqual(candidate([\"this\"], []),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'hI', 'hi', 'hii' ]\n\nshould equal\n\n\
    [ 'hi', 'admin' ]\n    at test (/tmp/tmpaqawbavr.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqawbavr.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'hI', 'hi',\
    \ 'hii' ],\n  expected: [ 'hi', 'admin' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268150
