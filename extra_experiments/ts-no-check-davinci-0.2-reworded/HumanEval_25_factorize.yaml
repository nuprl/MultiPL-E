completions:
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    const factors: number[] = [];\n    let divisor = 2;\n    while (n > 1) {\n\
  \        while (n % divisor === 0) {\n            factors.push(divisor);\n     \
  \       n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if\
  \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n         \
  \   i--;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let divider: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divider === 0) {\n            result.push(divider);\n     \
  \       n /= divider;\n        } else {\n            divider++;\n        }\n   \
  \ }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    const factors: number[] = [];\n    let i = 2;\n    while (n > 1) {\n      \
  \  if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n     \
  \   } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let divider: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divider === 0) {\n            result.push(divider);\n     \
  \       n /= divider;\n        } else {\n            divider++;\n        }\n   \
  \ }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while\
  \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            result.push(divisor);\n     \
  \       n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    const factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n       \
  \ while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n   \
  \     }\n    }\n    return factors;\n}\n"
- "    const factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n       \
  \ while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n   \
  \     }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "  let factors: number[] = [];\n  let i: number = 2;\n  while (n > 1) {\n    if\
  \ (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n    \
  \  i++;\n    }\n  }\n  return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let divider: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divider === 0) {\n            result.push(divider);\n     \
  \       n /= divider;\n        } else {\n            divider++;\n        }\n   \
  \ }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            result.push(divisor);\n  \
  \          n /= divisor;\n        }\n        divisor++;\n    }\n    return result;\n\
  }\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    const factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n       \
  \ while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n   \
  \     }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "  const factors: number[] = [];\n  let i = 2;\n  while (n > 1) {\n    while (n\
  \ % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n    i++;\n  }\n  return\
  \ factors;\n}\n"
- "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while\
  \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    const factors: number[] = [];\n    let divisor = 2;\n    while (n > 1) {\n\
  \        while (n % divisor === 0) {\n            factors.push(divisor);\n     \
  \       n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    const factors: number[] = [];\n    let i = 2;\n    while (n > 1) {\n      \
  \  while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n  \
  \      }\n        i++;\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let divider: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divider === 0) {\n            result.push(divider);\n     \
  \       n /= divider;\n        } else {\n            divider++;\n        }\n   \
  \ }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    const factors: number[] = [];\n    let divisor = 2;\n    while (n > 1) {\n\
  \        while (n % divisor === 0) {\n            factors.push(divisor);\n     \
  \       n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    const factors: number[] = [];\n    let divisor = 2;\n    while (n > 1) {\n\
  \        while (n % divisor === 0) {\n            factors.push(divisor);\n     \
  \       n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "  let result: number[] = [];\n  let i: number = 2;\n  while (n > 1) {\n    if (n\
  \ % i === 0) {\n      result.push(i);\n      n = n / i;\n    } else {\n      i++;\n\
  \    }\n  }\n  return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            result.push(divisor);\n     \
  \       n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n\n\
  console.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\n\
  console.log(factorize(70));"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while\
  \ (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n\
  \    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while\
  \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while\
  \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    const factors: number[] = [];\n    let divisor = 2;\n    while (n > 1) {\n\
  \        while (n % divisor === 0) {\n            factors.push(divisor);\n     \
  \       n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    const factors: number[] = [];\n    let divisor = 2;\n    while (n > 1) {\n\
  \        while (n % divisor === 0) {\n            factors.push(divisor);\n     \
  \       n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while\
  \ (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n\
  \    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while\
  \ (n % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            result.push(divisor);\n  \
  \          n /= divisor;\n        }\n        divisor++;\n    }\n    return result;\n\
  }\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            factors.push(divisor);\n    \
  \        n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return factors;\n}\n"
- "    const factors: number[] = [];\n    let current = n;\n    for (let i = 2; i\
  \ <= current; i++) {\n        while (current % i === 0) {\n            factors.push(i);\n\
  \            current /= i;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let divider: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divider === 0) {\n            result.push(divider);\n     \
  \       n /= divider;\n        } else {\n            divider++;\n        }\n   \
  \ }\n    return result;\n}\n"
- "    let result: number[] = [];\n    for (let i = 2; i < n; i++) {\n        while\
  \ (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n\
  \    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    const factors: number[] = [];\n    let i = 2;\n    while (n > 1) {\n      \
  \  if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n     \
  \   } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            result.push(divisor);\n     \
  \       n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    const factors: number[] = [];\n    let divisor = 2;\n    while (n > 1) {\n\
  \        while (n % divisor === 0) {\n            factors.push(divisor);\n     \
  \       n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "  let factors: number[] = [];\n  let i: number = 2;\n  while (n > 1) {\n    if\
  \ (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    } else {\n    \
  \  i++;\n    }\n  }\n  return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    const factors: number[] = [];\n    for (let i = 2; i <= n; i++) {\n       \
  \ while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n   \
  \     }\n    }\n    return factors;\n}\n"
- "  let result: number[] = [];\n  let i: number = 2;\n  while (n > 1) {\n    if (n\
  \ % i === 0) {\n      result.push(i);\n      n = n / i;\n    } else {\n      i++;\n\
  \    }\n  }\n  return result;\n}\n"
- "    const factors: number[] = [];\n    let i = 2;\n    while (n > 1) {\n      \
  \  if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n     \
  \   } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let divider: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divider === 0) {\n            result.push(divider);\n     \
  \       n /= divider;\n        } else {\n            divider++;\n        }\n   \
  \ }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        if (n % divisor === 0) {\n            result.push(divisor);\n     \
  \       n = n / divisor;\n        } else {\n            divisor++;\n        }\n\
  \    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    for (let i = 2; i <= n; i++) {\n        while\
  \ (n % i === 0) {\n            result.push(i);\n            n /= i;\n        }\n\
  \    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\nconsole.log(factorize(8));\n\
  console.log(factorize(25));\nconsole.log(factorize(70));\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    const factors: number[] = [];\n    let divisor = 2;\n    while (n > 1) {\n\
  \        while (n % divisor === 0) {\n            factors.push(divisor);\n     \
  \       n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n\
  \        if (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return factors;\n}\n"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n \
  \       if (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
  \        } else {\n            i++;\n        }\n    }\n    return result;\n}\n"
- "    let result: number[] = [];\n    let prime: number = 2;\n    while (n > 1) {\n\
  \        if (n % prime === 0) {\n            result.push(prime);\n            n\
  \ /= prime;\n        } else {\n            prime++;\n        }\n    }\n    return\
  \ result;\n}\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));"
- "    let factors: number[] = [];\n    let divisor: number = 2;\n    while (n > 1)\
  \ {\n        while (n % divisor === 0) {\n            factors.push(divisor);\n \
  \           n /= divisor;\n        }\n        divisor++;\n    }\n    return factors;\n\
  }\n"
language: ts
name: HumanEval_25_factorize
prompt: '// @ts-nocheck


  //Return array of prime factors of given integer in the order from smallest to largest.

  // Each of the factors should be arrayed number of times corresponding to how many
  times it appeares in factorization.

  // Input number should be equal to the product of all factors

  // >>> factorize(8)

  // [2, 2, 2]

  // >>> factorize(25)

  // [5, 5]

  // >>> factorize(70)

  // [2, 5, 7]

  function factorize(n: number): number[] {

  '
stop_tokens:
- '

  function '
- '

  /*'
- '

  //'
- '

  class'
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
  \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2, 2,\
  \ 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
  \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n \
  \ assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
  \ 3, 3]);\n}\n\ntest();"
