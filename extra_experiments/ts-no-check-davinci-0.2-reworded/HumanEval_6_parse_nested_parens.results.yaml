language: ts
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  let max_nesting = 0;\n\
    \  let nesting = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if\
    \ (paren_string[i] === \"(\") {\n      nesting++;\n      max_nesting = Math.max(max_nesting,\
    \ nesting);\n    } else if (paren_string[i] === \")\") {\n      nesting--;\n \
    \   } else if (paren_string[i] === \" \") {\n      result.push(max_nesting);\n\
    \      max_nesting = 0;\n      nesting = 0;\n    }\n  }\n  result.push(max_nesting);\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let result: number[] = [];\n  let paren_groups: string[]\
    \ = paren_string.split(\" \");\n  for (let paren_group of paren_groups) {\n  \
    \  let paren_stack: string[] = [];\n    let max_nesting: number = 0;\n    for\
    \ (let i = 0; i < paren_group.length; i++) {\n      if (paren_group[i] === \"\
    (\") {\n        paren_stack.push(\"(\");\n        max_nesting = Math.max(max_nesting,\
    \ paren_stack.length);\n      } else if (paren_group[i] === \")\") {\n       \
    \ paren_stack.pop();\n      }\n    }\n    result.push(max_nesting);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let result: number[] = [];\n  let paren_groups: string[]\
    \ = paren_string.split(\" \");\n  for (let i = 0; i < paren_groups.length; i++)\
    \ {\n    let paren_group: string = paren_groups[i];\n    let count: number = 0;\n\
    \    let max: number = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n\
    \      if (paren_group[j] === \"(\") {\n        count++;\n        if (count >\
    \ max) {\n          max = count;\n        }\n      } else if (paren_group[j] ===\
    \ \")\") {\n        count--;\n      }\n    }\n    result.push(max);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_depth: number = 0;\n        let current_depth: number = 0;\n\
    \        for (let char of paren_group) {\n            if (char === \"(\") {\n\
    \                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (char === \")\") {\n                current_depth--;\n     \
    \       }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let\
    \ paren_level = 0;\n    let max_level = 0;\n    for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n      if (paren_groups[i][j] === \"(\") {\n        paren_level++;\n\
    \      } else if (paren_groups[i][j] === \")\") {\n        paren_level--;\n  \
    \    }\n      if (paren_level > max_level) {\n        max_level = paren_level;\n\
    \      }\n    }\n    paren_levels.push(max_level);\n  }\n  return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const parens = paren_string.split(\" \");\n  const result:\
    \ number[] = [];\n  for (let i = 0; i < parens.length; i++) {\n    let open =\
    \ 0;\n    let close = 0;\n    for (let j = 0; j < parens[i].length; j++) {\n \
    \     if (parens[i][j] === \"(\") {\n        open++;\n      } else {\n       \
    \ close++;\n      }\n    }\n    result.push(Math.min(open, close));\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 3, 1, 5 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpcg2zk0eo.js:28:12)\n    at Object.<anonymous> (/tmp/tmpcg2zk0eo.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1, 5 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  const paren_groups =\
    \ paren_string.split(\" \");\n  for (const paren_group of paren_groups) {\n  \
    \  let max_depth = 0;\n    let current_depth = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (paren === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_arr = paren_string.split(\" \");\n    let\
    \ result: number[] = [];\n    for (let i = 0; i < paren_arr.length; i++) {\n \
    \       let paren_group = paren_arr[i];\n        let paren_stack: string[] = [];\n\
    \        let max_depth = 0;\n        for (let j = 0; j < paren_group.length; j++)\
    \ {\n            let paren = paren_group[j];\n            if (paren === \"(\"\
    ) {\n                paren_stack.push(paren);\n                max_depth = Math.max(max_depth,\
    \ paren_stack.length);\n            } else if (paren === \")\") {\n          \
    \      paren_stack.pop();\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let level\
    \ = 0;\n    let max_level = 0;\n    for (const char of group) {\n      if (char\
    \ === \"(\") {\n        level++;\n      } else if (char === \")\") {\n       \
    \ level--;\n      }\n      max_level = Math.max(max_level, level);\n    }\n  \
    \  result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = paren_groups.map(paren_group => {\n    let level = 0;\n    let\
    \ max_level = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      if\
    \ (paren_group[i] === \"(\") {\n        level++;\n      } else if (paren_group[i]\
    \ === \")\") {\n        level--;\n      }\n      max_level = Math.max(max_level,\
    \ level);\n    }\n    return max_level;\n  });\n  return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_level:\
    \ number = 0;\n        let level: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            let paren: string = paren_group[j];\n            if (paren\
    \ === \"(\") {\n                level++;\n            } else if (paren === \"\
    )\") {\n                level--;\n            }\n            if (level > max_level)\
    \ {\n                max_level = level;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const parens_array = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (let i = 0; i < parens_array.length; i++) {\n\
    \    let paren_count = 0;\n    let max_paren_count = 0;\n    for (let j = 0; j\
    \ < parens_array[i].length; j++) {\n      if (parens_array[i][j] === \"(\") {\n\
    \        paren_count++;\n      } else if (parens_array[i][j] === \")\") {\n  \
    \      paren_count--;\n      }\n      if (paren_count > max_paren_count) {\n \
    \       max_paren_count = paren_count;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  const paren_groups =\
    \ paren_string.split(\" \");\n  for (const paren_group of paren_groups) {\n  \
    \  let max_level = 0;\n    let current_level = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_level++;\n        max_level\
    \ = Math.max(max_level, current_level);\n      } else if (paren === \")\") {\n\
    \        current_level--;\n      }\n    }\n    result.push(max_level);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_levels.push(get_paren_level(paren_groups[i]));\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpnkhtnc72.js:11\n        paren_levels.push(get_paren_level(paren_groups[i]));\n\
    \                     ^\n\nReferenceError: get_paren_level is not defined\n  \
    \  at parse_nested_parens (/tmp/tmpnkhtnc72.js:11:22)\n    at test (/tmp/tmpnkhtnc72.js:18:22)\n\
    \    at Object.<anonymous> (/tmp/tmpnkhtnc72.js:22:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (char === \")\")\
    \ {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const group of paren_groups) {\n  \
    \      let max_level = 0;\n        let current_level = 0;\n        for (const\
    \ char of group) {\n            if (char === \"(\") {\n                current_level++;\n\
    \                max_level = Math.max(max_level, current_level);\n           \
    \ } else if (char === \")\") {\n                current_level--;\n           \
    \ }\n        }\n        result.push(max_level);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_level = 0;\n    let level = 0;\n    for (const char of paren_group) {\n\
    \      if (char === \"(\") {\n        level++;\n        max_level = Math.max(max_level,\
    \ level);\n      } else if (char === \")\") {\n        level--;\n      }\n   \
    \ }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let result: number[] = [];\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth = 0;\n        let current_depth = 0;\n        for (let i\
    \ = 0; i < paren_group.length; i++) {\n            if (paren_group[i] === \"(\"\
    ) {\n                current_depth++;\n            } else if (paren_group[i] ===\
    \ \")\") {\n                current_depth--;\n            }\n            if (current_depth\
    \ > max_depth) {\n                max_depth = current_depth;\n            }\n\
    \        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  const paren_groups =\
    \ paren_string.split(\" \");\n  for (const paren_group of paren_groups) {\n  \
    \  let level = 0;\n    let max_level = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        level++;\n      } else if (paren ===\
    \ \")\") {\n        level--;\n      }\n      if (level > max_level) {\n      \
    \  max_level = level;\n      }\n    }\n    result.push(max_level);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const parens = paren_string.split(\" \");\n  const result:\
    \ number[] = [];\n  for (let i = 0; i < parens.length; i++) {\n    const paren\
    \ = parens[i];\n    let count = 0;\n    let max = 0;\n    for (let j = 0; j <\
    \ paren.length; j++) {\n      if (paren[j] === \"(\") {\n        count++;\n  \
    \      max = Math.max(max, count);\n      } else {\n        count--;\n      }\n\
    \    }\n    result.push(max);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let curr_depth = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        curr_depth++;\n        max_depth = Math.max(max_depth,\
    \ curr_depth);\n      } else if (char === \")\") {\n        curr_depth--;\n  \
    \    }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (char === \")\")\
    \ {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_nesting = 0;\n        let current_nesting = 0;\n        for\
    \ (const paren of paren_group) {\n            if (paren === \"(\") {\n       \
    \         current_nesting++;\n            } else if (paren === \")\") {\n    \
    \            current_nesting--;\n            }\n            if (current_nesting\
    \ > max_nesting) {\n                max_nesting = current_nesting;\n         \
    \   }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let result: number[] = [];\n    for (let paren_group of paren_groups) {\n  \
    \      result.push(parse_nested_parens_helper(paren_group));\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwkq9q7fd.js:12\n        result.push(parse_nested_parens_helper(paren_group));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpwkq9q7fd.js:12:16)\n    at test (/tmp/tmpwkq9q7fd.js:19:22)\n\
    \    at Object.<anonymous> (/tmp/tmpwkq9q7fd.js:23:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (char === \")\")\
    \ {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (paren === \")\"\
    ) {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const result: number[] = [];\n    const paren_groups\
    \ = paren_string.split(\" \");\n    for (const paren_group of paren_groups) {\n\
    \        let max_depth = 0;\n        let current_depth = 0;\n        for (const\
    \ char of paren_group) {\n            if (char === \"(\") {\n                current_depth++;\n\
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \ } else if (char === \")\") {\n                current_depth--;\n           \
    \ }\n        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (paren === \")\"\
    ) {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const char of group) {\n      if\
    \ (char === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_nesting: number = 0;\n        let current_nesting: number = 0;\n\
    \        for (let char of paren_group) {\n            if (char === \"(\") {\n\
    \                current_nesting++;\n                if (current_nesting > max_nesting)\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           } else if (char === \")\") {\n                current_nesting--;\n\
    \            }\n        }\n        result.push(max_nesting);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const parens = paren_string.split(\" \");\n  const result:\
    \ number[] = [];\n  for (let i = 0; i < parens.length; i++) {\n    result.push(parse_parens(parens[i]));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9x_xh2pu.js:11\n        result.push(parse_parens(parens[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmp9x_xh2pu.js:11:16)\n    at test (/tmp/tmp9x_xh2pu.js:18:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9x_xh2pu.js:22:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const group of paren_groups) {\n  \
    \      let max_nesting = 0;\n        let current_nesting = 0;\n        for (const\
    \ paren of group) {\n            if (paren === \"(\") {\n                current_nesting++;\n\
    \            } else if (paren === \")\") {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_depth: number = 0;\n        let depth: number = 0;\n        for\
    \ (let i: number = 0; i < paren_group.length; i++) {\n            if (paren_group[i]\
    \ === \"(\") {\n                depth++;\n                if (depth > max_depth)\
    \ {\n                    max_depth = depth;\n                }\n            }\
    \ else if (paren_group[i] === \")\") {\n                depth--;\n           \
    \ }\n        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_level = 0;\n    let level = 0;\n    for (const char of paren_group) {\n\
    \      if (char === \"(\") {\n        level++;\n        max_level = Math.max(max_level,\
    \ level);\n      } else if (char === \")\") {\n        level--;\n      }\n   \
    \ }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_level = 0;\n        let level = 0;\n        for (const char\
    \ of paren_group) {\n            if (char === \"(\") {\n                level++;\n\
    \                max_level = Math.max(max_level, level);\n            } else if\
    \ (char === \")\") {\n                level--;\n            }\n        }\n   \
    \     result.push(max_level);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let result = [];\n    for (let paren_group of paren_groups) {\n        let max_level\
    \ = 0;\n        let level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === \"(\") {\n                level++;\n\
    \            } else if (paren_group[i] === \")\") {\n                level--;\n\
    \            }\n            max_level = Math.max(max_level, level);\n        }\n\
    \        result.push(max_level);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let paren_stack: string[] = [];\n        let max_nesting: number = 0;\n\
    \        for (let paren of paren_group) {\n            if (paren === \"(\") {\n\
    \                paren_stack.push(paren);\n                max_nesting = Math.max(max_nesting,\
    \ paren_stack.length);\n            } else if (paren === \")\") {\n          \
    \      paren_stack.pop();\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_depth:\
    \ number = 0;\n        let current_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\") {\n\
    \                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (paren_group[j] === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (paren === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let depth = 0;\n    for (const char of paren_group) {\n\
    \      if (char === \"(\") {\n        depth++;\n        max_depth = Math.max(max_depth,\
    \ depth);\n      } else if (char === \")\") {\n        depth--;\n      }\n   \
    \ }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_level: number = 0;\n        let current_level: number = 0;\n\
    \        for (let char of paren_group) {\n            if (char === \"(\") {\n\
    \                current_level++;\n                if (current_level > max_level)\
    \ {\n                    max_level = current_level;\n                }\n     \
    \       } else if (char === \")\") {\n                current_level--;\n     \
    \       }\n        }\n        result.push(max_level);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (char === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const char of group) {\n      if\
    \ (char === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const char of group) {\n      if\
    \ (char === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const result: number[] = [];\n    const paren_groups\
    \ = paren_string.split(\" \");\n    for (const paren_group of paren_groups) {\n\
    \        let max_nesting = 0;\n        let current_nesting = 0;\n        for (const\
    \ paren of paren_group) {\n            if (paren === \"(\") {\n              \
    \  current_nesting++;\n            } else if (paren === \")\") {\n           \
    \     current_nesting--;\n            }\n            if (current_nesting > max_nesting)\
    \ {\n                max_nesting = current_nesting;\n            }\n        }\n\
    \        result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let parens = paren_string.split(\" \");\n    let result:\
    \ number[] = [];\n    for (let paren of parens) {\n        result.push(max_nested_parens(paren));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgblt80qc.js:12\n        result.push(max_nested_parens(paren));\n\
    \               ^\n\nReferenceError: max_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpgblt80qc.js:12:16)\n    at test (/tmp/tmpgblt80qc.js:19:22)\n\
    \    at Object.<anonymous> (/tmp/tmpgblt80qc.js:23:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let paren_groups = paren_string.split(\" \");\n  let\
    \ result = [];\n  for (let paren_group of paren_groups) {\n    let max_depth =\
    \ 0;\n    let current_depth = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === \"(\") {\n        current_depth++;\n  \
    \    } else if (paren_group[i] === \")\") {\n        current_depth--;\n      }\n\
    \      if (current_depth > max_depth) {\n        max_depth = current_depth;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_nesting:\
    \ number = 0;\n        let current_nesting: number = 0;\n        for (let j =\
    \ 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\"\
    ) {\n                current_nesting++;\n                if (current_nesting >\
    \ max_nesting) {\n                    max_nesting = current_nesting;\n       \
    \         }\n            } else if (paren_group[j] === \")\") {\n            \
    \    current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let result: number[] = [];\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group = paren_groups[i];\n        let max_depth = 0;\n\
    \        let current_depth = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                current_depth++;\n\
    \                if (current_depth > max_depth) {\n                    max_depth\
    \ = current_depth;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                current_depth--;\n            }\n        }\n     \
    \   result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let count\
    \ = 0;\n    let max_count = 0;\n    for (const char of group) {\n      if (char\
    \ === \"(\") {\n        count++;\n      } else if (char === \")\") {\n       \
    \ count--;\n      }\n      max_count = Math.max(max_count, count);\n    }\n  \
    \  result.push(max_count);\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting_level = 0;\n    let current_nesting_level = 0;\n    for (const paren\
    \ of paren_group) {\n      if (paren === \"(\") {\n        current_nesting_level++;\n\
    \      } else if (paren === \")\") {\n        current_nesting_level--;\n     \
    \ }\n      max_nesting_level = Math.max(max_nesting_level, current_nesting_level);\n\
    \    }\n    result.push(max_nesting_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let paren_groups = paren_string.split(\" \");\n  let\
    \ max_nesting_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n\
    \    let paren_group = paren_groups[i];\n    let max_nesting_level = 0;\n    let\
    \ current_nesting_level = 0;\n    for (let j = 0; j < paren_group.length; j++)\
    \ {\n      let paren = paren_group[j];\n      if (paren === \"(\") {\n       \
    \ current_nesting_level++;\n      } else if (paren === \")\") {\n        current_nesting_level--;\n\
    \      }\n      if (current_nesting_level > max_nesting_level) {\n        max_nesting_level\
    \ = current_nesting_level;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_levels.push(parse_paren_group(paren_groups[i]));\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0io0i4bt.js:11\n        paren_levels.push(parse_paren_group(paren_groups[i]));\n\
    \                     ^\n\nReferenceError: parse_paren_group is not defined\n\
    \    at parse_nested_parens (/tmp/tmp0io0i4bt.js:11:22)\n    at test (/tmp/tmp0io0i4bt.js:18:22)\n\
    \    at Object.<anonymous> (/tmp/tmp0io0i4bt.js:22:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_depth = 0;\n        let current_depth = 0;\n        for (const\
    \ paren of paren_group) {\n            if (paren === \"(\") {\n              \
    \  current_depth++;\n                max_depth = Math.max(max_depth, current_depth);\n\
    \            } else if (paren === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_array: string[]\
    \ = paren_string.split(\" \");\n    for (let i = 0; i < paren_array.length; i++)\
    \ {\n        let paren_group: string = paren_array[i];\n        let max_nesting:\
    \ number = 0;\n        let current_nesting: number = 0;\n        for (let j =\
    \ 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\"\
    ) {\n                current_nesting++;\n                if (current_nesting >\
    \ max_nesting) {\n                    max_nesting = current_nesting;\n       \
    \         }\n            } else if (paren_group[j] === \")\") {\n            \
    \    current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    const\
    \ stack: string[] = [];\n    let max_depth = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        stack.push(char);\n        max_depth\
    \ = Math.max(max_depth, stack.length);\n      } else if (char === \")\") {\n \
    \       stack.pop();\n      }\n    }\n    result.push(max_depth);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    paren_levels.push(parse_nested_parens_helper(paren_groups[i]));\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2vwrefea.js:11\n        paren_levels.push(parse_nested_parens_helper(paren_groups[i]));\n\
    \                     ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmp2vwrefea.js:11:22)\n    at test (/tmp/tmp2vwrefea.js:18:22)\n\
    \    at Object.<anonymous> (/tmp/tmp2vwrefea.js:22:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_depth: number = 0;\n        let depth: number = 0;\n        for\
    \ (let paren of paren_group) {\n            if (paren === \"(\") {\n         \
    \       depth++;\n                if (depth > max_depth) {\n                 \
    \   max_depth = depth;\n                }\n            } else if (paren === \"\
    )\") {\n                depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let max_nesting_levels = [];\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group = paren_groups[i];\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                current_nesting_level++;\n\
    \            } else if (paren_group[j] === \")\") {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_nesting:\
    \ number = 0;\n        let current_nesting: number = 0;\n        for (let j =\
    \ 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\"\
    ) {\n                current_nesting++;\n                if (current_nesting >\
    \ max_nesting) {\n                    max_nesting = current_nesting;\n       \
    \         }\n            } else if (paren_group[j] === \")\") {\n            \
    \    current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (paren === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const paren_levels = paren_groups.map(paren_group => {\n        let level\
    \ = 0;\n        let max_level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === \"(\") {\n                level++;\n\
    \            } else if (paren_group[i] === \")\") {\n                level--;\n\
    \            }\n            if (level > max_level) {\n                max_level\
    \ = level;\n            }\n        }\n        return max_level;\n    });\n   \
    \ return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  return\
    \ paren_groups.map(paren_group => {\n    let max_depth = 0;\n    let current_depth\
    \ = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      if (paren_group[i]\
    \ === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren_group[i] === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    return max_depth;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (char === \")\")\
    \ {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const parens = paren_string.split(\" \");\n  const result:\
    \ number[] = [];\n  for (let paren of parens) {\n    let max = 0;\n    let count\
    \ = 0;\n    for (let i = 0; i < paren.length; i++) {\n      if (paren[i] === \"\
    (\") {\n        count++;\n        max = Math.max(max, count);\n      } else {\n\
    \        count--;\n      }\n    }\n    result.push(max);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_depth = 0;\n        let current_depth = 0;\n        for (const\
    \ paren of paren_group) {\n            if (paren === \"(\") {\n              \
    \  current_depth++;\n                max_depth = Math.max(max_depth, current_depth);\n\
    \            } else if (paren === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_depth = 0;\n        let current_depth = 0;\n        for (const\
    \ paren of paren_group) {\n            if (paren === \"(\") {\n              \
    \  current_depth++;\n                max_depth = Math.max(max_depth, current_depth);\n\
    \            } else if (paren === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = paren_groups.map(paren_group => {\n    let level = 0;\n    let\
    \ max_level = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      if\
    \ (paren_group[i] === \"(\") {\n        level++;\n      } else if (paren_group[i]\
    \ === \")\") {\n        level--;\n      }\n      if (level > max_level) {\n  \
    \      max_level = level;\n      }\n    }\n    return max_level;\n  });\n  return\
    \ paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let paren_levels = [];\n    for (let paren_group of paren_groups) {\n      \
    \  let paren_level = 0;\n        let max_paren_level = 0;\n        for (let paren\
    \ of paren_group) {\n            if (paren === \"(\") {\n                paren_level++;\n\
    \            } else if (paren === \")\") {\n                paren_level--;\n \
    \           }\n            if (paren_level > max_paren_level) {\n            \
    \    max_paren_level = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (char === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_array = paren_string.split(\" \");\n    let\
    \ result: number[] = [];\n    for (let i = 0; i < paren_array.length; i++) {\n\
    \        let paren = paren_array[i];\n        let count = 0;\n        let max\
    \ = 0;\n        for (let j = 0; j < paren.length; j++) {\n            if (paren[j]\
    \ === \"(\") {\n                count++;\n            } else if (paren[j] ===\
    \ \")\") {\n                count--;\n            }\n            if (count > max)\
    \ {\n                max = count;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let depth = 0;\n    for (const char of paren_group) {\n\
    \      if (char === \"(\") {\n        depth++;\n        max_depth = Math.max(max_depth,\
    \ depth);\n      } else if (char === \")\") {\n        depth--;\n      }\n   \
    \ }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const result: number[] = [];\n    const paren_groups\
    \ = paren_string.split(\" \");\n    for (const paren_group of paren_groups) {\n\
    \        let max_level = 0;\n        let current_level = 0;\n        for (const\
    \ char of paren_group) {\n            if (char === \"(\") {\n                current_level++;\n\
    \                if (current_level > max_level) {\n                    max_level\
    \ = current_level;\n                }\n            } else if (char === \")\")\
    \ {\n                current_level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_nesting: number = 0;\n        let current_nesting: number = 0;\n\
    \        for (let char of paren_group) {\n            if (char === \"(\") {\n\
    \                current_nesting++;\n                if (current_nesting > max_nesting)\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           } else if (char === \")\") {\n                current_nesting--;\n\
    \            }\n        }\n        result.push(max_nesting);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = paren_groups.map(paren_group => {\n    let max_level = 0;\n \
    \   let level = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n     \
    \ if (paren_group[i] === \"(\") {\n        level++;\n        max_level = Math.max(max_level,\
    \ level);\n      } else if (paren_group[i] === \")\") {\n        level--;\n  \
    \    }\n    }\n    return max_level;\n  });\n  return paren_levels;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_depth = 0;\n        let current_depth = 0;\n        for (const\
    \ paren of paren_group) {\n            if (paren === \"(\") {\n              \
    \  current_depth++;\n                max_depth = Math.max(max_depth, current_depth);\n\
    \            } else if (paren === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (paren === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let paren_groups = paren_string.split(\" \");\n  let\
    \ max_nesting = 0;\n  let max_nesting_groups = [];\n  for (let i = 0; i < paren_groups.length;\
    \ i++) {\n    let paren_group = paren_groups[i];\n    let current_nesting = 0;\n\
    \    let max_nesting_in_group = 0;\n    for (let j = 0; j < paren_group.length;\
    \ j++) {\n      if (paren_group[j] === \"(\") {\n        current_nesting++;\n\
    \        if (current_nesting > max_nesting_in_group) {\n          max_nesting_in_group\
    \ = current_nesting;\n        }\n      } else if (paren_group[j] === \")\") {\n\
    \        current_nesting--;\n      }\n    }\n    max_nesting_groups.push(max_nesting_in_group);\n\
    \  }\n  return max_nesting_groups;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_depth = 0;\n        let current_depth = 0;\n        for (const\
    \ char of paren_group) {\n            if (char === \"(\") {\n                current_depth++;\n\
    \                max_depth = Math.max(max_depth, current_depth);\n           \
    \ } else if (char === \")\") {\n                current_depth--;\n           \
    \ }\n        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_nesting = 0;\n        let current_nesting = 0;\n        for\
    \ (const paren of paren_group) {\n            if (paren === \"(\") {\n       \
    \         current_nesting++;\n            } else if (paren === \")\") {\n    \
    \            current_nesting--;\n            }\n            if (current_nesting\
    \ > max_nesting) {\n                max_nesting = current_nesting;\n         \
    \   }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_arr = paren_string.split(\" \");\n    let\
    \ result = [];\n    for (let i = 0; i < paren_arr.length; i++) {\n        let\
    \ paren = paren_arr[i];\n        let max_level = 0;\n        let level = 0;\n\
    \        for (let j = 0; j < paren.length; j++) {\n            if (paren[j] ===\
    \ \"(\") {\n                level++;\n                if (level > max_level) {\n\
    \                    max_level = level;\n                }\n            } else\
    \ if (paren[j] === \")\") {\n                level--;\n            }\n       \
    \ }\n        result.push(max_level);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  return paren_string.split(' ').map(paren_group => {\n\
    \    let max_nesting = 0;\n    let current_nesting = 0;\n    for (let i = 0; i\
    \ < paren_group.length; i++) {\n      if (paren_group[i] === '(') {\n        current_nesting++;\n\
    \        max_nesting = Math.max(max_nesting, current_nesting);\n      } else {\n\
    \        current_nesting--;\n      }\n    }\n    return max_nesting;\n  });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let result: number[] = [];\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group = paren_groups[i];\n        let paren_stack: string[]\
    \ = [];\n        let max_depth = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            let paren = paren_group[j];\n            if (paren === \"\
    (\") {\n                paren_stack.push(paren);\n                max_depth =\
    \ Math.max(max_depth, paren_stack.length);\n            } else if (paren === \"\
    )\") {\n                paren_stack.pop();\n            }\n        }\n       \
    \ result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let result: number[] = [];\n  let paren_groups: string[]\
    \ = paren_string.split(\" \");\n  for (let i = 0; i < paren_groups.length; i++)\
    \ {\n    let paren_group: string = paren_groups[i];\n    let count: number = 0;\n\
    \    let max: number = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n\
    \      if (paren_group[j] === \"(\") {\n        count++;\n        if (count >\
    \ max) {\n          max = count;\n        }\n      } else if (paren_group[j] ===\
    \ \")\") {\n        count--;\n      }\n    }\n    result.push(max);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ count = 0;\n    let max = 0;\n    for (const char of paren_group) {\n      if\
    \ (char === \"(\") {\n        count++;\n      } else if (char === \")\") {\n \
    \       count--;\n      }\n      max = Math.max(max, count);\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (char === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_nesting = 0;\n        let current_nesting = 0;\n        for\
    \ (const paren of paren_group) {\n            if (paren === \"(\") {\n       \
    \         current_nesting++;\n            } else if (paren === \")\") {\n    \
    \            current_nesting--;\n            }\n            if (current_nesting\
    \ > max_nesting) {\n                max_nesting = current_nesting;\n         \
    \   }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (paren === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let stack: string[]\
    \ = [];\n    let max: number = 0;\n    let current: number = 0;\n    for (let\
    \ i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === \"(\"\
    ) {\n            stack.push(paren_string[i]);\n            current++;\n      \
    \      if (current > max) {\n                max = current;\n            }\n \
    \       } else if (paren_string[i] === \")\") {\n            stack.pop();\n  \
    \          current--;\n        } else if (paren_string[i] === \" \") {\n     \
    \       result.push(max);\n            max = 0;\n            current = 0;\n  \
    \      }\n    }\n    result.push(max);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const result: number[] = [];\n    const paren_groups\
    \ = paren_string.split(\" \");\n    for (const paren_group of paren_groups) {\n\
    \        let max_depth = 0;\n        let depth = 0;\n        for (const char of\
    \ paren_group) {\n            if (char === \"(\") {\n                depth++;\n\
    \                max_depth = Math.max(max_depth, depth);\n            } else if\
    \ (char === \")\") {\n                depth--;\n            }\n        }\n   \
    \     result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_level = 0;\n        let level = 0;\n        for (const paren\
    \ of paren_group) {\n            if (paren === \"(\") {\n                level++;\n\
    \                max_level = Math.max(max_level, level);\n            } else if\
    \ (paren === \")\") {\n                level--;\n            }\n        }\n  \
    \      result.push(max_level);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const group of paren_groups) {\n  \
    \      let max_nesting = 0;\n        let current_nesting = 0;\n        for (const\
    \ char of group) {\n            if (char === \"(\") {\n                current_nesting++;\n\
    \                max_nesting = Math.max(max_nesting, current_nesting);\n     \
    \       } else if (char === \")\") {\n                current_nesting--;\n   \
    \         }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ results: number[] = [];\n  for (const group of paren_groups) {\n    let max_nesting\
    \ = 0;\n    let current_nesting = 0;\n    for (const paren of group) {\n     \
    \ if (paren === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    results.push(max_nesting);\n  }\n  return results;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const char of group) {\n      if\
    \ (char === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  return paren_string.split(\" \").map(paren_group => {\n\
    \    let max_depth = 0;\n    let current_depth = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === \"(\") {\n        current_depth++;\n  \
    \      max_depth = Math.max(max_depth, current_depth);\n      } else if (paren_group[i]\
    \ === \")\") {\n        current_depth--;\n      }\n    }\n    return max_depth;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_array = paren_string.split(' ');\n    let\
    \ result = [];\n    for (let i = 0; i < paren_array.length; i++) {\n        let\
    \ paren = paren_array[i];\n        let max_level = 0;\n        let current_level\
    \ = 0;\n        for (let j = 0; j < paren.length; j++) {\n            if (paren[j]\
    \ === '(') {\n                current_level++;\n                if (current_level\
    \ > max_level) {\n                    max_level = current_level;\n           \
    \     }\n            } else if (paren[j] === ')') {\n                current_level--;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const char of group) {\n      if\
    \ (char === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = paren_groups.map(paren_group => {\n    let level = 0;\n    let\
    \ max_level = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      if\
    \ (paren_group[i] === \"(\") {\n        level++;\n      } else if (paren_group[i]\
    \ === \")\") {\n        level--;\n      }\n      if (level > max_level) {\n  \
    \      max_level = level;\n      }\n    }\n    return max_level;\n  });\n  return\
    \ paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let max_nesting_levels = [];\n    for (let paren_group of paren_groups) {\n\
    \        let nesting_level = 0;\n        let max_nesting_level = 0;\n        for\
    \ (let i = 0; i < paren_group.length; i++) {\n            if (paren_group[i] ===\
    \ \"(\") {\n                nesting_level++;\n            } else if (paren_group[i]\
    \ === \")\") {\n                nesting_level--;\n            }\n            if\
    \ (nesting_level > max_nesting_level) {\n                max_nesting_level = nesting_level;\n\
    \            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    result.push(get_max_nested_parens(paren_group));\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpzeg4u949.js:12\n        result.push(get_max_nested_parens(paren_group));\n\
    \               ^\n\nReferenceError: get_max_nested_parens is not defined\n  \
    \  at parse_nested_parens (/tmp/tmpzeg4u949.js:12:16)\n    at test (/tmp/tmpzeg4u949.js:19:22)\n\
    \    at Object.<anonymous> (/tmp/tmpzeg4u949.js:23:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_level = 0;\n    let current_level = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_level++;\n        max_level\
    \ = Math.max(max_level, current_level);\n      } else if (char === \")\") {\n\
    \        current_level--;\n      }\n    }\n    result.push(max_level);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        result.push(parse_nested_parens_helper(paren_groups[i]));\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplb55cob0.js:11\n        result.push(parse_nested_parens_helper(paren_groups[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmplb55cob0.js:11:16)\n    at test (/tmp/tmplb55cob0.js:18:22)\n\
    \    at Object.<anonymous> (/tmp/tmplb55cob0.js:22:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_nesting: number = 0;\n        let current_nesting: number = 0;\n\
    \        for (let i: number = 0; i < paren_group.length; i++) {\n            if\
    \ (paren_group[i] === \"(\") {\n                current_nesting++;\n         \
    \       if (current_nesting > max_nesting) {\n                    max_nesting\
    \ = current_nesting;\n                }\n            } else if (paren_group[i]\
    \ === \")\") {\n                current_nesting--;\n            }\n        }\n\
    \        result.push(max_nesting);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_depth:\
    \ number = 0;\n        let current_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\") {\n\
    \                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (paren_group[j] === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let paren_levels = [];\n    for (let paren_group of paren_groups) {\n      \
    \  let paren_level = 0;\n        let max_paren_level = 0;\n        for (let paren\
    \ of paren_group) {\n            if (paren === \"(\") {\n                paren_level\
    \ += 1;\n            } else if (paren === \")\") {\n                paren_level\
    \ -= 1;\n            }\n            if (paren_level > max_paren_level) {\n   \
    \             max_paren_level = paren_level;\n            }\n        }\n     \
    \   paren_levels.push(max_paren_level);\n    }\n    return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_depth = 0;\n        let current_depth = 0;\n        for (const\
    \ paren of paren_group) {\n            if (paren === \"(\") {\n              \
    \  current_depth++;\n                max_depth = Math.max(max_depth, current_depth);\n\
    \            } else if (paren === \")\") {\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let result: number[] = [];\n  let paren_groups: string[]\
    \ = paren_string.split(\" \");\n  for (let i = 0; i < paren_groups.length; i++)\
    \ {\n    let paren_group: string = paren_groups[i];\n    let max_nesting: number\
    \ = 0;\n    let current_nesting: number = 0;\n    for (let j = 0; j < paren_group.length;\
    \ j++) {\n      let paren: string = paren_group[j];\n      if (paren === \"(\"\
    ) {\n        current_nesting++;\n      } else if (paren === \")\") {\n       \
    \ current_nesting--;\n      }\n      if (current_nesting > max_nesting) {\n  \
    \      max_nesting = current_nesting;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_nesting: number = 0;\n        let current_nesting: number = 0;\n\
    \        for (let paren of paren_group) {\n            if (paren === \"(\") {\n\
    \                current_nesting++;\n            } else if (paren === \")\") {\n\
    \                current_nesting--;\n            }\n            if (current_nesting\
    \ > max_nesting) {\n                max_nesting = current_nesting;\n         \
    \   }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = paren_groups.map(paren_group => {\n    let paren_level = 0;\n\
    \    let max_paren_level = 0;\n    for (let i = 0; i < paren_group.length; i++)\
    \ {\n      if (paren_group[i] === \"(\") {\n        paren_level++;\n      } else\
    \ if (paren_group[i] === \")\") {\n        paren_level--;\n      }\n      max_paren_level\
    \ = Math.max(max_paren_level, paren_level);\n    }\n    return max_paren_level;\n\
    \  });\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const parens = paren_string.split(\" \");\n  const result:\
    \ number[] = [];\n  for (let i = 0; i < parens.length; i++) {\n    let count =\
    \ 0;\n    let max = 0;\n    for (let j = 0; j < parens[i].length; j++) {\n   \
    \   if (parens[i][j] === \"(\") {\n        count++;\n      } else if (parens[i][j]\
    \ === \")\") {\n        count--;\n      }\n      if (count > max) {\n        max\
    \ = count;\n      }\n    }\n    result.push(max);\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  const paren_groups =\
    \ paren_string.split(\" \");\n  for (const paren_group of paren_groups) {\n  \
    \  let max_depth = 0;\n    let current_depth = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (paren === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ nesting);\n      } else if (char === \")\") {\n        nesting--;\n      }\n\
    \    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_depth: number = 0;\n        let depth: number = 0;\n        for\
    \ (let paren of paren_group) {\n            if (paren === \"(\") {\n         \
    \       depth++;\n                if (depth > max_depth) {\n                 \
    \   max_depth = depth;\n                }\n            } else if (paren === \"\
    )\") {\n                depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let paren_groups = paren_string.split(\" \");\n  let\
    \ result: number[] = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n\
    \    let paren_group = paren_groups[i];\n    let max_nesting = 0;\n    let current_nesting\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren_group[j] === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_depth: number = 0;\n        let depth: number = 0;\n        for\
    \ (let i: number = 0; i < paren_group.length; i++) {\n            if (paren_group[i]\
    \ === \"(\") {\n                depth++;\n                if (depth > max_depth)\
    \ {\n                    max_depth = depth;\n                }\n            }\
    \ else if (paren_group[i] === \")\") {\n                depth--;\n           \
    \ }\n        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const group of paren_groups) {\n  \
    \      let max_nesting = 0;\n        let current_nesting = 0;\n        for (const\
    \ char of group) {\n            if (char === \"(\") {\n                current_nesting++;\n\
    \            } else if (char === \")\") {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_nesting:\
    \ number = 0;\n        let current_nesting: number = 0;\n        for (let j =\
    \ 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"(\"\
    ) {\n                current_nesting++;\n                if (current_nesting >\
    \ max_nesting) {\n                    max_nesting = current_nesting;\n       \
    \         }\n            } else if (paren_group[j] === \")\") {\n            \
    \    current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let result: number[] = [];\n  let paren_groups: string[]\
    \ = paren_string.split(\" \");\n  for (let paren_group of paren_groups) {\n  \
    \  let max_depth: number = 0;\n    let current_depth: number = 0;\n    for (let\
    \ i = 0; i < paren_group.length; i++) {\n      if (paren_group[i] === \"(\") {\n\
    \        current_depth++;\n      } else if (paren_group[i] === \")\") {\n    \
    \    current_depth--;\n      }\n      if (current_depth > max_depth) {\n     \
    \   max_depth = current_depth;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (char === \")\")\
    \ {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_depth: number = 0;\n        let current_depth: number = 0;\n\
    \        for (let char of paren_group) {\n            if (char === \"(\") {\n\
    \                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (char === \")\") {\n                current_depth--;\n     \
    \       }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const parens = paren_string.split(' ');\n    return\
    \ parens.map(paren => {\n        let count = 0;\n        let max = 0;\n      \
    \  for (let i = 0; i < paren.length; i++) {\n            if (paren[i] === '(')\
    \ {\n                count++;\n                max = Math.max(max, count);\n \
    \           } else {\n                count--;\n            }\n        }\n   \
    \     return max;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let\
    \ paren_level = 0;\n    let max_paren_level = 0;\n    for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n      if (paren_groups[i][j] === \"(\") {\n        paren_level++;\n\
    \      } else if (paren_groups[i][j] === \")\") {\n        paren_level--;\n  \
    \    }\n      if (paren_level > max_paren_level) {\n        max_paren_level =\
    \ paren_level;\n      }\n    }\n    paren_levels.push(max_paren_level);\n  }\n\
    \  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let max_depth = 0;\n    let depth = 0;\n    let max_depth_array = [];\n    for\
    \ (let i = 0; i < paren_groups.length; i++) {\n        for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n            if (paren_groups[i][j] === \"(\") {\n                depth++;\n\
    \            } else if (paren_groups[i][j] === \")\") {\n                depth--;\n\
    \            }\n            if (depth > max_depth) {\n                max_depth\
    \ = depth;\n            }\n        }\n        max_depth_array.push(max_depth);\n\
    \        max_depth = 0;\n        depth = 0;\n    }\n    return max_depth_array;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(' ');\n    let\
    \ max_nesting_levels = [];\n    for (let paren_group of paren_groups) {\n    \
    \    let max_nesting_level = 0;\n        let current_nesting_level = 0;\n    \
    \    for (let paren of paren_group) {\n            if (paren === '(') {\n    \
    \            current_nesting_level++;\n            } else if (paren === ')') {\n\
    \                current_nesting_level--;\n            }\n            if (current_nesting_level\
    \ > max_nesting_level) {\n                max_nesting_level = current_nesting_level;\n\
    \            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268097
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const paren_levels = paren_groups.map(paren_group => {\n        let max_level\
    \ = 0;\n        let current_level = 0;\n        for (let i = 0; i < paren_group.length;\
    \ i++) {\n            if (paren_group[i] === \"(\") {\n                current_level++;\n\
    \                max_level = Math.max(max_level, current_level);\n           \
    \ } else if (paren_group[i] === \")\") {\n                current_level--;\n \
    \           }\n        }\n        return max_level;\n    });\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const\
    \ paren_group = paren_groups[i];\n    let level = 0;\n    let max_level = 0;\n\
    \    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        level++;\n      } else if (paren_group[j] === \")\") {\n\
    \        level--;\n      }\n      if (level > max_level) {\n        max_level\
    \ = level;\n      }\n    }\n    paren_levels.push(max_level);\n  }\n  return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let paren_stack:\
    \ string[] = [];\n        let max_depth: number = 0;\n        for (let j = 0;\
    \ j < paren_group.length; j++) {\n            let paren: string = paren_group[j];\n\
    \            if (paren === \"(\") {\n                paren_stack.push(paren);\n\
    \                max_depth = Math.max(max_depth, paren_stack.length);\n      \
    \      } else if (paren === \")\") {\n                paren_stack.pop();\n   \
    \         }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const paren_levels = paren_groups.map(group => {\n        let level = 0;\n\
    \        let max_level = 0;\n        for (let i = 0; i < group.length; i++) {\n\
    \            if (group[i] === \"(\") {\n                level++;\n           \
    \ } else if (group[i] === \")\") {\n                level--;\n            }\n\
    \            if (level > max_level) {\n                max_level = level;\n  \
    \          }\n        }\n        return max_level;\n    });\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ max_nesting_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n\
    \    const paren_group = paren_groups[i];\n    let max_nesting_level = 0;\n  \
    \  let current_nesting_level = 0;\n    for (let j = 0; j < paren_group.length;\
    \ j++) {\n      const paren = paren_group[j];\n      if (paren === \"(\") {\n\
    \        current_nesting_level++;\n      } else if (paren === \")\") {\n     \
    \   current_nesting_level--;\n      }\n      if (current_nesting_level > max_nesting_level)\
    \ {\n        max_nesting_level = current_nesting_level;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ max_nesting_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n\
    \    const paren_group = paren_groups[i];\n    let max_nesting_level = 0;\n  \
    \  let current_nesting_level = 0;\n    for (let j = 0; j < paren_group.length;\
    \ j++) {\n      const paren = paren_group[j];\n      if (paren === \"(\") {\n\
    \        current_nesting_level++;\n      } else if (paren === \")\") {\n     \
    \   current_nesting_level--;\n      }\n      if (current_nesting_level > max_nesting_level)\
    \ {\n        max_nesting_level = current_nesting_level;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let max_nested_levels = [];\n    for (let paren_group of paren_groups) {\n \
    \       let max_level = 0;\n        let current_level = 0;\n        for (let i\
    \ = 0; i < paren_group.length; i++) {\n            if (paren_group[i] === \"(\"\
    ) {\n                current_level++;\n            } else if (paren_group[i] ===\
    \ \")\") {\n                current_level--;\n            }\n            if (current_level\
    \ > max_level) {\n                max_level = current_level;\n            }\n\
    \        }\n        max_nested_levels.push(max_level);\n    }\n    return max_nested_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let paren_groups = paren_string.split(\" \");\n  let\
    \ max_nesting_levels = [];\n  for (let paren_group of paren_groups) {\n    let\
    \ max_nesting_level = 0;\n    let current_nesting_level = 0;\n    for (let i =\
    \ 0; i < paren_group.length; i++) {\n      if (paren_group[i] === \"(\") {\n \
    \       current_nesting_level++;\n      } else if (paren_group[i] === \")\") {\n\
    \        current_nesting_level--;\n      }\n      if (current_nesting_level >\
    \ max_nesting_level) {\n        max_nesting_level = current_nesting_level;\n \
    \     }\n    }\n    max_nesting_levels.push(max_nesting_level);\n  }\n  return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_nesting = 0;\n        let current_nesting = 0;\n        for\
    \ (const paren of paren_group) {\n            if (paren === \"(\") {\n       \
    \         current_nesting++;\n            } else if (paren === \")\") {\n    \
    \            current_nesting--;\n            }\n            if (current_nesting\
    \ > max_nesting) {\n                max_nesting = current_nesting;\n         \
    \   }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let depth = 0;\n    for (const paren of paren_group) {\n\
    \      if (paren === \"(\") {\n        depth++;\n      } else if (paren === \"\
    )\") {\n        depth--;\n      }\n      if (depth > max_depth) {\n        max_depth\
    \ = depth;\n      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_level = 0;\n    let level = 0;\n    for (const paren of paren_group) {\n\
    \      if (paren === \"(\") {\n        level++;\n        max_level = Math.max(max_level,\
    \ level);\n      } else if (paren === \")\") {\n        level--;\n      }\n  \
    \  }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (char === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_level = 0;\n        let current_level = 0;\n        for (const\
    \ paren of paren_group) {\n            if (paren === \"(\") {\n              \
    \  current_level++;\n                max_level = Math.max(max_level, current_level);\n\
    \            } else if (paren === \")\") {\n                current_level--;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const char of group) {\n      if\
    \ (char === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_level = 0;\n    let current_level = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_level++;\n        max_level\
    \ = Math.max(max_level, current_level);\n      } else if (char === \")\") {\n\
    \        current_level--;\n      }\n    }\n    result.push(max_level);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let max_nesting\
    \ = 0;\n    let current_nesting = 0;\n    for (const char of group) {\n      if\
    \ (char === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (char === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const result: number[] = [];\n    const paren_groups\
    \ = paren_string.split(\" \");\n    for (const paren_group of paren_groups) {\n\
    \        result.push(parse_nested_parens_helper(paren_group));\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2p5o9k5v.js:12\n        result.push(parse_nested_parens_helper(paren_group));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmp2p5o9k5v.js:12:16)\n    at test (/tmp/tmp2p5o9k5v.js:19:22)\n\
    \    at Object.<anonymous> (/tmp/tmp2p5o9k5v.js:23:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let paren_levels = [];\n    for (let paren_group of paren_groups) {\n      \
    \  let paren_level = 0;\n        let max_paren_level = 0;\n        for (let paren\
    \ of paren_group) {\n            if (paren === \"(\") {\n                paren_level++;\n\
    \            } else if (paren === \")\") {\n                paren_level--;\n \
    \           }\n            if (paren_level > max_paren_level) {\n            \
    \    max_paren_level = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_depth: number = 0;\n        let current_depth: number = 0;\n\
    \        for (let i: number = 0; i < paren_group.length; i++) {\n            if\
    \ (paren_group[i] === \"(\") {\n                current_depth++;\n           \
    \     if (current_depth > max_depth) {\n                    max_depth = current_depth;\n\
    \                }\n            } else if (paren_group[i] === \")\") {\n     \
    \           current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_level = 0;\n    let level = 0;\n    for (const paren of paren_group) {\n\
    \      if (paren === \"(\") {\n        level++;\n        max_level = Math.max(max_level,\
    \ level);\n      } else if (paren === \")\") {\n        level--;\n      }\n  \
    \  }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const\
    \ paren_group = paren_groups[i];\n    let paren_level = 0;\n    let max_paren_level\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        paren_level++;\n      } else if (paren_group[j] === \"\
    )\") {\n        paren_level--;\n      }\n      if (paren_level > max_paren_level)\
    \ {\n        max_paren_level = paren_level;\n      }\n    }\n    paren_levels.push(max_paren_level);\n\
    \  }\n  return paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_array = paren_string.split(\" \");\n    let\
    \ result: number[] = [];\n    for (let i = 0; i < paren_array.length; i++) {\n\
    \        let paren_group = paren_array[i];\n        let max_depth = 0;\n     \
    \   let current_depth = 0;\n        for (let j = 0; j < paren_group.length; j++)\
    \ {\n            let paren = paren_group[j];\n            if (paren === \"(\"\
    ) {\n                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (paren === \")\") {\n                current_depth--;\n    \
    \        }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  // TODO: Implement this function\n  return [];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmphnbugjr1.js:14:12)\n    at Object.<anonymous> (/tmp/tmphnbugjr1.js:18:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group: string = paren_groups[i];\n        let max_level:\
    \ number = 0;\n        let level: number = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                level++;\n\
    \                if (level > max_level) {\n                    max_level = level;\n\
    \                }\n            } else if (paren_group[j] === \")\") {\n     \
    \           level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  const paren_groups =\
    \ paren_string.split(\" \");\n  for (const group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const paren of group) {\n      if\
    \ (paren === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (paren === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_level: number = 0;\n        let level: number = 0;\n        for\
    \ (let i = 0; i < paren_group.length; i++) {\n            if (paren_group[i] ===\
    \ \"(\") {\n                level++;\n            } else if (paren_group[i] ===\
    \ \")\") {\n                level--;\n            }\n            if (level > max_level)\
    \ {\n                max_level = level;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ max_nesting_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n\
    \    const paren_group = paren_groups[i];\n    let max_nesting_level = 0;\n  \
    \  let current_nesting_level = 0;\n    for (let j = 0; j < paren_group.length;\
    \ j++) {\n      const paren = paren_group[j];\n      if (paren === \"(\") {\n\
    \        current_nesting_level++;\n      } else if (paren === \")\") {\n     \
    \   current_nesting_level--;\n      }\n      if (current_nesting_level > max_nesting_level)\
    \ {\n        max_nesting_level = current_nesting_level;\n      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n\
    \  }\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268099
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (paren === \")\"\
    ) {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        let max_nesting = 0;\n        let current_nesting = 0;\n        for\
    \ (const paren of paren_group) {\n            if (paren === \"(\") {\n       \
    \         current_nesting++;\n            } else if (paren === \")\") {\n    \
    \            current_nesting--;\n            }\n            if (current_nesting\
    \ > max_nesting) {\n                max_nesting = current_nesting;\n         \
    \   }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    paren_groups.forEach(group => {\n        let\
    \ max_level: number = 0;\n        let current_level: number = 0;\n        for\
    \ (let i = 0; i < group.length; i++) {\n            if (group[i] === \"(\") {\n\
    \                current_level++;\n                if (current_level > max_level)\
    \ {\n                    max_level = current_level;\n                }\n     \
    \       } else if (group[i] === \")\") {\n                current_level--;\n \
    \           }\n        }\n        result.push(max_level);\n    });\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let result: number[] = [];\n    for (let paren_group of paren_groups) {\n  \
    \      let stack: string[] = [];\n        let max_depth = 0;\n        for (let\
    \ char of paren_group) {\n            if (char === \"(\") {\n                stack.push(char);\n\
    \                max_depth = Math.max(max_depth, stack.length);\n            }\
    \ else if (char === \")\") {\n                stack.pop();\n            }\n  \
    \      }\n        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const result: number[] = [];\n    const paren_groups\
    \ = paren_string.split(\" \");\n    for (const group of paren_groups) {\n    \
    \    let count = 0;\n        let max = 0;\n        for (const char of group) {\n\
    \            if (char === \"(\") {\n                count++;\n            } else\
    \ if (char === \")\") {\n                count--;\n            }\n           \
    \ if (count > max) {\n                max = count;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (paren === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (char === \")\")\
    \ {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  const paren_groups =\
    \ paren_string.split(\" \");\n  for (const paren_group of paren_groups) {\n  \
    \  let max_nesting = 0;\n    let current_nesting = 0;\n    for (const paren of\
    \ paren_group) {\n      if (paren === \"(\") {\n        current_nesting++;\n \
    \       max_nesting = Math.max(max_nesting, current_nesting);\n      } else if\
    \ (paren === \")\") {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268100
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (paren === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const result: number[] = [];\n    const paren_groups\
    \ = paren_string.split(\" \");\n    for (const group of paren_groups) {\n    \
    \    let max_nesting = 0;\n        let current_nesting = 0;\n        for (const\
    \ char of group) {\n            if (char === \"(\") {\n                current_nesting++;\n\
    \            } else if (char === \")\") {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  return paren_string.split(\" \").map(paren_group => {\n\
    \    let max_depth = 0;\n    let current_depth = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === \"(\") {\n        current_depth++;\n  \
    \      max_depth = Math.max(max_depth, current_depth);\n      } else if (paren_group[i]\
    \ === \")\") {\n        current_depth--;\n      }\n    }\n    return max_depth;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ paren_levels = paren_groups.map(group => {\n    let level = 0;\n    let max_level\
    \ = 0;\n    for (let i = 0; i < group.length; i++) {\n      if (group[i] === \"\
    (\") {\n        level++;\n      } else if (group[i] === \")\") {\n        level--;\n\
    \      }\n      if (level > max_level) {\n        max_level = level;\n      }\n\
    \    }\n    return max_level;\n  });\n  return paren_levels;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const result: number[] = [];\n    const paren_groups\
    \ = paren_string.split(\" \");\n    for (const paren_group of paren_groups) {\n\
    \        const stack: string[] = [];\n        let max_depth = 0;\n        for\
    \ (const char of paren_group) {\n            if (char === \"(\") {\n         \
    \       stack.push(char);\n                max_depth = Math.max(max_depth, stack.length);\n\
    \            } else if (char === \")\") {\n                stack.pop();\n    \
    \        }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  const paren_groups =\
    \ paren_string.split(\" \");\n  for (const paren_group of paren_groups) {\n  \
    \  let max_level = 0;\n    let level = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        level++;\n        max_level = Math.max(max_level,\
    \ level);\n      } else if (char === \")\") {\n        level--;\n      }\n   \
    \ }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (char === \")\")\
    \ {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let parens = paren_string.split(\" \");\n  let result:\
    \ number[] = [];\n  for (let i = 0; i < parens.length; i++) {\n    let paren =\
    \ parens[i];\n    let count = 0;\n    let max = 0;\n    for (let j = 0; j < paren.length;\
    \ j++) {\n      if (paren[j] === \"(\") {\n        count++;\n      } else if (paren[j]\
    \ === \")\") {\n        count--;\n      }\n      if (count > max) {\n        max\
    \ = count;\n      }\n    }\n    result.push(max);\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const parens = paren_string.split(\" \");\n    const\
    \ result: number[] = [];\n    for (const paren of parens) {\n        const stack:\
    \ string[] = [];\n        let max_depth = 0;\n        let current_depth = 0;\n\
    \        for (const char of paren) {\n            if (char === \"(\") {\n    \
    \            stack.push(char);\n                current_depth += 1;\n        \
    \        max_depth = Math.max(max_depth, current_depth);\n            } else if\
    \ (char === \")\") {\n                stack.pop();\n                current_depth\
    \ -= 1;\n            }\n        }\n        result.push(max_depth);\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_depth: number = 0;\n        let current_depth: number = 0;\n\
    \        for (let char of paren_group) {\n            if (char === \"(\") {\n\
    \                current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (char === \")\") {\n                current_depth--;\n     \
    \       }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  return\
    \ paren_groups.map(group => {\n    let max_depth = 0;\n    let depth = 0;\n  \
    \  for (let i = 0; i < group.length; i++) {\n      if (group[i] === \"(\") {\n\
    \        depth++;\n        max_depth = Math.max(max_depth, depth);\n      } else\
    \ if (group[i] === \")\") {\n        depth--;\n      }\n    }\n    return max_depth;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268103
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  return\
    \ paren_groups.map(paren_group => {\n    let max_nesting = 0;\n    let current_nesting\
    \ = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n      if (paren_group[i]\
    \ === \"(\") {\n        current_nesting++;\n        max_nesting = Math.max(max_nesting,\
    \ current_nesting);\n      } else if (paren_group[i] === \")\") {\n        current_nesting--;\n\
    \      }\n    }\n    return max_nesting;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (char === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  const paren_groups =\
    \ paren_string.split(\" \");\n  for (const paren_group of paren_groups) {\n  \
    \  let max_depth = 0;\n    let depth = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        depth++;\n        max_depth = Math.max(max_depth,\
    \ depth);\n      } else if (char === \")\") {\n        depth--;\n      }\n   \
    \ }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let result: number[] = [];\n    for (let paren_group of paren_groups) {\n  \
    \      let max_depth = 0;\n        let current_depth = 0;\n        for (let i\
    \ = 0; i < paren_group.length; i++) {\n            if (paren_group[i] === \"(\"\
    ) {\n                current_depth++;\n            } else if (paren_group[i] ===\
    \ \")\") {\n                current_depth--;\n            }\n            if (current_depth\
    \ > max_depth) {\n                max_depth = current_depth;\n            }\n\
    \        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (char === \")\")\
    \ {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const char of group) {\n      if\
    \ (char === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let result: number[] = [];\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        result.push(get_max_nesting(paren_groups[i]));\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp95rpl7tc.js:11\n        result.push(get_max_nesting(paren_groups[i]));\n\
    \               ^\n\nReferenceError: get_max_nesting is not defined\n    at parse_nested_parens\
    \ (/tmp/tmp95rpl7tc.js:11:16)\n    at test (/tmp/tmp95rpl7tc.js:18:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp95rpl7tc.js:22:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let result: number[] = [];\n    let paren_groups: string[]\
    \ = paren_string.split(\" \");\n    for (let paren_group of paren_groups) {\n\
    \        let max_level: number = 0;\n        let current_level: number = 0;\n\
    \        for (let char of paren_group) {\n            if (char === \"(\") {\n\
    \                current_level++;\n                if (current_level > max_level)\
    \ {\n                    max_level = current_level;\n                }\n     \
    \       } else if (char === \")\") {\n                current_level--;\n     \
    \       }\n        }\n        result.push(max_level);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let parens_arr = paren_string.split(\" \");\n    let\
    \ result = [];\n    for (let i = 0; i < parens_arr.length; i++) {\n        let\
    \ parens = parens_arr[i];\n        let max_level = 0;\n        let level = 0;\n\
    \        for (let j = 0; j < parens.length; j++) {\n            if (parens[j]\
    \ === \"(\") {\n                level++;\n                max_level = Math.max(max_level,\
    \ level);\n            } else {\n                level--;\n            }\n   \
    \     }\n        result.push(max_level);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let result: number[] = [];\n  let paren_array: string[]\
    \ = paren_string.split(\" \");\n  for (let i = 0; i < paren_array.length; i++)\
    \ {\n    let paren_group: string = paren_array[i];\n    let paren_stack: string[]\
    \ = [];\n    let max_depth: number = 0;\n    for (let j = 0; j < paren_group.length;\
    \ j++) {\n      let paren: string = paren_group[j];\n      if (paren === \"(\"\
    ) {\n        paren_stack.push(paren);\n        max_depth = Math.max(max_depth,\
    \ paren_stack.length);\n      } else if (paren === \")\") {\n        paren_stack.pop();\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const paren_levels = [];\n    for (const paren_group of paren_groups) {\n\
    \        let paren_level = 0;\n        let max_paren_level = 0;\n        for (const\
    \ paren of paren_group) {\n            if (paren === \"(\") {\n              \
    \  paren_level++;\n            } else if (paren === \")\") {\n               \
    \ paren_level--;\n            }\n            if (paren_level > max_paren_level)\
    \ {\n                max_paren_level = paren_level;\n            }\n        }\n\
    \        paren_levels.push(max_paren_level);\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268102
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const parens = paren_string.split(\" \");\n  const result:\
    \ number[] = [];\n  for (let paren of parens) {\n    let max = 0;\n    let current\
    \ = 0;\n    for (let i = 0; i < paren.length; i++) {\n      if (paren[i] === \"\
    (\") {\n        current++;\n        max = Math.max(max, current);\n      } else\
    \ {\n        current--;\n      }\n    }\n    result.push(max);\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268103
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let paren_groups = paren_string.split(\" \");\n  let\
    \ result = [];\n  for (let paren_group of paren_groups) {\n    let max_level =\
    \ 0;\n    let level = 0;\n    for (let i = 0; i < paren_group.length; i++) {\n\
    \      if (paren_group[i] === \"(\") {\n        level++;\n      } else if (paren_group[i]\
    \ === \")\") {\n        level--;\n      }\n      max_level = Math.max(max_level,\
    \ level);\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268103
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(\" \");\n   \
    \ let paren_levels = [];\n    for (let group of paren_groups) {\n        let level\
    \ = 0;\n        let max_level = 0;\n        for (let char of group) {\n      \
    \      if (char === \"(\") {\n                level++;\n            } else if\
    \ (char === \")\") {\n                level--;\n            }\n            if\
    \ (level > max_level) {\n                max_level = level;\n            }\n \
    \       }\n        paren_levels.push(max_level);\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268103
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let result: number[] = [];\n  let paren_groups: string[]\
    \ = paren_string.split(\" \");\n  for (let paren_group of paren_groups) {\n  \
    \  let max_nesting: number = 0;\n    let current_nesting: number = 0;\n    for\
    \ (let char of paren_group) {\n      if (char === \"(\") {\n        current_nesting++;\n\
    \        if (current_nesting > max_nesting) {\n          max_nesting = current_nesting;\n\
    \        }\n      } else if (char === \")\") {\n        current_nesting--;\n \
    \     }\n    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268103
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    let max_depth\
    \ = 0;\n    let current_depth = 0;\n    for (const char of group) {\n      if\
    \ (char === \"(\") {\n        current_depth++;\n        max_depth = Math.max(max_depth,\
    \ current_depth);\n      } else if (char === \")\") {\n        current_depth--;\n\
    \      }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_depth = 0;\n    let current_depth = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_depth++;\n        max_depth\
    \ = Math.max(max_depth, current_depth);\n      } else if (paren === \")\") {\n\
    \        current_depth--;\n      }\n    }\n    result.push(max_depth);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ max_nesting_levels = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n\
    \    let max_nesting_level = 0;\n    let current_nesting_level = 0;\n    for (let\
    \ j = 0; j < paren_groups[i].length; j++) {\n      if (paren_groups[i][j] ===\
    \ \"(\") {\n        current_nesting_level++;\n      } else if (paren_groups[i][j]\
    \ === \")\") {\n        current_nesting_level--;\n      }\n      if (current_nesting_level\
    \ > max_nesting_level) {\n        max_nesting_level = current_nesting_level;\n\
    \      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n  }\n  return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268103
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const paren of paren_group)\
    \ {\n      if (paren === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (paren === \")\"\
    ) {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268090
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const group of paren_groups) {\n    const stack:\
    \ string[] = [];\n    let max_depth = 0;\n    for (const char of group) {\n  \
    \    if (char === \"(\") {\n        stack.push(char);\n        max_depth = Math.max(max_depth,\
    \ stack.length);\n      } else if (char === \")\") {\n        stack.pop();\n \
    \     }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268103
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (char === \")\")\
    \ {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ max_nesting = 0;\n    let current_nesting = 0;\n    for (const char of paren_group)\
    \ {\n      if (char === \"(\") {\n        current_nesting++;\n        max_nesting\
    \ = Math.max(max_nesting, current_nesting);\n      } else if (char === \")\")\
    \ {\n        current_nesting--;\n      }\n    }\n    result.push(max_nesting);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268087
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  const paren_groups =\
    \ paren_string.split(\" \");\n  for (const group of paren_groups) {\n    let max_level\
    \ = 0;\n    let current_level = 0;\n    for (const char of group) {\n      if\
    \ (char === \"(\") {\n        current_level++;\n        max_level = Math.max(max_level,\
    \ current_level);\n      } else if (char === \")\") {\n        current_level--;\n\
    \      }\n    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268103
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let paren_groups = paren_string.split(\" \");\n  let\
    \ result: number[] = [];\n  for (let paren_group of paren_groups) {\n    let max_nesting\
    \ = 0;\n    let current_nesting = 0;\n    for (let char of paren_group) {\n  \
    \    if (char === \"(\") {\n        current_nesting++;\n        if (current_nesting\
    \ > max_nesting) {\n          max_nesting = current_nesting;\n        }\n    \
    \  } else if (char === \")\") {\n        current_nesting--;\n      }\n    }\n\
    \    result.push(max_nesting);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268103
- exit_code: 1
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    const paren_groups = paren_string.split(\" \");\n \
    \   const result: number[] = [];\n    for (const paren_group of paren_groups)\
    \ {\n        result.push(parse_nested_parens_helper(paren_group));\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp164je33r.js:12\n        result.push(parse_nested_parens_helper(paren_group));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmp164je33r.js:12:16)\n    at test (/tmp/tmp164je33r.js:19:22)\n\
    \    at Object.<anonymous> (/tmp/tmp164je33r.js:23:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268103
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ result: number[] = [];\n  for (const paren_group of paren_groups) {\n    let\
    \ level = 0;\n    let max_level = 0;\n    for (const paren of paren_group) {\n\
    \      if (paren === \"(\") {\n        level++;\n      } else if (paren === \"\
    )\") {\n        level--;\n      }\n      max_level = Math.max(max_level, level);\n\
    \    }\n    result.push(max_level);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268103
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const result: number[] = [];\n  const paren_groups =\
    \ paren_string.split(\" \");\n  for (const paren_group of paren_groups) {\n  \
    \  let max_nesting_level = 0;\n    let current_nesting_level = 0;\n    for (const\
    \ paren of paren_group) {\n      if (paren === \"(\") {\n        current_nesting_level++;\n\
    \      } else if (paren === \")\") {\n        current_nesting_level--;\n     \
    \ }\n      max_nesting_level = Math.max(max_nesting_level, current_nesting_level);\n\
    \    }\n    result.push(max_nesting_level);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268104
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  const paren_groups = paren_string.split(\" \");\n  const\
    \ max_nesting_levels = paren_groups.map(paren_group => {\n    let max_nesting_level\
    \ = 0;\n    let current_nesting_level = 0;\n    for (let i = 0; i < paren_group.length;\
    \ i++) {\n      if (paren_group[i] === \"(\") {\n        current_nesting_level++;\n\
    \        if (current_nesting_level > max_nesting_level) {\n          max_nesting_level\
    \ = current_nesting_level;\n        }\n      } else if (paren_group[i] === \"\
    )\") {\n        current_nesting_level--;\n      }\n    }\n    return max_nesting_level;\n\
    \  });\n  return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268104
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n  let paren_groups = paren_string.split(\" \");\n  let\
    \ max_nesting = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    let\
    \ paren_group = paren_groups[i];\n    let max_nesting_level = 0;\n    let current_nesting_level\
    \ = 0;\n    for (let j = 0; j < paren_group.length; j++) {\n      if (paren_group[j]\
    \ === \"(\") {\n        current_nesting_level++;\n      } else if (paren_group[j]\
    \ === \")\") {\n        current_nesting_level--;\n      }\n      if (current_nesting_level\
    \ > max_nesting_level) {\n        max_nesting_level = current_nesting_level;\n\
    \      }\n    }\n    max_nesting.push(max_nesting_level);\n  }\n  return max_nesting;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268104
- exit_code: 0
  program: "// @ts-nocheck\n\n//Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n// For each of the group,\
    \ output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"\
    (()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string:\
    \ string): number[] {\n    let paren_groups = paren_string.split(' ');\n    let\
    \ result: number[] = [];\n    for (let paren_group of paren_groups) {\n      \
    \  let max_depth = 0;\n        let current_depth = 0;\n        for (let char of\
    \ paren_group) {\n            if (char === '(') {\n                current_depth\
    \ += 1;\n                max_depth = Math.max(max_depth, current_depth);\n   \
    \         } else if (char === ')') {\n                current_depth -= 1;\n  \
    \          }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268104
