language: ts
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_ijmas6g.js:47:12)\n    at Object.<anonymous> (/tmp/tmp_ijmas6g.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp12l4dan0.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12l4dan0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp12l4dan0.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12l4dan0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let count: number = 0;\n    let max: number = 0;\n    let maxLetters:\
    \ string[] = [];\n    let letters: string[] = test.split(\" \");\n    for (let\
    \ i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n\
    \            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    for (let key in result) {\n        count = result[key];\n\
    \        if (count > max) {\n            max = count;\n            maxLetters\
    \ = [];\n            maxLetters.push(key);\n        } else if (count === max)\
    \ {\n            maxLetters.push(key);\n        }\n    }\n    for (let i: number\
    \ = 0; i < maxLetters.length; i++) {\n        result[maxLetters[i]] = max;\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp_k68rwi8.js:50:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_k68rwi8.js:58:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let testArray: string[] = test.split(\" \");\n    for (let i = 0;\
    \ i < testArray.length; i++) {\n        if (result[testArray[i]]) {\n        \
    \    result[testArray[i]] += 1;\n        } else {\n            result[testArray[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp_7iiu2nf.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_7iiu2nf.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const result: {[key: string]: number}\
    \ = {};\n  const letters = test.split(\" \");\n  for (const letter of letters)\
    \ {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter]\
    \ = 1;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpdsxqjxgx.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdsxqjxgx.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr: string[] = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmptp8cnhzj.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptp8cnhzj.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  let result: {[key: string]: number} =\
    \ {};\n  let arr = test.split(\" \");\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (result[arr[i]]) {\n      result[arr[i]]++;\n    } else {\n      result[arr[i]]\
    \ = 1;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp_mb4xjgt.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_mb4xjgt.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp0ijc1wl7.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0ijc1wl7.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    test.split(\" \").forEach(function(letter) {\n        if (result[letter]\
    \ === undefined) {\n            result[letter] = 1;\n        } else {\n      \
    \      result[letter]++;\n        }\n    });\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpti9iv9gq.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpti9iv9gq.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const letters = test.split(' ');\n    for (const letter of letters)\
    \ {\n        if (result[letter]) {\n            result[letter]++;\n        } else\
    \ {\n            result[letter] = 1;\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp50y0pykn.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp50y0pykn.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    for (let letter of letters)\
    \ {\n        if (result[letter]) {\n            result[letter]++;\n        } else\
    \ {\n            result[letter] = 1;\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpzrl37qp4.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzrl37qp4.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let histogram: {[key: string]: number}\
    \ = {};\n    let max: number = 0;\n    let maxLetters: string[] = [];\n    let\
    \ letters: string[] = test.split(\" \");\n    for (let i: number = 0; i < letters.length;\
    \ i++) {\n        if (histogram[letters[i]]) {\n            histogram[letters[i]]++;\n\
    \        } else {\n            histogram[letters[i]] = 1;\n        }\n       \
    \ if (histogram[letters[i]] > max) {\n            max = histogram[letters[i]];\n\
    \            maxLetters = [letters[i]];\n        } else if (histogram[letters[i]]\
    \ === max) {\n            maxLetters.push(letters[i]);\n        }\n    }\n   \
    \ let result: {[key: string]: number} = {};\n    for (let i: number = 0; i < maxLetters.length;\
    \ i++) {\n        result[maxLetters[i]] = max;\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpoolt5ymq.js:51:12)\n    at Object.<anonymous> (/tmp/tmpoolt5ymq.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const letters = test.split(\" \");\n    for (const letter of letters)\
    \ {\n        if (result[letter]) {\n            result[letter]++;\n        } else\
    \ {\n            result[letter] = 1;\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmphyojbcdv.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphyojbcdv.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr: string[] = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]] === undefined) {\n            result[arr[i]]\
    \ = 1;\n        } else {\n            result[arr[i]]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp84hlks6m.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp84hlks6m.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr: string[] = test.split(\" \");\n    let max: number = 0;\n\
    \    for (let i: number = 0; i < arr.length; i++) {\n        if (result[arr[i]]\
    \ === undefined) {\n            result[arr[i]] = 1;\n        } else {\n      \
    \      result[arr[i]]++;\n        }\n        if (result[arr[i]] > max) {\n   \
    \         max = result[arr[i]];\n        }\n    }\n    for (let key in result)\
    \ {\n        if (result[key] < max) {\n            delete result[key];\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpiruw7k65.js:47:12)\n    at Object.<anonymous> (/tmp/tmpiruw7k65.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    let max = 0;\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n        if (result[arr[i]]\
    \ > max) {\n            max = result[arr[i]];\n        }\n    }\n    let final:\
    \ {[key: string]: number} = {};\n    for (let key in result) {\n        if (result[key]\
    \ === max) {\n            final[key] = result[key];\n        }\n    }\n    return\
    \ final;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmph8bp2uc9.js:48:12)\n    at Object.<anonymous> (/tmp/tmph8bp2uc9.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let word of words) {\n \
    \       if (result[word] === undefined) {\n            result[word] = 1;\n   \
    \     } else {\n            result[word]++;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpv8aij6jv.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv8aij6jv.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpe4xv4bdd.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4xv4bdd.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_ijmas6g.js:47:12)\n    at Object.<anonymous> (/tmp/tmp_ijmas6g.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  let result: {[key: string]: number} =\
    \ {};\n  let letters: string[] = test.split(\" \");\n  let max: number = 0;\n\
    \  for (let i: number = 0; i < letters.length; i++) {\n    if (result[letters[i]])\
    \ {\n      result[letters[i]]++;\n    } else {\n      result[letters[i]] = 1;\n\
    \    }\n    if (result[letters[i]] > max) {\n      max = result[letters[i]];\n\
    \    }\n  }\n  for (let key in result) {\n    if (result[key] < max) {\n     \
    \ delete result[key];\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpagnk7ua5.js:47:12)\n    at Object.<anonymous> (/tmp/tmpagnk7ua5.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5m2qjv37.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5m2qjv37.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]] === undefined) {\n            result[letters[i]]\
    \ = 1;\n        } else {\n            result[letters[i]]++;\n        }\n     \
    \   if (result[letters[i]] > max) {\n            max = result[letters[i]];\n \
    \           maxLetters = [letters[i]];\n        } else if (result[letters[i]]\
    \ === max) {\n            maxLetters.push(letters[i]);\n        }\n    }\n   \
    \ for (let key in result) {\n        if (maxLetters.indexOf(key) === -1) {\n \
    \           delete result[key];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpnrna_21q.js:52:12)\n    at Object.<anonymous> (/tmp/tmpnrna_21q.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]]\
    \ === undefined) {\n            result[letters[i]] = 1;\n        } else {\n  \
    \          result[letters[i]]++;\n        }\n        if (result[letters[i]] >\
    \ max) {\n            max = result[letters[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp0araocei.js:47:12)\n    at Object.<anonymous> (/tmp/tmp0araocei.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const letters = test.split(' ');\n    for (const letter of letters)\
    \ {\n        if (result[letter]) {\n            result[letter] += 1;\n       \
    \ } else {\n            result[letter] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpitmkpe_1.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpitmkpe_1.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]\
    \ === undefined) {\n            result[letters[i]] = 1;\n        } else {\n  \
    \          result[letters[i]]++;\n        }\n        if (result[letters[i]] >\
    \ max) {\n            max = result[letters[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp6_782868.js:47:12)\n    at Object.<anonymous> (/tmp/tmp6_782868.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp12l4dan0.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12l4dan0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const words = test.split(\" \");\n    for (const word of words) {\n\
    \        if (result[word]) {\n            result[word]++;\n        } else {\n\
    \            result[word] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppg4cn0po.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppg4cn0po.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const letters = test.split(\" \");\n    for (const letter of letters)\
    \ {\n        if (result[letter]) {\n            result[letter]++;\n        } else\
    \ {\n            result[letter] = 1;\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmphyojbcdv.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphyojbcdv.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result = {};\n    let arr = test.split(\"\
    \ \");\n    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]])\
    \ {\n            result[arr[i]]++;\n        } else {\n            result[arr[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp_tipfnk5.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_tipfnk5.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5m2qjv37.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5m2qjv37.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpe4xv4bdd.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4xv4bdd.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  const result: {[key: string]: number}\
    \ = {};\n  const words = test.split(' ');\n  for (const word of words) {\n   \
    \ if (result[word]) {\n      result[word] += 1;\n    } else {\n      result[word]\
    \ = 1;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpxutxy_gt.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxutxy_gt.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let hist: {[key: string]: number} =\
    \ {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    let words:\
    \ string[] = test.split(\" \");\n    for (let i: number = 0; i < words.length;\
    \ i++) {\n        if (hist[words[i]]) {\n            hist[words[i]]++;\n     \
    \   } else {\n            hist[words[i]] = 1;\n        }\n        if (hist[words[i]]\
    \ > max) {\n            max = hist[words[i]];\n            maxKeys = [words[i]];\n\
    \        } else if (hist[words[i]] === max) {\n            maxKeys.push(words[i]);\n\
    \        }\n    }\n    for (let key in hist) {\n        if (maxKeys.indexOf(key)\
    \ === -1) {\n            delete hist[key];\n        }\n    }\n    return hist;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp8f84rm57.js:52:12)\n    at Object.<anonymous> (/tmp/tmp8f84rm57.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpe4xv4bdd.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4xv4bdd.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let split = test.split(\" \");\n    for (let i = 0; i < split.length;\
    \ i++) {\n        if (result[split[i]]) {\n            result[split[i]]++;\n \
    \       } else {\n            result[split[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppz1cysh1.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppz1cysh1.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    test.split(' ').forEach(function(letter) {\n        if (result[letter])\
    \ {\n            result[letter]++;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpul662h8g.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpul662h8g.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    test.split(' ').forEach(letter => {\n        if (result[letter])\
    \ {\n            result[letter]++;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpn9cf214w.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn9cf214w.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5m2qjv37.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5m2qjv37.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]] += 1;\n  \
    \      } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpi5wkzixu.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi5wkzixu.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_ijmas6g.js:47:12)\n    at Object.<anonymous> (/tmp/tmp_ijmas6g.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]\
    \ === undefined) {\n            result[letters[i]] = 1;\n        } else {\n  \
    \          result[letters[i]]++;\n        }\n        if (result[letters[i]] >\
    \ max) {\n            max = result[letters[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpq32194ia.js:47:12)\n    at Object.<anonymous> (/tmp/tmpq32194ia.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (letters[i] in result) {\n            result[letters[i]]\
    \ += 1;\n        } else {\n            result[letters[i]] = 1;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp9cywimzw.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9cywimzw.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(' ');\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmps700zog8.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps700zog8.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_ijmas6g.js:47:12)\n    at Object.<anonymous> (/tmp/tmp_ijmas6g.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5m2qjv37.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5m2qjv37.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpe4xv4bdd.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4xv4bdd.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i] in result) {\n            result[words[i]] += 1;\n\
    \        } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5dq4m22y.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5dq4m22y.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  let result: {[key: string]: number} =\
    \ {};\n  let letters: string[] = test.split(\" \");\n  for (let i = 0; i < letters.length;\
    \ i++) {\n    if (result[letters[i]]) {\n      result[letters[i]] += 1;\n    }\
    \ else {\n      result[letters[i]] = 1;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpuvgv1sua.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuvgv1sua.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr: string[] = test.split(\" \");\n    let max: number = 0;\n\
    \    for (let i: number = 0; i < arr.length; i++) {\n        if (result[arr[i]]\
    \ === undefined) {\n            result[arr[i]] = 1;\n        } else {\n      \
    \      result[arr[i]]++;\n        }\n        if (result[arr[i]] > max) {\n   \
    \         max = result[arr[i]];\n        }\n    }\n    for (let key in result)\
    \ {\n        if (result[key] < max) {\n            delete result[key];\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpiruw7k65.js:47:12)\n    at Object.<anonymous> (/tmp/tmpiruw7k65.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]\
    \ += 1;\n        } else {\n            result[letters[i]] = 1;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpwxqenc3r.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwxqenc3r.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let hist: {[key: string]: number} =\
    \ {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    let words:\
    \ string[] = test.split(\" \");\n    for (let i = 0; i < words.length; i++) {\n\
    \        if (hist[words[i]]) {\n            hist[words[i]] += 1;\n        } else\
    \ {\n            hist[words[i]] = 1;\n        }\n        if (hist[words[i]] >\
    \ max) {\n            max = hist[words[i]];\n            maxKeys = [words[i]];\n\
    \        } else if (hist[words[i]] === max) {\n            maxKeys.push(words[i]);\n\
    \        }\n    }\n    let result: {[key: string]: number} = {};\n    for (let\
    \ i = 0; i < maxKeys.length; i++) {\n        result[maxKeys[i]] = max;\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpogtquqnh.js:51:12)\n    at Object.<anonymous> (/tmp/tmpogtquqnh.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpr9d76c5n.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr9d76c5n.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    let maxCount = 0;\n    for (let\
    \ i = 0; i < words.length; i++) {\n        if (result[words[i]]) {\n         \
    \   result[words[i]]++;\n        } else {\n            result[words[i]] = 1;\n\
    \        }\n        if (result[words[i]] > maxCount) {\n            maxCount =\
    \ result[words[i]];\n        }\n    }\n    let maxWords: string[] = [];\n    for\
    \ (let key in result) {\n        if (result[key] === maxCount) {\n           \
    \ maxWords.push(key);\n        }\n    }\n    let finalResult: {[key: string]:\
    \ number} = {};\n    for (let i = 0; i < maxWords.length; i++) {\n        finalResult[maxWords[i]]\
    \ = maxCount;\n    }\n    return finalResult;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp1ne3ppmx.js:52:12)\n    at Object.<anonymous> (/tmp/tmp1ne3ppmx.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    test.split(' ').forEach(letter => {\n        if (result[letter])\
    \ {\n            result[letter]++;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpd13_1vs4.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd13_1vs4.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  let result: {[key: string]: number} =\
    \ {};\n  let words = test.split(\" \");\n  for (let i = 0; i < words.length; i++)\
    \ {\n    if (result[words[i]]) {\n      result[words[i]] += 1;\n    } else {\n\
    \      result[words[i]] = 1;\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpw0mlxsyz.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw0mlxsyz.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5m2qjv37.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5m2qjv37.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr: string[] = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmptp8cnhzj.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptp8cnhzj.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"\
    a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"\
    b b b b a\"));\nconsole.log(histogram(\"\"));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpfbaxy1pi.js:52:12)\n    at Object.<anonymous> (/tmp/tmpfbaxy1pi.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: '{ a: 1, b: 1, c: 1 }

    { a: 2, b: 2 }

    { a: 2, b: 2 }

    { b: 4 }

    { '''': 1 }

    '
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(' ');\n    let max: number = 0;\n\
    \    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]\
    \ === undefined) {\n            result[letters[i]] = 1;\n        } else {\n  \
    \          result[letters[i]]++;\n        }\n        if (result[letters[i]] >\
    \ max) {\n            max = result[letters[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] !== max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpfltgv4kc.js:47:12)\n    at Object.<anonymous> (/tmp/tmpfltgv4kc.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(' ');\n    for (let letter of\
    \ letters) {\n        if (result[letter]) {\n            result[letter]++;\n \
    \       } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp11ctfa5f.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp11ctfa5f.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let histogram: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    let maxLetters: string[] = [];\n    for (let letter of letters) {\n\
    \        if (histogram[letter] === undefined) {\n            histogram[letter]\
    \ = 1;\n        } else {\n            histogram[letter]++;\n        }\n      \
    \  if (histogram[letter] > max) {\n            max = histogram[letter];\n    \
    \        maxLetters = [letter];\n        } else if (histogram[letter] === max)\
    \ {\n            maxLetters.push(letter);\n        }\n    }\n    for (let letter\
    \ of letters) {\n        if (maxLetters.indexOf(letter) === -1) {\n          \
    \  delete histogram[letter];\n        }\n    }\n    return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp85_a5k91.js:54:12)\n    at Object.<anonymous> (/tmp/tmp85_a5k91.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_ijmas6g.js:47:12)\n    at Object.<anonymous> (/tmp/tmp_ijmas6g.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let histogram: {[key: string]: number}\
    \ = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    test.split(\"\
    \ \").forEach(function(key) {\n        if (!histogram[key]) {\n            histogram[key]\
    \ = 0;\n        }\n        histogram[key]++;\n        if (histogram[key] > max)\
    \ {\n            max = histogram[key];\n            maxKeys = [key];\n       \
    \ } else if (histogram[key] === max) {\n            maxKeys.push(key);\n     \
    \   }\n    });\n    return maxKeys.reduce(function(obj, key) {\n        obj[key]\
    \ = max;\n        return obj;\n    }, {});\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp0law3962.js:47:12)\n    at Object.<anonymous> (/tmp/tmp0law3962.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp12l4dan0.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12l4dan0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    let testArray:\
    \ string[] = test.split(\" \");\n    for (let i: number = 0; i < testArray.length;\
    \ i++) {\n        if (result[testArray[i]]) {\n            result[testArray[i]]++;\n\
    \        } else {\n            result[testArray[i]] = 1;\n        }\n    }\n \
    \   for (let key in result) {\n        if (result[key] > max) {\n            max\
    \ = result[key];\n            maxKeys = [];\n            maxKeys.push(key);\n\
    \        } else if (result[key] === max) {\n            maxKeys.push(key);\n \
    \       }\n    }\n    for (let i: number = 0; i < maxKeys.length; i++) {\n   \
    \     result[maxKeys[i]] = max;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpbkln9hxq.js:48:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbkln9hxq.js:56:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp12l4dan0.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12l4dan0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpnfot6yja.js:47:12)\n    at Object.<anonymous> (/tmp/tmpnfot6yja.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]] === undefined) {\n\
    \            result[letters[i]] = 1;\n        } else {\n            result[letters[i]]++;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp6hfsl7xp.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6hfsl7xp.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const letters: string[] = test.split(\" \");\n    for (const letter\
    \ of letters) {\n        if (result[letter]) {\n            result[letter]++;\n\
    \        } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpoi_hhn4d.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoi_hhn4d.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]\
    \ === undefined) {\n            result[letters[i]] = 1;\n        } else {\n  \
    \          result[letters[i]]++;\n        }\n        if (result[letters[i]] >\
    \ max) {\n            max = result[letters[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp6_782868.js:47:12)\n    at Object.<anonymous> (/tmp/tmp6_782868.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_ijmas6g.js:47:12)\n    at Object.<anonymous> (/tmp/tmp_ijmas6g.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp46ibk475.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp46ibk475.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpr9d76c5n.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr9d76c5n.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] !== max) {\n            delete result[key];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmplpxvvoul.js:47:12)\n    at Object.<anonymous> (/tmp/tmplpxvvoul.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  let result: {[key: string]: number} =\
    \ {};\n  let letters: string[] = test.split(\" \");\n  let max: number = 0;\n\
    \  for (let i: number = 0; i < letters.length; i++) {\n    if (result[letters[i]]\
    \ === undefined) {\n      result[letters[i]] = 1;\n    } else {\n      result[letters[i]]++;\n\
    \    }\n    if (result[letters[i]] > max) {\n      max = result[letters[i]];\n\
    \    }\n  }\n  for (let key in result) {\n    if (result[key] < max) {\n     \
    \ delete result[key];\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmppr82vx0r.js:47:12)\n    at Object.<anonymous> (/tmp/tmppr82vx0r.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(' ');\n    for (let letter of\
    \ letters) {\n        if (result[letter]) {\n            result[letter]++;\n \
    \       } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp11ctfa5f.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp11ctfa5f.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]] += 1;\n  \
    \      } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"a b\
    \ b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"b\
    \ b b b a\"));\nconsole.log(histogram(\"\"));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpnu9lai5m.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnu9lai5m.js:46:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: '{ a: 1, b: 1, c: 1 }

    { a: 2, b: 2 }

    { a: 2, b: 2, c: 1 }

    { b: 4, a: 1 }

    { '''': 1 }

    '
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let word of words) {\n \
    \       if (result[word] === undefined) {\n            result[word] = 1;\n   \
    \     } else {\n            result[word] += 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpdzykcna9.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdzykcna9.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp0ijc1wl7.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0ijc1wl7.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpe4xv4bdd.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4xv4bdd.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    let max = 0;\n    for (let i\
    \ = 0; i < words.length; i++) {\n        let word = words[i];\n        if (result[word]\
    \ === undefined) {\n            result[word] = 1;\n        } else {\n        \
    \    result[word]++;\n        }\n        if (result[word] > max) {\n         \
    \   max = result[word];\n        }\n    }\n    let finalResult: {[key: string]:\
    \ number} = {};\n    for (let key in result) {\n        if (result[key] === max)\
    \ {\n            finalResult[key] = result[key];\n        }\n    }\n    return\
    \ finalResult;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp3wsbns5f.js:49:12)\n    at Object.<anonymous> (/tmp/tmp3wsbns5f.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let testArr = test.split(\" \");\n    for (let i = 0; i < testArr.length;\
    \ i++) {\n        if (result[testArr[i]]) {\n            result[testArr[i]]++;\n\
    \        } else {\n            result[testArr[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpd7ew80rb.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd7ew80rb.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]\
    \ += 1;\n        } else {\n            result[letters[i]] = 1;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpwxqenc3r.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwxqenc3r.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpr9d76c5n.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr9d76c5n.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]] += 1;\n  \
    \      } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpi5wkzixu.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi5wkzixu.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpr9d76c5n.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr9d76c5n.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpe4xv4bdd.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4xv4bdd.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  let histogram: {[key: string]: number}\
    \ = {};\n  let max = 0;\n  let maxLetters: string[] = [];\n  test.split(' ').forEach(letter\
    \ => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n\
    \      histogram[letter] = 1;\n    }\n    if (histogram[letter] > max) {\n   \
    \   max = histogram[letter];\n      maxLetters = [letter];\n    } else if (histogram[letter]\
    \ === max) {\n      maxLetters.push(letter);\n    }\n  });\n  return maxLetters.reduce((acc,\
    \ letter) => {\n    acc[letter] = max;\n    return acc;\n  }, {});\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpt7yub0pa.js:49:12)\n    at Object.<anonymous> (/tmp/tmpt7yub0pa.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5m2qjv37.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5m2qjv37.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp12l4dan0.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12l4dan0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let word of words) {\n \
    \       if (result[word] === undefined) {\n            result[word] = 1;\n   \
    \     } else {\n            result[word]++;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpv8aij6jv.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv8aij6jv.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let hist: {[key: string]: number} =\
    \ {};\n    let max: number = 0;\n    let maxKeys: string[] = [];\n    test.split(\"\
    \ \").forEach(function(element: string) {\n        if (hist[element] === undefined)\
    \ {\n            hist[element] = 1;\n        } else {\n            hist[element]++;\n\
    \        }\n        if (hist[element] > max) {\n            max = hist[element];\n\
    \            maxKeys = [element];\n        } else if (hist[element] === max) {\n\
    \            maxKeys.push(element);\n        }\n    });\n    let result: {[key:\
    \ string]: number} = {};\n    maxKeys.forEach(function(element: string) {\n  \
    \      result[element] = max;\n    });\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpwzpo4wx6.js:50:12)\n    at Object.<anonymous> (/tmp/tmpwzpo4wx6.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    let max = 0;\n    for (let\
    \ i = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n     \
    \       result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpoj7i2w3c.js:47:12)\n    at Object.<anonymous> (/tmp/tmpoj7i2w3c.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp12l4dan0.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12l4dan0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result = {};\n    let arr = test.split(\"\
    \ \");\n    for (let i = 0; i < arr.length; i++) {\n        if (result[arr[i]])\
    \ {\n            result[arr[i]]++;\n        } else {\n            result[arr[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp_tipfnk5.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_tipfnk5.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    let max = 0;\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n        if (result[arr[i]]\
    \ > max) {\n            max = result[arr[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpqfxs1o6l.js:47:12)\n    at Object.<anonymous> (/tmp/tmpqfxs1o6l.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] !== max) {\n            delete result[key];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpatt43amh.js:47:12)\n    at Object.<anonymous> (/tmp/tmpatt43amh.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp0ijc1wl7.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0ijc1wl7.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n        if\
    \ (result[letters[i]] > max) {\n            max = result[letters[i]];\n      \
    \      maxLetters = [letters[i]];\n        } else if (result[letters[i]] === max)\
    \ {\n            maxLetters.push(letters[i]);\n        }\n    }\n    for (let\
    \ letter in result) {\n        if (maxLetters.indexOf(letter) === -1) {\n    \
    \        delete result[letter];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp5ywiio3r.js:52:12)\n    at Object.<anonymous> (/tmp/tmp5ywiio3r.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpe4xv4bdd.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4xv4bdd.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]] === undefined) {\n\
    \            result[letters[i]] = 1;\n        } else {\n            result[letters[i]]++;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp6hfsl7xp.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6hfsl7xp.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const letters = test.split(\" \");\n    for (const letter of letters)\
    \ {\n        if (result[letter]) {\n            result[letter]++;\n        } else\
    \ {\n            result[letter] = 1;\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmphyojbcdv.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphyojbcdv.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (letters[i] in result) {\n     \
    \       result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpfa8towh6.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfa8towh6.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]] === undefined) {\n            result[letters[i]]\
    \ = 1;\n        } else {\n            result[letters[i]]++;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp10nuguui.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp10nuguui.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let histogram: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (letters[i]\
    \ in histogram) {\n            histogram[letters[i]]++;\n        } else {\n  \
    \          histogram[letters[i]] = 1;\n        }\n        if (histogram[letters[i]]\
    \ > max) {\n            max = histogram[letters[i]];\n        }\n    }\n    for\
    \ (let key in histogram) {\n        if (histogram[key] !== max) {\n          \
    \  delete histogram[key];\n        }\n    }\n    return histogram;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpr3m335ab.js:47:12)\n    at Object.<anonymous> (/tmp/tmpr3m335ab.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let res: {[key: string]: number} = {};\n\
    \    test.split(\" \").forEach(function(item) {\n        if (res[item]) {\n  \
    \          res[item]++;\n        } else {\n            res[item] = 1;\n      \
    \  }\n    });\n    return res;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpj0eteie0.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj0eteie0.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (letters[i]\
    \ in result) {\n            result[letters[i]]++;\n        } else {\n        \
    \    result[letters[i]] = 1;\n        }\n        if (result[letters[i]] > max)\
    \ {\n            max = result[letters[i]];\n        }\n    }\n    for (let key\
    \ in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp0exmahir.js:47:12)\n    at Object.<anonymous> (/tmp/tmp0exmahir.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    let maxCount = 0;\n    let\
    \ maxLetter = \"\";\n    for (let i = 0; i < letters.length; i++) {\n        let\
    \ letter = letters[i];\n        if (result[letter] === undefined) {\n        \
    \    result[letter] = 1;\n        } else {\n            result[letter]++;\n  \
    \      }\n        if (result[letter] > maxCount) {\n            maxCount = result[letter];\n\
    \            maxLetter = letter;\n        }\n    }\n    for (let key in result)\
    \ {\n        if (result[key] < maxCount) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpohcgzras.js:50:12)\n    at Object.<anonymous> (/tmp/tmpohcgzras.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  let result: {[key: string]: number} =\
    \ {};\n  let letters: string[] = test.split(\" \");\n  for (let letter of letters)\
    \ {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter]\
    \ = 1;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmprswhrt6k.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprswhrt6k.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpe4xv4bdd.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4xv4bdd.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let testArray: string[] = test.split(\" \");\n    for (let i = 0;\
    \ i < testArray.length; i++) {\n        if (result[testArray[i]]) {\n        \
    \    result[testArray[i]]++;\n        } else {\n            result[testArray[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpsbadpty3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsbadpty3.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const words = test.split(' ');\n    for (const word of words) {\n\
    \        if (result[word]) {\n            result[word]++;\n        } else {\n\
    \            result[word] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp3fgheon3.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3fgheon3.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n        if\
    \ (result[letters[i]] > max) {\n            max = result[letters[i]];\n      \
    \      maxLetters = [letters[i]];\n        } else if (result[letters[i]] === max)\
    \ {\n            maxLetters.push(letters[i]);\n        }\n    }\n    for (let\
    \ key in result) {\n        if (maxLetters.indexOf(key) === -1) {\n          \
    \  delete result[key];\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpnyt5b32y.js:52:12)\n    at Object.<anonymous> (/tmp/tmpnyt5b32y.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let letter of letters) {\n        if (result[letter] === undefined)\
    \ {\n            result[letter] = 1;\n        } else {\n            result[letter]++;\n\
    \        }\n        if (result[letter] > max) {\n            max = result[letter];\n\
    \        }\n    }\n    for (let letter in result) {\n        if (result[letter]\
    \ !== max) {\n            delete result[letter];\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmppxhqmc09.js:48:12)\n    at Object.<anonymous> (/tmp/tmppxhqmc09.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5m2qjv37.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5m2qjv37.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5m2qjv37.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5m2qjv37.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(' ');\n    for (let word of words) {\n   \
    \     if (result[word]) {\n            result[word] += 1;\n        } else {\n\
    \            result[word] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp03mctyvj.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp03mctyvj.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr: string[] = test.split(\" \");\n    let max: number = 0;\n\
    \    let max_key: string = \"\";\n    for (let i: number = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]] === undefined) {\n            result[arr[i]]\
    \ = 1;\n        } else {\n            result[arr[i]]++;\n        }\n        if\
    \ (result[arr[i]] > max) {\n            max = result[arr[i]];\n            max_key\
    \ = arr[i];\n        }\n    }\n    for (let key in result) {\n        if (result[key]\
    \ !== max) {\n            delete result[key];\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp3eoro9cz.js:49:12)\n    at Object.<anonymous> (/tmp/tmp3eoro9cz.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_ijmas6g.js:47:12)\n    at Object.<anonymous> (/tmp/tmp_ijmas6g.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i] in result) {\n            result[words[i]] += 1;\n\
    \        } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5dq4m22y.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5dq4m22y.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let letter of letters) {\n        if (result[letter] === undefined)\
    \ {\n            result[letter] = 1;\n        } else {\n            result[letter]++;\n\
    \        }\n        if (result[letter] > max) {\n            max = result[letter];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] !==\
    \ max) {\n            delete result[key];\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp747iulky.js:48:12)\n    at Object.<anonymous> (/tmp/tmp747iulky.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    test.split(' ').forEach(letter => {\n        if (result[letter])\
    \ {\n            result[letter]++;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpd13_1vs4.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd13_1vs4.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5m2qjv37.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5m2qjv37.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    let max = 0;\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]\
    \ += 1;\n        } else {\n            result[arr[i]] = 1;\n        }\n      \
    \  if (result[arr[i]] > max) {\n            max = result[arr[i]];\n        }\n\
    \    }\n    for (let key in result) {\n        if (result[key] < max) {\n    \
    \        delete result[key];\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp5seoeaj8.js:47:12)\n    at Object.<anonymous> (/tmp/tmp5seoeaj8.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr: string[] = test.split(\" \");\n    for (let i: number =\
    \ 0; i < arr.length; i++) {\n        if (result[arr[i]] === undefined) {\n   \
    \         result[arr[i]] = 1;\n        } else {\n            result[arr[i]]++;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmph9gpgm9h.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph9gpgm9h.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(' ');\n    for (let letter of\
    \ letters) {\n        if (result[letter]) {\n            result[letter]++;\n \
    \       } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp11ctfa5f.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp11ctfa5f.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const letters: string[] = test.split(\" \");\n    for (const letter\
    \ of letters) {\n        if (result[letter]) {\n            result[letter]++;\n\
    \        } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpoi_hhn4d.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoi_hhn4d.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const testArr = test.split(\" \");\n    for (let i = 0; i < testArr.length;\
    \ i++) {\n        if (result[testArr[i]]) {\n            result[testArr[i]]++;\n\
    \        } else {\n            result[testArr[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpzz_yjvaz.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzz_yjvaz.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_ijmas6g.js:47:12)\n    at Object.<anonymous> (/tmp/tmp_ijmas6g.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const words = test.split(\" \");\n    for (const word of words) {\n\
    \        if (result[word]) {\n            result[word]++;\n        } else {\n\
    \            result[word] = 1;\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppg4cn0po.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppg4cn0po.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const letters: string[] = test.split(\" \");\n    for (const letter\
    \ of letters) {\n        if (result[letter]) {\n            result[letter]++;\n\
    \        } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpoi_hhn4d.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoi_hhn4d.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let histogram: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (histogram[letter]) {\n            histogram[letter]\
    \ += 1;\n        } else {\n            histogram[letter] = 1;\n        }\n   \
    \ }\n    return histogram;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpxj48b1li.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxj48b1li.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268169
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    for (let i = 0; i < letters.length;\
    \ i++) {\n        if (result[letters[i]] === undefined) {\n            result[letters[i]]\
    \ = 1;\n        } else {\n            result[letters[i]]++;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp10nuguui.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp10nuguui.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    for (let letter of letters)\
    \ {\n        if (result[letter] === undefined) {\n            result[letter] =\
    \ 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpbcfygenj.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbcfygenj.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268169
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]\
    \ === undefined) {\n            result[letters[i]] = 1;\n        } else {\n  \
    \          result[letters[i]]++;\n        }\n        if (result[letters[i]] >\
    \ max) {\n            max = result[letters[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp6_782868.js:47:12)\n    at Object.<anonymous> (/tmp/tmp6_782868.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] !== max) {\n            delete result[key];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmplpxvvoul.js:47:12)\n    at Object.<anonymous> (/tmp/tmplpxvvoul.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    let max = 0;\n    for (let i\
    \ = 0; i < words.length; i++) {\n        if (result[words[i]]) {\n           \
    \ result[words[i]]++;\n        } else {\n            result[words[i]] = 1;\n \
    \       }\n        if (result[words[i]] > max) {\n            max = result[words[i]];\n\
    \        }\n    }\n    for (let key in result) {\n        if (result[key] < max)\
    \ {\n            delete result[key];\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpkhz9qtdn.js:47:12)\n    at Object.<anonymous> (/tmp/tmpkhz9qtdn.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    test.split(' ').forEach(letter => {\n        if (result[letter])\
    \ {\n            result[letter]++;\n        } else {\n            result[letter]\
    \ = 1;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpd13_1vs4.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd13_1vs4.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    let max = 0;\n    for (let\
    \ i = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n     \
    \       result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpoj7i2w3c.js:47:12)\n    at Object.<anonymous> (/tmp/tmpoj7i2w3c.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]\
    \ += 1;\n        } else {\n            result[letters[i]] = 1;\n        }\n  \
    \  }\n    return result;\n}\nconsole.log(histogram(\"a b c\"));\nconsole.log(histogram(\"\
    a b b a\"));\nconsole.log(histogram(\"a b c a b\"));\nconsole.log(histogram(\"\
    b b b b a\"));\nconsole.log(histogram(\"\"));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5p4duxyi.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5p4duxyi.js:46:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: '{ a: 1, b: 1, c: 1 }

    { a: 2, b: 2 }

    { a: 2, b: 2, c: 1 }

    { b: 4, a: 1 }

    { '''': 1 }

    '
  timestamp: 1660268169
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let split = test.split(\" \");\n    for (let i = 0; i < split.length;\
    \ i++) {\n        if (result[split[i]] === undefined) {\n            result[split[i]]\
    \ = 1;\n        } else {\n            result[split[i]]++;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp0bnnlmms.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0bnnlmms.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268169
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]\
    \ += 1;\n        } else {\n            result[letters[i]] = 1;\n        }\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpwxqenc3r.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwxqenc3r.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] !== max) {\n            delete result[key];\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmplpxvvoul.js:47:12)\n    at Object.<anonymous> (/tmp/tmplpxvvoul.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp12l4dan0.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12l4dan0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let testArray: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < testArray.length; i++) {\n        if (result[testArray[i]]) {\n   \
    \         result[testArray[i]]++;\n        } else {\n            result[testArray[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqn8ieb6s.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqn8ieb6s.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result = {};\n    let words = test.split(\"\
    \ \");\n    for (let word of words) {\n        if (result[word]) {\n         \
    \   result[word]++;\n        } else {\n            result[word] = 1;\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpp3y7_26o.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp3y7_26o.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268169
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let word of words) {\n \
    \       if (result[word] === undefined) {\n            result[word] = 1;\n   \
    \     } else {\n            result[word]++;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpv8aij6jv.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv8aij6jv.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters = test.split(\" \");\n    let max = 0;\n    let maxLetters:\
    \ string[] = [];\n    for (let letter of letters) {\n        if (result[letter]\
    \ === undefined) {\n            result[letter] = 1;\n        } else {\n      \
    \      result[letter]++;\n        }\n        if (result[letter] > max) {\n   \
    \         max = result[letter];\n            maxLetters = [letter];\n        }\
    \ else if (result[letter] === max) {\n            maxLetters.push(letter);\n \
    \       }\n    }\n    for (let letter of Object.keys(result)) {\n        if (maxLetters.indexOf(letter)\
    \ === -1) {\n            delete result[letter];\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp33hiisgh.js:54:12)\n    at Object.<anonymous> (/tmp/tmp33hiisgh.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268169
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  let result: {[key: string]: number} =\
    \ {};\n  let letters: string[] = test.split(\" \");\n  for (let letter of letters)\
    \ {\n    if (result[letter]) {\n      result[letter]++;\n    } else {\n      result[letter]\
    \ = 1;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmprswhrt6k.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprswhrt6k.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268168
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_ijmas6g.js:47:12)\n    at Object.<anonymous> (/tmp/tmp_ijmas6g.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let array: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < array.length; i++) {\n        if (result[array[i]]) {\n           \
    \ result[array[i]]++;\n        } else {\n            result[array[i]] = 1;\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpoq1bggi9.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoq1bggi9.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268172
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let testArr = test.split(\" \");\n    for (let i = 0; i < testArr.length;\
    \ i++) {\n        if (result[testArr[i]]) {\n            result[testArr[i]]++;\n\
    \        } else {\n            result[testArr[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpd7ew80rb.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd7ew80rb.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let array: string[] = test.split(\" \");\n    for (let i = 0; i <\
    \ array.length; i++) {\n        if (result[array[i]] === undefined) {\n      \
    \      result[array[i]] = 1;\n        } else {\n            result[array[i]]++;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpsc557g6u.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsc557g6u.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268171
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]])\
    \ {\n            result[letters[i]] += 1;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n        if (result[letters[i]] > max) {\n            max =\
    \ result[letters[i]];\n        }\n    }\n    for (let key in result) {\n     \
    \   if (result[key] < max) {\n            delete result[key];\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp7acqs6gz.js:47:12)\n    at Object.<anonymous> (/tmp/tmp7acqs6gz.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268171
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]]) {\n       \
    \     result[letters[i]]++;\n        } else {\n            result[letters[i]]\
    \ = 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpe4xv4bdd.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe4xv4bdd.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let letters: string[] = test.split(\"\
    \ \");\n    let letterCount: {[key: string]: number} = {};\n    for (let letter\
    \ of letters) {\n        if (letterCount[letter] === undefined) {\n          \
    \  letterCount[letter] = 1;\n        } else {\n            letterCount[letter]\
    \ += 1;\n        }\n    }\n    return letterCount;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpjm3jtq3e.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjm3jtq3e.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268171
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i = 0; i\
    \ < letters.length; i++) {\n        if (result[letters[i]]) {\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppycm3jou.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppycm3jou.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const arr = test.split(' ');\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]] += 1;\n  \
    \      } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpgfp2qif6.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgfp2qif6.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268171
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  let result = {};\n  let arr = test.split(\"\
    \ \");\n  for (let i = 0; i < arr.length; i++) {\n    if (result[arr[i]]) {\n\
    \      result[arr[i]] += 1;\n    } else {\n      result[arr[i]] = 1;\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpv9us8ywc.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv9us8ywc.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268171
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    for (let i: number = 0; i < letters.length; i++) {\n        if (result[letters[i]]\
    \ === undefined) {\n            result[letters[i]] = 1;\n        } else {\n  \
    \          result[letters[i]]++;\n        }\n        if (result[letters[i]] >\
    \ max) {\n            max = result[letters[i]];\n        }\n    }\n    for (let\
    \ key in result) {\n        if (result[key] < max) {\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp6_782868.js:47:12)\n    at Object.<anonymous> (/tmp/tmp6_782868.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp12l4dan0.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12l4dan0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    test.split(\" \").forEach(function(letter) {\n        if (result[letter]\
    \ === undefined) {\n            result[letter] = 1;\n        } else {\n      \
    \      result[letter]++;\n        }\n    });\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpti9iv9gq.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpti9iv9gq.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    let maxLetters: string[] = [];\n    for (let letter of letters) {\n\
    \        if (result[letter] === undefined) {\n            result[letter] = 1;\n\
    \        } else {\n            result[letter]++;\n        }\n        if (result[letter]\
    \ > max) {\n            max = result[letter];\n            maxLetters = [letter];\n\
    \        } else if (result[letter] === max) {\n            maxLetters.push(letter);\n\
    \        }\n    }\n    for (let letter of Object.keys(result)) {\n        if (maxLetters.indexOf(letter)\
    \ === -1) {\n            delete result[letter];\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpicik9srq.js:54:12)\n    at Object.<anonymous> (/tmp/tmpicik9srq.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268171
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n  let result: {[key: string]: number} =\
    \ {};\n  let letters: string[] = test.split(\" \");\n  for (let i: number = 0;\
    \ i < letters.length; i++) {\n    if (result[letters[i]] === undefined) {\n  \
    \    result[letters[i]] = 1;\n    } else {\n      result[letters[i]] += 1;\n \
    \   }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp8xf1to2i.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8xf1to2i.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268172
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let testArray = test.split(\" \");\n\
    \    let testObject = {};\n    for (let i = 0; i < testArray.length; i++) {\n\
    \        if (testObject[testArray[i]]) {\n            testObject[testArray[i]]\
    \ += 1;\n        } else {\n            testObject[testArray[i]] = 1;\n       \
    \ }\n    }\n    return testObject;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpjpr25b6r.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjpr25b6r.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268171
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let arr = test.split(\" \");\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (result[arr[i]]) {\n            result[arr[i]]++;\n     \
    \   } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmppsh4ltye.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppsh4ltye.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let words = test.split(\" \");\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (result[words[i]]) {\n            result[words[i]]++;\n \
    \       } else {\n            result[words[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpr9d76c5n.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr9d76c5n.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < letters.length; i++) {\n        if (result[letters[i]] === undefined)\
    \ {\n            result[letters[i]] = 1;\n        } else {\n            result[letters[i]]++;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpu17pns5t.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu17pns5t.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268172
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const letters: string[] = test.split(\" \");\n    for (const letter\
    \ of letters) {\n        if (result[letter]) {\n            result[letter]++;\n\
    \        } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpoi_hhn4d.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoi_hhn4d.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let histogram: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    let max: number =\
    \ 0;\n    let maxLetters: string[] = [];\n    for (let i: number = 0; i < letters.length;\
    \ i++) {\n        if (histogram[letters[i]]) {\n            histogram[letters[i]]++;\n\
    \        } else {\n            histogram[letters[i]] = 1;\n        }\n       \
    \ if (histogram[letters[i]] > max) {\n            max = histogram[letters[i]];\n\
    \            maxLetters = [letters[i]];\n        } else if (histogram[letters[i]]\
    \ === max) {\n            maxLetters.push(letters[i]);\n        }\n    }\n   \
    \ let result: {[key: string]: number} = {};\n    for (let i: number = 0; i < maxLetters.length;\
    \ i++) {\n        result[maxLetters[i]] = max;\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpwwy6cp0c.js:51:12)\n    at Object.<anonymous> (/tmp/tmpwwy6cp0c.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268172
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let letters: string[] = test.split(\" \");\n    for (let letter of\
    \ letters) {\n        if (result[letter] === undefined) {\n            result[letter]\
    \ = 1;\n        } else {\n            result[letter]++;\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5m2qjv37.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5m2qjv37.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    let result: {[key: string]: number}\
    \ = {};\n    let array: string[] = test.split(\" \");\n    for (let i: number\
    \ = 0; i < array.length; i++) {\n        if (result[array[i]] === undefined) {\n\
    \            result[array[i]] = 1;\n        } else {\n            result[array[i]]++;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpl6g33jeq.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl6g33jeq.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268172
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string representing a space separated lowercase\
    \ letters, return an object\n// of the letter with the most repetition and containing\
    \ the corresponding count.\n// If several letters have the same occurrence, return\
    \ all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\"\
    : 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>>\
    \ histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test:\
    \ string): {[key: string]: number} {\n    const result: {[key: string]: number}\
    \ = {};\n    const letters: string[] = test.split(\" \");\n    for (const letter\
    \ of letters) {\n        if (result[letter]) {\n            result[letter]++;\n\
    \        } else {\n            result[letter] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpoi_hhn4d.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoi_hhn4d.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268163
