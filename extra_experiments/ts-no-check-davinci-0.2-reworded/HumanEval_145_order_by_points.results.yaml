language: ts
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const sumA = a.toString().split('').reduce((acc, val) => acc\
    \ + parseInt(val), 0);\n        const sumB = b.toString().split('').reduce((acc,\
    \ val) => acc + parseInt(val), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_vg34z5v.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_vg34z5v.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + +cur, 0);\n        let bSum = b.toString().split('').reduce((acc, cur) =>\
    \ acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpu6bb7oyj.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu6bb7oyj.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let a_sum = a.toString().split('').reduce((sum, num) => sum + parseInt(num),\
    \ 0);\n    let b_sum = b.toString().split('').reduce((sum, num) => sum + parseInt(num),\
    \ 0);\n    if (a_sum === b_sum) {\n      return nums.indexOf(a) - nums.indexOf(b);\n\
    \    }\n    return a_sum - b_sum;\n  });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_oyzfb4f.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_oyzfb4f.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    let result: number[]\
    \ = [];\n    let sum: number = 0;\n    let sumArray: number[] = [];\n    let indexArray:\
    \ number[] = [];\n    for (let i: number = 0; i < nums.length; i++) {\n      \
    \  let num: number = nums[i];\n        while (num > 0) {\n            sum += num\
    \ % 10;\n            num = Math.floor(num / 10);\n        }\n        sumArray.push(sum);\n\
    \        sum = 0;\n    }\n    for (let i: number = 0; i < sumArray.length; i++)\
    \ {\n        let min: number = Math.min(...sumArray);\n        let index: number\
    \ = sumArray.indexOf(min);\n        indexArray.push(index);\n        sumArray[index]\
    \ = Infinity;\n    }\n    for (let i: number = 0; i < indexArray.length; i++)\
    \ {\n        result.push(nums[indexArray[i]]);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -11, -12, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpd4_l_gog.js:39:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd4_l_gog.js:46:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -11,\
    \ -12, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn_h62di2.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn_h62di2.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgqb8d30r.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgqb8d30r.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = sumDigits(a);\n        let sumB = sumDigits(b);\n\
    \        if (sumA === sumB) {\n            return nums.indexOf(a) - nums.indexOf(b);\n\
    \        }\n        return sumA - sumB;\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5o06eij1.js:13\n        var sumA = sumDigits(a);\n            \
    \       ^\n\nReferenceError: sumDigits is not defined\n    at /tmp/tmp5o06eij1.js:13:20\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmp5o06eij1.js:12:17)\n\
    \    at test (/tmp/tmp5o06eij1.js:24:22)\n    at Object.<anonymous> (/tmp/tmp5o06eij1.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((a, b) => +a + +b, 0);\n\
    \    let bSum = b.toString().split('').reduce((a, b) => +a + +b, 0);\n    return\
    \ aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp24zd7azc.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp24zd7azc.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        let sumB = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_5taclho.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_5taclho.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = 0;\n    let sumB = 0;\n    let aString = a.toString();\n\
    \    let bString = b.toString();\n    for (let i = 0; i < aString.length; i++)\
    \ {\n      sumA += parseInt(aString[i]);\n    }\n    for (let i = 0; i < bString.length;\
    \ i++) {\n      sumB += parseInt(bString[i]);\n    }\n    if (sumA === sumB) {\n\
    \      return nums.indexOf(a) - nums.indexOf(b);\n    } else {\n      return sumA\
    \ - sumB;\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmppz3vbvgt.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppz3vbvgt.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268029
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc +\
    \ +cur, 0);\n    const sumB = b.toString().split('').reduce((acc, cur) => acc\
    \ + +cur, 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp49cta_5s.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp49cta_5s.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    return sum_digits(a) - sum_digits(b);\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpaq7b5idt.js:13\n        return sum_digits(a) - sum_digits(b);\n\
    \        ^\n\nReferenceError: sum_digits is not defined\n    at /tmp/tmpaq7b5idt.js:13:9\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpaq7b5idt.js:12:17)\n\
    \    at test (/tmp/tmpaq7b5idt.js:19:22)\n    at Object.<anonymous> (/tmp/tmpaq7b5idt.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp290zw3ui.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp290zw3ui.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((sum, num) => sum +\
    \ +num, 0);\n    const bSum = b.toString().split('').reduce((sum, num) => sum\
    \ + +num, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpixzn3tc1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpixzn3tc1.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc +\
    \ Number(cur), 0);\n    const sumB = b.toString().split('').reduce((acc, cur)\
    \ => acc + Number(cur), 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpnvcml81w.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnvcml81w.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        let sumB = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_5taclho.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_5taclho.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => sum_digits(a) - sum_digits(b));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp7jx11wj6.js:12\n    return nums.sort(function (a, b) { return sum_digits(a)\
    \ - sum_digits(b); });\n                                       ^\n\nReferenceError:\
    \ sum_digits is not defined\n    at /tmp/tmp7jx11wj6.js:12:40\n    at Array.sort\
    \ (<anonymous>)\n    at order_by_points (/tmp/tmp7jx11wj6.js:12:17)\n    at test\
    \ (/tmp/tmp7jx11wj6.js:17:22)\n    at Object.<anonymous> (/tmp/tmp7jx11wj6.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + +b, 0);\n\
    \    const bSum = b.toString().split('').reduce((a, b) => a + +b, 0);\n    return\
    \ aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpfmp_eo82.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfmp_eo82.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((sum, num) => sum\
    \ + Number(num), 0);\n        let bSum = b.toString().split('').reduce((sum, num)\
    \ => sum + Number(num), 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp68d4dh40.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp68d4dh40.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = 0;\n    let sumB = 0;\n    a.toString().split(\"\").forEach(num\
    \ => {\n      sumA += parseInt(num);\n    });\n    b.toString().split(\"\").forEach(num\
    \ => {\n      sumB += parseInt(num);\n    });\n    if (sumA === sumB) {\n    \
    \  return a - b;\n    }\n    return sumA - sumB;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn3gkk86f.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn3gkk86f.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    const sums = nums.map(num\
    \ => num.toString().split('').reduce((a, b) => +a + +b, 0));\n    return nums.sort((a,\
    \ b) => sums[nums.indexOf(a)] - sums[nums.indexOf(b)]);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpigmdojkh.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpigmdojkh.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + Number(cur), 0);\n        let bSum = b.toString().split('').reduce((acc, cur)\
    \ => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpj862gt5v.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj862gt5v.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const sumA = a.toString().split('').reduce((sum, num) => sum +\
    \ Number(num), 0);\n    const sumB = b.toString().split('').reduce((sum, num)\
    \ => sum + Number(num), 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpidsks09h.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpidsks09h.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    let result: number[]\
    \ = [];\n    let sum: number = 0;\n    let sum_array: number[] = [];\n    let\
    \ index_array: number[] = [];\n    let index: number = 0;\n    let temp: number\
    \ = 0;\n    let temp_index: number = 0;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        sum = 0;\n        index = i;\n        while (nums[i] > 0) {\n\
    \            sum += nums[i] % 10;\n            nums[i] = Math.floor(nums[i] /\
    \ 10);\n        }\n        sum_array.push(sum);\n        index_array.push(index);\n\
    \    }\n    for (let i = 0; i < sum_array.length; i++) {\n        for (let j =\
    \ i + 1; j < sum_array.length; j++) {\n            if (sum_array[i] > sum_array[j])\
    \ {\n                temp = sum_array[i];\n                sum_array[i] = sum_array[j];\n\
    \                sum_array[j] = temp;\n                temp_index = index_array[i];\n\
    \                index_array[i] = index_array[j];\n                index_array[j]\
    \ = temp_index;\n            }\n        }\n    }\n    for (let i = 0; i < index_array.length;\
    \ i++) {\n        result.push(nums[index_array[i]]);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -11, -12, 0, 0 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh5n28gw.js:49:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh5n28gw.js:56:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -11,\
    \ -12, 0, 0 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn6232aub.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn6232aub.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = 0;\n    let sumB = 0;\n    a.toString().split(\"\").forEach(num\
    \ => {\n      sumA += parseInt(num);\n    });\n    b.toString().split(\"\").forEach(num\
    \ => {\n      sumB += parseInt(num);\n    });\n    if (sumA === sumB) {\n    \
    \  return nums.indexOf(a) - nums.indexOf(b);\n    } else {\n      return sumA\
    \ - sumB;\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgapj4_19.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgapj4_19.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a\n      .toString()\n      .split(\"\")\n      .reduce((a,\
    \ b) => parseInt(a) + parseInt(b), 0);\n    let bSum = b\n      .toString()\n\
    \      .split(\"\")\n      .reduce((a, b) => parseInt(a) + parseInt(b), 0);\n\
    \    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpek8_qp2g.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpek8_qp2g.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        let sumB = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_5taclho.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_5taclho.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpr0amc22l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr0amc22l.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, val) => acc +\
    \ +val, 0);\n    const bSum = b.toString().split('').reduce((acc, val) => acc\
    \ + +val, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_e9mgi5u.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_e9mgi5u.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((a, b) => +a + +b);\n\
    \    let bSum = b.toString().split('').reduce((a, b) => +a + +b);\n    return\
    \ aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpmt_4ijvz.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmt_4ijvz.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpr0amc22l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr0amc22l.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpr0amc22l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr0amc22l.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    if (nums.length\
    \ === 0) {\n        return [];\n    }\n    let sum = [];\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        let num = nums[i];\n        let sum_num = 0;\n\
    \        while (num > 0) {\n            sum_num += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        sum.push(sum_num);\n    }\n    let\
    \ result = [];\n    for (let i = 0; i < nums.length; i++) {\n        let min =\
    \ Math.min(...sum);\n        let index = sum.indexOf(min);\n        result.push(nums[index]);\n\
    \        sum[index] = Infinity;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -11, -12, 1, 11 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp7xmpi422.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7xmpi422.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -11,\
    \ -12, 1, 11 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpr0amc22l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr0amc22l.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpr0amc22l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr0amc22l.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + +cur, 0);\n        let bSum = b.toString().split('').reduce((acc, cur) =>\
    \ acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpu6bb7oyj.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu6bb7oyj.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((a, b) => parseInt(a)\
    \ + parseInt(b), 0);\n        let bSum = b.toString().split('').reduce((a, b)\
    \ => parseInt(a) + parseInt(b), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpkih0fgyp.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkih0fgyp.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn6232aub.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn6232aub.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        let sumB = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_5taclho.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_5taclho.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, val) => acc + +val,\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, val) => acc + +val,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpbxnb3p5_.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbxnb3p5_.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + Number(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + Number(curr), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp41l0kjm6.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp41l0kjm6.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = 0;\n    let sumB = 0;\n    for (let i = 0; i < a.toString().length;\
    \ i++) {\n      sumA += Number(a.toString()[i]);\n    }\n    for (let i = 0; i\
    \ < b.toString().length; i++) {\n      sumB += Number(b.toString()[i]);\n    }\n\
    \    if (sumA === sumB) {\n      return nums.indexOf(a) - nums.indexOf(b);\n \
    \   } else {\n      return sumA - sumB;\n    }\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpvqu24eqt.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvqu24eqt.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, num) => acc +\
    \ +num, 0);\n    const bSum = b.toString().split('').reduce((acc, num) => acc\
    \ + +num, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpunjcm9cl.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpunjcm9cl.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    let result: number[]\
    \ = [];\n    let sum: number = 0;\n    let sum_array: number[] = [];\n    let\
    \ index_array: number[] = [];\n    let index: number = 0;\n    let temp: number\
    \ = 0;\n    let temp_index: number = 0;\n    for (let i: number = 0; i < nums.length;\
    \ i++) {\n        sum = 0;\n        for (let j: number = 0; j < nums[i].toString().length;\
    \ j++) {\n            sum += parseInt(nums[i].toString()[j]);\n        }\n   \
    \     sum_array.push(sum);\n        index_array.push(i);\n    }\n    for (let\
    \ i: number = 0; i < sum_array.length; i++) {\n        for (let j: number = 0;\
    \ j < sum_array.length - 1; j++) {\n            if (sum_array[j] > sum_array[j\
    \ + 1]) {\n                temp = sum_array[j];\n                sum_array[j]\
    \ = sum_array[j + 1];\n                sum_array[j + 1] = temp;\n            \
    \    temp_index = index_array[j];\n                index_array[j] = index_array[j\
    \ + 1];\n                index_array[j + 1] = temp_index;\n            }\n   \
    \     }\n    }\n    for (let i: number = 0; i < index_array.length; i++) {\n \
    \       result.push(nums[index_array[i]]);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp9cew0rlz.js:47:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9cew0rlz.js:54:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    if (sum_of_digits(a) === sum_of_digits(b)) {\n      return nums.indexOf(a)\
    \ - nums.indexOf(b);\n    }\n    return sum_of_digits(a) - sum_of_digits(b);\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpnndscsl6.js:13\n        if (sum_of_digits(a) === sum_of_digits(b))\
    \ {\n        ^\n\nReferenceError: sum_of_digits is not defined\n    at /tmp/tmpnndscsl6.js:13:9\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpnndscsl6.js:12:17)\n\
    \    at test (/tmp/tmpnndscsl6.js:22:22)\n    at Object.<anonymous> (/tmp/tmpnndscsl6.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn6232aub.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn6232aub.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp290zw3ui.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp290zw3ui.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((a, b) => Number(a)\
    \ + Number(b), 0);\n        let bSum = b.toString().split('').reduce((a, b) =>\
    \ Number(a) + Number(b), 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp8fjhr9oy.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8fjhr9oy.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + +cur, 0);\n        let sumB = b.toString().split('').reduce((acc, cur) =>\
    \ acc + +cur, 0);\n        return sumA - sumB;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_0xx5m5g.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_0xx5m5g.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + parseInt(b),\
    \ 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + parseInt(b),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpu8oj3ctv.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu8oj3ctv.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a\n      .toString()\n      .split(\"\")\n      .reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    let bSum = b\n      .toString()\n  \
    \    .split(\"\")\n      .reduce((acc, curr) => acc + parseInt(curr), 0);\n  \
    \  return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp4_sgf8ux.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4_sgf8ux.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + +cur, 0);\n        let bSum = b.toString().split('').reduce((acc, cur) =>\
    \ acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpu6bb7oyj.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu6bb7oyj.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn_h62di2.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn_h62di2.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn6232aub.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn6232aub.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((a, b) => parseInt(a)\
    \ + parseInt(b));\n    let sumB = b.toString().split('').reduce((a, b) => parseInt(a)\
    \ + parseInt(b));\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph5qcr3rv.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph5qcr3rv.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((sum, num) => sum +\
    \ Number(num), 0);\n    const bSum = b.toString().split('').reduce((sum, num)\
    \ => sum + Number(num), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpwg1f_evl.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwg1f_evl.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: -1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    if (nums.length\
    \ === 0) {\n        return nums;\n    }\n    let sum_of_digits = (num: number):\
    \ number => {\n        let sum = 0;\n        while (num !== 0) {\n           \
    \ sum += num % 10;\n            num = Math.floor(num / 10);\n        }\n     \
    \   return sum;\n    };\n    let sums = nums.map(sum_of_digits);\n    let sorted_nums\
    \ = [];\n    for (let i = 0; i < nums.length; i++) {\n        let min_index =\
    \ sums.indexOf(Math.min(...sums));\n        sorted_nums.push(nums[min_index]);\n\
    \        sums[min_index] = Infinity;\n    }\n    return sorted_nums;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660268053
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((a, b) => parseInt(a)\
    \ + parseInt(b));\n        let bSum = b.toString().split('').reduce((a, b) =>\
    \ parseInt(a) + parseInt(b));\n        return aSum - bSum;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpl8n6abib.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl8n6abib.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn_h62di2.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn_h62di2.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        const bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp35cqqzts.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp35cqqzts.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc +\
    \ Number(cur), 0);\n    const sumB = b.toString().split('').reduce((acc, cur)\
    \ => acc + Number(cur), 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpnvcml81w.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnvcml81w.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc +\
    \ +cur, 0);\n    const sumB = b.toString().split('').reduce((acc, cur) => acc\
    \ + +cur, 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp49cta_5s.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp49cta_5s.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpr0amc22l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr0amc22l.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a\n      .toString()\n      .split(\"\")\n      .reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    let bSum = b\n      .toString()\n  \
    \    .split(\"\")\n      .reduce((acc, curr) => acc + parseInt(curr), 0);\n  \
    \  return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp4_sgf8ux.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4_sgf8ux.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn_h62di2.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn_h62di2.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc +\
    \ Number(cur), 0);\n    const sumB = b.toString().split('').reduce((acc, cur)\
    \ => acc + Number(cur), 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpnvcml81w.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnvcml81w.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = sumDigits(a);\n    const bSum = sumDigits(b);\n  \
    \  if (aSum === bSum) {\n      return a - b;\n    }\n    return aSum - bSum;\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpv6ufb803.js:13\n        var aSum = sumDigits(a);\n            \
    \       ^\n\nReferenceError: sumDigits is not defined\n    at /tmp/tmpv6ufb803.js:13:20\n\
    \    at Array.sort (<anonymous>)\n    at order_by_points (/tmp/tmpv6ufb803.js:12:17)\n\
    \    at test (/tmp/tmpv6ufb803.js:24:22)\n    at Object.<anonymous> (/tmp/tmpv6ufb803.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        const sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpeyvkspbg.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeyvkspbg.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + Number(cur), 0);\n        let bSum = b.toString().split('').reduce((acc, cur)\
    \ => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpj862gt5v.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj862gt5v.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgqb8d30r.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgqb8d30r.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgqb8d30r.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgqb8d30r.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((sum, num) => sum\
    \ + Number(num), 0);\n        let bSum = b.toString().split('').reduce((sum, num)\
    \ => sum + Number(num), 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp68d4dh40.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp68d4dh40.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((a, b) => +a + +b, 0);\n\
    \    let bSum = b.toString().split('').reduce((a, b) => +a + +b, 0);\n    return\
    \ aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp24zd7azc.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp24zd7azc.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgqb8d30r.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgqb8d30r.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = 0;\n    let sumB = 0;\n    a.toString().split(\"\").forEach(num\
    \ => {\n      sumA += parseInt(num);\n    });\n    b.toString().split(\"\").forEach(num\
    \ => {\n      sumB += parseInt(num);\n    });\n    if (sumA === sumB) {\n    \
    \  return a - b;\n    }\n    return sumA - sumB;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn3gkk86f.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn3gkk86f.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    // TODO: implement\
    \ this function\n    return [];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ -1, -11, 1, -12,\
    \ 11 ]\n    at test (/tmp/tmpi5ompfs_.js:18:12)\n    at Object.<anonymous> (/tmp/tmpi5ompfs_.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ -1, -11, 1, -12, 11 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((a, b) => parseInt(a)\
    \ + parseInt(b));\n        let bSum = b.toString().split('').reduce((a, b) =>\
    \ parseInt(a) + parseInt(b));\n        return aSum - bSum;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpl8n6abib.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl8n6abib.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + +cur, 0);\n        let bSum = b.toString().split('').reduce((acc, cur) =>\
    \ acc + +cur, 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpu6bb7oyj.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu6bb7oyj.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpr0amc22l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr0amc22l.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + Number(cur), 0);\n        let bSum = b.toString().split('').reduce((acc, cur)\
    \ => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpj862gt5v.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj862gt5v.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    let result: number[]\
    \ = [];\n    let sum: number = 0;\n    let sum_arr: number[] = [];\n    let index_arr:\
    \ number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n        sum = 0;\n\
    \        for (let j = 0; j < nums[i].toString().length; j++) {\n            sum\
    \ += parseInt(nums[i].toString()[j]);\n        }\n        sum_arr.push(sum);\n\
    \        index_arr.push(i);\n    }\n    for (let i = 0; i < sum_arr.length; i++)\
    \ {\n        for (let j = i + 1; j < sum_arr.length; j++) {\n            if (sum_arr[i]\
    \ > sum_arr[j]) {\n                let temp = sum_arr[i];\n                sum_arr[i]\
    \ = sum_arr[j];\n                sum_arr[j] = temp;\n                temp = index_arr[i];\n\
    \                index_arr[i] = index_arr[j];\n                index_arr[j] =\
    \ temp;\n            }\n        }\n    }\n    for (let i = 0; i < index_arr.length;\
    \ i++) {\n        result.push(nums[index_arr[i]]);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpq2dni8ug.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpq2dni8ug.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgqb8d30r.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgqb8d30r.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    let result: number[]\
    \ = [];\n    let sum: number = 0;\n    let sumArr: number[] = [];\n    let indexArr:\
    \ number[] = [];\n    let index: number = 0;\n    let temp: number = 0;\n    let\
    \ temp2: number = 0;\n    for (let i: number = 0; i < nums.length; i++) {\n  \
    \      sum = 0;\n        index = i;\n        while (nums[i] > 0) {\n         \
    \   sum += nums[i] % 10;\n            nums[i] = Math.floor(nums[i] / 10);\n  \
    \      }\n        sumArr.push(sum);\n        indexArr.push(index);\n    }\n  \
    \  for (let i: number = 0; i < sumArr.length; i++) {\n        for (let j: number\
    \ = 0; j < sumArr.length - 1; j++) {\n            if (sumArr[j] > sumArr[j + 1])\
    \ {\n                temp = sumArr[j];\n                sumArr[j] = sumArr[j +\
    \ 1];\n                sumArr[j + 1] = temp;\n                temp2 = indexArr[j];\n\
    \                indexArr[j] = indexArr[j + 1];\n                indexArr[j +\
    \ 1] = temp2;\n            }\n        }\n    }\n    for (let i: number = 0; i\
    \ < indexArr.length; i++) {\n        result.push(nums[indexArr[i]]);\n    }\n\
    \    return result;\n}\nconsole.log(order_by_points([1, 11, -1, -11, -12]));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -11, -12, 0, 0 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpndiu8ge7.js:50:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpndiu8ge7.js:57:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -11,\
    \ -12, 0, 0 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: '[ -1, -11, -12, 0, 0 ]

    '
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = 0;\n    let sumB = 0;\n    let strA = a.toString();\n\
    \    let strB = b.toString();\n    for (let i = 0; i < strA.length; i++) {\n \
    \     sumA += parseInt(strA[i]);\n    }\n    for (let i = 0; i < strB.length;\
    \ i++) {\n      sumB += parseInt(strB[i]);\n    }\n    if (sumA === sumB) {\n\
    \      return a - b;\n    }\n    return sumA - sumB;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpopan7nog.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpopan7nog.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    const nums_with_points\
    \ = nums.map((num, index) => {\n        return {\n            num,\n         \
    \   index,\n            points: num.toString().split('').reduce((acc, curr) =>\
    \ acc + parseInt(curr), 0)\n        }\n    });\n    nums_with_points.sort((a,\
    \ b) => {\n        if (a.points === b.points) {\n            return a.index -\
    \ b.index;\n        }\n        return a.points - b.points;\n    });\n    return\
    \ nums_with_points.map(num_with_points => num_with_points.num);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpq9nom558.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpq9nom558.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgqb8d30r.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgqb8d30r.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + Number(cur), 0);\n        let bSum = b.toString().split('').reduce((acc, cur)\
    \ => acc + Number(cur), 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11,\
    \ -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpj862gt5v.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj862gt5v.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = 0;\n    let sumB = 0;\n    let aStr = a.toString();\n\
    \    let bStr = b.toString();\n    for (let i = 0; i < aStr.length; i++) {\n \
    \     sumA += parseInt(aStr[i]);\n    }\n    for (let i = 0; i < bStr.length;\
    \ i++) {\n      sumB += parseInt(bStr[i]);\n    }\n    if (sumA === sumB) {\n\
    \      return a - b;\n    }\n    return sumA - sumB;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp_x92ikkw.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_x92ikkw.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc +\
    \ +cur, 0);\n    const sumB = b.toString().split('').reduce((acc, cur) => acc\
    \ + +cur, 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp49cta_5s.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp49cta_5s.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpgqb8d30r.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgqb8d30r.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn_h62di2.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn_h62di2.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    let result: number[]\
    \ = [];\n    let nums_copy: number[] = nums.slice();\n    let sums: number[] =\
    \ [];\n    for (let i = 0; i < nums.length; i++) {\n        sums.push(sum_of_digits(nums[i]));\n\
    \    }\n    for (let i = 0; i < nums.length; i++) {\n        let min_index: number\
    \ = sums.indexOf(Math.min(...sums));\n        result.push(nums_copy[min_index]);\n\
    \        sums.splice(min_index, 1);\n        nums_copy.splice(min_index, 1);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpm12xm82w.js:16\n        sums.push(sum_of_digits(nums[i]));\n  \
    \           ^\n\nReferenceError: sum_of_digits is not defined\n    at order_by_points\
    \ (/tmp/tmpm12xm82w.js:16:14)\n    at test (/tmp/tmpm12xm82w.js:29:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpm12xm82w.js:36:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((a, b) => a + parseInt(b),\
    \ 0);\n        const bSum = b.toString().split('').reduce((a, b) => a + parseInt(b),\
    \ 0);\n        return aSum - bSum;\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6bbmdn3f.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6bbmdn3f.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const sumA = a.toString().split('').reduce((acc, cur) => acc +\
    \ Number(cur), 0);\n    const sumB = b.toString().split('').reduce((acc, cur)\
    \ => acc + Number(cur), 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpnvcml81w.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnvcml81w.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    if (nums.length\
    \ === 0) {\n        return nums;\n    }\n    let nums_with_points: number[][]\
    \ = [];\n    for (let i = 0; i < nums.length; i++) {\n        nums_with_points.push([nums[i],\
    \ nums[i].toString().split('').map(Number).reduce((a, b) => a + b, 0)]);\n   \
    \ }\n    nums_with_points.sort((a, b) => a[1] - b[1]);\n    return nums_with_points.map(a\
    \ => a[0]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpj21ls3rv.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj21ls3rv.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpr0amc22l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr0amc22l.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ Number(curr), 0);\n    const bSum = b.toString().split('').reduce((acc, curr)\
    \ => acc + Number(curr), 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1,\
    \ -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp6a3e24x8.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6a3e24x8.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let bSum = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpr0amc22l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr0amc22l.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    const aSum = a.toString().split('').reduce((acc, curr) => acc +\
    \ +curr, 0);\n    const bSum = b.toString().split('').reduce((acc, curr) => acc\
    \ + +curr, 0);\n    return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = order_by_points;\n  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1,\
    \ -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpxh7l6ek9.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh7l6ek9.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let aSum = a\n      .toString()\n      .split(\"\")\n      .reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n    let bSum = b\n      .toString()\n  \
    \    .split(\"\")\n      .reduce((acc, curr) => acc + parseInt(curr), 0);\n  \
    \  return aSum - bSum;\n  });\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp4_sgf8ux.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4_sgf8ux.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((sum, num) => sum\
    \ + parseInt(num), 0);\n        let bSum = b.toString().split('').reduce((sum,\
    \ num) => sum + parseInt(num), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn6232aub.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn6232aub.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + +cur,\
    \ 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmp290zw3ui.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp290zw3ui.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let sumA = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let sumB = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return sumA - sumB;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmph32xdujh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph32xdujh.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        let aSum = a.toString().split('').reduce((acc, cur) => acc\
    \ + parseInt(cur), 0);\n        let bSum = b.toString().split('').reduce((acc,\
    \ cur) => acc + parseInt(cur), 0);\n        return aSum - bSum;\n    });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmphqs6k7l7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphqs6k7l7.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((acc, num) => acc + parseInt(num),\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, num) => acc + parseInt(num),\
    \ 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpmmx1veff.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmmx1veff.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268038
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n    return nums.sort((a,\
    \ b) => {\n        const aSum = a.toString().split('').reduce((acc, curr) => acc\
    \ + parseInt(curr), 0);\n        const bSum = b.toString().split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0);\n        return aSum - bSum;\n    });\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = order_by_points;\n  assert.deepEqual(candidate([1,\
    \ 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n  assert.deepEqual(candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]),[0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, -11, -32, 43, 54, -98, 2, -3]),[-3, -32, -98,\
    \ -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpdntv4bfq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdntv4bfq.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Write a function which sorts the given array of integers\n\
    // in ascending order according to the sum of their digits.\n// Note: if there\
    \ are several items with similar sum of their digits,\n// order them based on\
    \ their index in original array.\n// For example:\n// >>> order_by_points([1,\
    \ 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n//\
    \ []\nfunction order_by_points(nums: number[]): number[] {\n  return nums.sort((a,\
    \ b) => {\n    let sumA = a.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    let sumB = b.toString().split('').reduce((acc, cur) => acc + parseInt(cur),\
    \ 0);\n    return sumA - sumB;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = order_by_points;\n\
    \  assert.deepEqual(candidate([1, 11, -1, -11, -12]),[-1, -11, 1, -12, 11]);\n\
    \  assert.deepEqual(candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]),[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]),[-3, -32, -98, -11, 1, 2, 43, 54]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n  assert.deepEqual(candidate([0,\
    \ 6, 6, -76, -21, 23, 4]),[-76, -21, 0, 4, 23, 6, 6]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 11, -1, -11, -12 ]\n\nshould equal\n\
    \n[ -1, -11, 1, -12, 11 ]\n    at test (/tmp/tmpn_h62di2.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn_h62di2.js:28:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 11, -1,\
    \ -11, -12 ],\n  expected: [ -1, -11, 1, -12, 11 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
