language: ts
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    // check if dict is empty\n    if (Object.keys(dict).length ===\
    \ 0) {\n        return false;\n    }\n    // check if all keys are lower case\n\
    \    if (Object.keys(dict).every(key => key === key.toLowerCase())) {\n      \
    \  return true;\n    }\n    // check if all keys are upper case\n    if (Object.keys(dict).every(key\
    \ => key === key.toUpperCase())) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpakkz7fn3.js:36:12)\n    at Object.<anonymous> (/tmp/tmpakkz7fn3.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isUpper = keys[0].toUpperCase() === keys[0];\n\
    \    for (let key of keys) {\n        if (isUpper && key.toUpperCase() !== key)\
    \ {\n            return false;\n        }\n        if (!isUpper && key.toLowerCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let upper = keys.every(key\
    \ => key.toUpperCase() === key);\n    let lower = keys.every(key => key.toLowerCase()\
    \ === key);\n    return upper || lower;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcpg688gt.js:27:12)\n    at Object.<anonymous> (/tmp/tmpcpg688gt.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys: string[] = Object.keys(dict);\n    let lower: boolean\
    \ = true;\n    let upper: boolean = true;\n    for (let i: number = 0; i < keys.length;\
    \ i++) {\n        if (keys[i] !== keys[i].toLowerCase()) {\n            lower\
    \ = false;\n        }\n        if (keys[i] !== keys[i].toUpperCase()) {\n    \
    \        upper = false;\n        }\n    }\n    return lower || upper;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2hydbdj4.js:35:12)\n    at Object.<anonymous> (/tmp/tmp2hydbdj4.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprctjkrbw.js:34:12)\n    at Object.<anonymous> (/tmp/tmprctjkrbw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowercase = true;\n    let uppercase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowercase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            uppercase\
    \ = false;\n        }\n    }\n    return lowercase || uppercase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmptjgupotr.js:37:12)\n    at Object.<anonymous> (/tmp/tmptjgupotr.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let upper = true;\n    let lower = true;\n    for (let key in\
    \ dict) {\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n    }\n    return upper || lower;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpruw0709q.js:34:12)\n    at Object.<anonymous> (/tmp/tmpruw0709q.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvub_3wny.js:34:12)\n    at Object.<anonymous> (/tmp/tmpvub_3wny.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lower = true;\n    let upper = true;\n\
    \    for (let key of keys) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo73rmbob.js:39:12)\n    at Object.<anonymous> (/tmp/tmpo73rmbob.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let upper = true;\n    let lower = true;\n    for (let key in dict)\
    \ {\n        if (key.toUpperCase() !== key) {\n            upper = false;\n  \
    \      }\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n    }\n    return upper || lower;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp20ke_yb2.js:37:12)\n    at Object.<anonymous> (/tmp/tmp20ke_yb2.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprctjkrbw.js:34:12)\n    at Object.<anonymous> (/tmp/tmprctjkrbw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let upperCase = true;\n    let lowerCase = true;\n    for (let key\
    \ in dict) {\n        if (key !== key.toUpperCase()) {\n            upperCase\
    \ = false;\n        }\n        if (key !== key.toLowerCase()) {\n            lowerCase\
    \ = false;\n        }\n    }\n    return upperCase || lowerCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8f3j3wf3.js:37:12)\n    at Object.<anonymous> (/tmp/tmp8f3j3wf3.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() === key) {\n            upper = false;\n\
    \        } else if (key.toUpperCase() === key) {\n            lower = false;\n\
    \        } else {\n            return false;\n        }\n    }\n    return lower\
    \ || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpert3mvne.js:37:12)\n    at Object.<anonymous> (/tmp/tmpert3mvne.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let isLower = false;\n    let isUpper = false;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() === key) {\n            isLower = true;\n\
    \        } else if (key.toUpperCase() === key) {\n            isUpper = true;\n\
    \        } else {\n            return false;\n        }\n    }\n    return isLower\
    \ || isUpper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5eeiotny.js:39:12)\n    at Object.<anonymous> (/tmp/tmp5eeiotny.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lowerCase = keys.every(key => key.toLowerCase()\
    \ === key);\n    let upperCase = keys.every(key => key.toUpperCase() === key);\n\
    \    return lowerCase || upperCase;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmwwbv6mk.js:30:12)\n    at Object.<anonymous> (/tmp/tmpmwwbv6mk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key === key.toLowerCase());\n    let upper = keys.every(key => key === key.toUpperCase());\n\
    \    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpignnv7xy.js:27:12)\n    at Object.<anonymous> (/tmp/tmpignnv7xy.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprctjkrbw.js:34:12)\n    at Object.<anonymous> (/tmp/tmprctjkrbw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isLowerCase: boolean = true;\n    let isUpperCase: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            isLowerCase = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            isUpperCase = false;\n        }\n    }\n    return isLowerCase\
    \ || isUpperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0k_kfc4u.js:34:12)\n    at Object.<anonymous> (/tmp/tmp0k_kfc4u.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5vwq5s0p.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5vwq5s0p.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprctjkrbw.js:34:12)\n    at Object.<anonymous> (/tmp/tmprctjkrbw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpko3g_tog.js:37:12)\n    at Object.<anonymous> (/tmp/tmpko3g_tog.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n  let lowerCase = true;\n  let upperCase = true;\n  for (let key\
    \ in dict) {\n    if (key.toLowerCase() !== key) {\n      lowerCase = false;\n\
    \    }\n    if (key.toUpperCase() !== key) {\n      upperCase = false;\n    }\n\
    \  }\n  return lowerCase || upperCase;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi9fs_x2o.js:34:12)\n    at Object.<anonymous> (/tmp/tmpi9fs_x2o.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() === key) {\n            upper = false;\n\
    \        } else if (key.toUpperCase() === key) {\n            lower = false;\n\
    \        } else {\n            return false;\n        }\n    }\n    return lower\
    \ || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpert3mvne.js:37:12)\n    at Object.<anonymous> (/tmp/tmpert3mvne.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isUpper = keys[0].toUpperCase() === keys[0];\n\
    \    for (let key of keys) {\n        if (isUpper && key.toUpperCase() !== key)\
    \ {\n            return false;\n        }\n        if (!isUpper && key.toLowerCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let upper = true;\n    let lower = true;\n    for (let key in\
    \ dict) {\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n    }\n    return upper || lower;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpruw0709q.js:34:12)\n    at Object.<anonymous> (/tmp/tmpruw0709q.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5vwq5s0p.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5vwq5s0p.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvub_3wny.js:34:12)\n    at Object.<anonymous> (/tmp/tmpvub_3wny.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let all_lower = true;\n    let all_upper = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            all_lower\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            all_upper\
    \ = false;\n        }\n    }\n    return all_lower || all_upper;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy1dqbve_.js:34:12)\n    at Object.<anonymous> (/tmp/tmpy1dqbve_.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5vwq5s0p.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5vwq5s0p.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() != key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() != key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqivqo4tr.js:34:12)\n    at Object.<anonymous> (/tmp/tmpqivqo4tr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let result: boolean = true;\n    let lowerCase: boolean = false;\n\
    \    let upperCase: boolean = false;\n    for (let key in dict) {\n        if\
    \ (key.toLowerCase() === key) {\n            lowerCase = true;\n        } else\
    \ if (key.toUpperCase() === key) {\n            upperCase = true;\n        } else\
    \ {\n            result = false;\n        }\n    }\n    if (lowerCase && upperCase)\
    \ {\n        result = false;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpscjgxka9.js:41:12)\n    at Object.<anonymous> (/tmp/tmpscjgxka9.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let isLowerCase = Object.keys(dict)[0] === Object.keys(dict)[0].toLowerCase();\n\
    \    for (let key in dict) {\n        if (isLowerCase && key !== key.toLowerCase())\
    \ {\n            return false;\n        }\n        if (!isLowerCase && key !==\
    \ key.toUpperCase()) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_z_unjar.js:36:12)\n    at Object.<anonymous> (/tmp/tmp_z_unjar.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n\
    \            upperCase = false;\n        } else {\n            lowerCase = false;\n\
    \        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplqi5tfi6.js:34:12)\n    at Object.<anonymous> (/tmp/tmplqi5tfi6.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprctjkrbw.js:34:12)\n    at Object.<anonymous> (/tmp/tmprctjkrbw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpko3g_tog.js:37:12)\n    at Object.<anonymous> (/tmp/tmpko3g_tog.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isUpperCase = true;\n    let isLowerCase = true;\n    for\
    \ (let key in dict) {\n        if (key.toUpperCase() !== key) {\n            isUpperCase\
    \ = false;\n        }\n        if (key.toLowerCase() !== key) {\n            isLowerCase\
    \ = false;\n        }\n    }\n    return isUpperCase || isLowerCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmps_i_cot5.js:34:12)\n    at Object.<anonymous> (/tmp/tmps_i_cot5.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpphid_48a.js:37:12)\n    at Object.<anonymous> (/tmp/tmpphid_48a.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = true;\n    let\
    \ upper = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (keys[i]\
    \ !== keys[i].toLowerCase()) {\n            lower = false;\n        }\n      \
    \  if (keys[i] !== keys[i].toUpperCase()) {\n            upper = false;\n    \
    \    }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy3__knxg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpy3__knxg.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower_case = true;\n    let upper_case = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lower_case\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upper_case\
    \ = false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmdeh21sz.js:37:12)\n    at Object.<anonymous> (/tmp/tmpmdeh21sz.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5vwq5s0p.js:27:12)\n    at Object.<anonymous> (/tmp/tmp5vwq5s0p.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isLowerCase = keys[0] === keys[0].toLowerCase();\n\
    \    for (let i = 1; i < keys.length; i++) {\n        if (isLowerCase && keys[i]\
    \ !== keys[i].toLowerCase()) {\n            return false;\n        }\n       \
    \ if (!isLowerCase && keys[i] !== keys[i].toUpperCase()) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpc9fhkuq4.js:37:12)\n    at Object.<anonymous> (/tmp/tmpc9fhkuq4.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = false;\n    let upper: boolean = false;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n     \
    \       lower = true;\n        } else if (key.toUpperCase() === key) {\n     \
    \       upper = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbfc7ibd8.js:36:12)\n    at Object.<anonymous> (/tmp/tmpbfc7ibd8.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length == 0) {\n\
    \        return false;\n    }\n    let isUpper = keys[0].toUpperCase() == keys[0];\n\
    \    for (let key of keys) {\n        if (isUpper) {\n            if (key.toUpperCase()\
    \ != key) {\n                return false;\n            }\n        } else {\n\
    \            if (key.toLowerCase() != key) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpphid_48a.js:37:12)\n    at Object.<anonymous> (/tmp/tmpphid_48a.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let upper: boolean = false;\n    let lower: boolean = false;\n\
    \    for (let key in dict) {\n        if (key.toUpperCase() === key) {\n     \
    \       upper = true;\n        } else if (key.toLowerCase() === key) {\n     \
    \       lower = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return upper !== lower;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let result: boolean = true;\n    let lowerCase: boolean = true;\n\
    \    let upperCase: boolean = true;\n    for (let key in dict) {\n        if (key.toLowerCase()\
    \ !== key) {\n            lowerCase = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upperCase = false;\n        }\n    }\n    if (lowerCase\
    \ === false && upperCase === false) {\n        result = false;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv3th9l_e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpv3th9l_e.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let is_lower = keys[0].toLowerCase() === keys[0];\n\
    \    for (let key of keys) {\n        if (is_lower && key.toLowerCase() !== key)\
    \ {\n            return false;\n        }\n        if (!is_lower && key.toUpperCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5pi6jidh.js:38:12)\n    at Object.<anonymous> (/tmp/tmp5pi6jidh.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isLower = keys[0] === keys[0].toLowerCase();\n\
    \    for (let key of keys) {\n        if (isLower) {\n            if (key !==\
    \ key.toLowerCase()) {\n                return false;\n            }\n       \
    \ } else {\n            if (key !== key.toUpperCase()) {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpk718t2pu.js:42:12)\n    at Object.<anonymous> (/tmp/tmpk718t2pu.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let is_lower = false;\n    let is_upper = false;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() === key) {\n            is_lower =\
    \ true;\n        } else if (key.toUpperCase() === key) {\n            is_upper\
    \ = true;\n        } else {\n            return false;\n        }\n    }\n   \
    \ return is_lower || is_upper;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppy2qm_n9.js:39:12)\n    at Object.<anonymous> (/tmp/tmppy2qm_n9.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprctjkrbw.js:34:12)\n    at Object.<anonymous> (/tmp/tmprctjkrbw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lowerCase = keys.every(key\
    \ => key === key.toLowerCase());\n    let upperCase = keys.every(key => key ===\
    \ key.toUpperCase());\n    return lowerCase || upperCase;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp55o91rre.js:27:12)\n    at Object.<anonymous> (/tmp/tmp55o91rre.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isLower = true;\n    let isUpper = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            isLower =\
    \ false;\n        }\n        if (key.toUpperCase() !== key) {\n            isUpper\
    \ = false;\n        }\n    }\n    return isLower || isUpper;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1icj16h0.js:34:12)\n    at Object.<anonymous> (/tmp/tmp1icj16h0.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpphid_48a.js:37:12)\n    at Object.<anonymous> (/tmp/tmpphid_48a.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo5hqyor8.js:34:12)\n    at Object.<anonymous> (/tmp/tmpo5hqyor8.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lower = true;\n    let upper = true;\n\
    \    for (let i = 0; i < keys.length; i++) {\n        if (keys[i] !== keys[i].toLowerCase())\
    \ {\n            lower = false;\n        }\n        if (keys[i] !== keys[i].toUpperCase())\
    \ {\n            upper = false;\n        }\n    }\n    return lower || upper;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1kgsbutt.js:38:12)\n    at Object.<anonymous> (/tmp/tmp1kgsbutt.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let isLower = true;\n    let isUpper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            isLower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            isUpper = false;\n\
    \        }\n    }\n    return isLower || isUpper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprbmfenbb.js:37:12)\n    at Object.<anonymous> (/tmp/tmprbmfenbb.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isUpper = keys[0].toUpperCase() === keys[0];\n\
    \    for (let i = 0; i < keys.length; i++) {\n        if (isUpper && keys[i].toUpperCase()\
    \ !== keys[i]) {\n            return false;\n        }\n        if (!isUpper &&\
    \ keys[i].toLowerCase() !== keys[i]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = false;\n    let upper: boolean = false;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n     \
    \       lower = true;\n        } else if (key.toUpperCase() === key) {\n     \
    \       upper = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbfc7ibd8.js:36:12)\n    at Object.<anonymous> (/tmp/tmpbfc7ibd8.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvub_3wny.js:34:12)\n    at Object.<anonymous> (/tmp/tmpvub_3wny.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let first = keys[0];\n   \
    \ let isUpper = first.toUpperCase() === first;\n    for (let key of keys) {\n\
    \        if (isUpper && key.toUpperCase() !== key) {\n            return false;\n\
    \        }\n        if (!isUpper && key.toLowerCase() !== key) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9y63e52b.js:19\n    var isUpper = first.toUpperCase() === first;\n\
    \                        ^\n\nTypeError: Cannot read property 'toUpperCase' of\
    \ undefined\n    at check_dict_case (/tmp/tmp9y63e52b.js:19:25)\n    at test (/tmp/tmp9y63e52b.js:40:22)\n\
    \    at Object.<anonymous> (/tmp/tmp9y63e52b.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpphid_48a.js:37:12)\n    at Object.<anonymous> (/tmp/tmpphid_48a.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lowerCase = keys.every(key\
    \ => key.toLowerCase() === key);\n    let upperCase = keys.every(key => key.toUpperCase()\
    \ === key);\n    return lowerCase || upperCase;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp00usfnjv.js:27:12)\n    at Object.<anonymous> (/tmp/tmp00usfnjv.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo5hqyor8.js:34:12)\n    at Object.<anonymous> (/tmp/tmpo5hqyor8.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() != key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() != key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqivqo4tr.js:34:12)\n    at Object.<anonymous> (/tmp/tmpqivqo4tr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = keys.every(key\
    \ => key === key.toLowerCase());\n    let upper = keys.every(key => key === key.toUpperCase());\n\
    \    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpignnv7xy.js:27:12)\n    at Object.<anonymous> (/tmp/tmpignnv7xy.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case = true;\n    let upper_case = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lower_case\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upper_case\
    \ = false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgrqb43gs.js:34:12)\n    at Object.<anonymous> (/tmp/tmpgrqb43gs.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo5hqyor8.js:34:12)\n    at Object.<anonymous> (/tmp/tmpo5hqyor8.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpko3g_tog.js:37:12)\n    at Object.<anonymous> (/tmp/tmpko3g_tog.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let keys = Object.keys(dict);\n    let lowerCase = keys.every(key\
    \ => key === key.toLowerCase());\n    let upperCase = keys.every(key => key ===\
    \ key.toUpperCase());\n    return lowerCase || upperCase;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdj9k521u.js:30:12)\n    at Object.<anonymous> (/tmp/tmpdj9k521u.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268154
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = true;\n    let\
    \ upper = true;\n    for (let key of keys) {\n        if (key.toLowerCase() !==\
    \ key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpq1uufjnw.js:36:12)\n    at Object.<anonymous> (/tmp/tmpq1uufjnw.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isUpper = true;\n    let isLower = true;\n    for (let key\
    \ in dict) {\n        if (key.toUpperCase() !== key) {\n            isUpper =\
    \ false;\n        }\n        if (key.toLowerCase() !== key) {\n            isLower\
    \ = false;\n        }\n    }\n    return isUpper || isLower;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpuhw8gp6j.js:34:12)\n    at Object.<anonymous> (/tmp/tmpuhw8gp6j.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvub_3wny.js:34:12)\n    at Object.<anonymous> (/tmp/tmpvub_3wny.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() === key)\
    \ {\n            upper_case = false;\n        } else if (key.toUpperCase() ===\
    \ key) {\n            lower_case = false;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo09fh8f0.js:37:12)\n    at Object.<anonymous> (/tmp/tmpo09fh8f0.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isLower = keys.every(key\
    \ => key.toLowerCase() === key);\n    let isUpper = keys.every(key => key.toUpperCase()\
    \ === key);\n    return isLower || isUpper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7w3j1unw.js:27:12)\n    at Object.<anonymous> (/tmp/tmp7w3j1unw.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lower = keys.every(key => key === key.toLowerCase());\n\
    \    let upper = keys.every(key => key === key.toUpperCase());\n    return lower\
    \ || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxfz4ffu1.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxfz4ffu1.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isLower = keys.every(key\
    \ => key === key.toLowerCase());\n    let isUpper = keys.every(key => key ===\
    \ key.toUpperCase());\n    return isLower || isUpper;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprmdazrb5.js:27:12)\n    at Object.<anonymous> (/tmp/tmprmdazrb5.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprctjkrbw.js:34:12)\n    at Object.<anonymous> (/tmp/tmprctjkrbw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isUpper = keys[0].toUpperCase()\
    \ === keys[0];\n    return keys.every(key => key.toUpperCase() === key === isUpper);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmputgl6llk.js:27:12)\n    at Object.<anonymous> (/tmp/tmputgl6llk.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower: boolean = false;\n    let upper: boolean = false;\n   \
    \ for (let key in dict) {\n        if (key.toLowerCase() === key) {\n        \
    \    lower = true;\n        } else if (key.toUpperCase() === key) {\n        \
    \    upper = true;\n        } else {\n            return false;\n        }\n \
    \   }\n    return lower !== upper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwszwiilm.js:40:12)\n    at Object.<anonymous> (/tmp/tmpwszwiilm.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isUpper = keys[0].toUpperCase()\
    \ === keys[0];\n    for (let key of keys) {\n        if (isUpper) {\n        \
    \    if (key.toUpperCase() !== key) {\n                return false;\n       \
    \     }\n        } else {\n            if (key.toLowerCase() !== key) {\n    \
    \            return false;\n            }\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpho59ekqr.js:18\n    var isUpper = keys[0].toUpperCase() === keys[0];\n\
    \                          ^\n\nTypeError: Cannot read property 'toUpperCase'\
    \ of undefined\n    at check_dict_case (/tmp/tmpho59ekqr.js:18:27)\n    at test\
    \ (/tmp/tmpho59ekqr.js:43:22)\n    at Object.<anonymous> (/tmp/tmpho59ekqr.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvub_3wny.js:34:12)\n    at Object.<anonymous> (/tmp/tmpvub_3wny.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = false;\n    let upper: boolean = false;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n     \
    \       lower = true;\n        } else if (key.toUpperCase() === key) {\n     \
    \       upper = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbfc7ibd8.js:36:12)\n    at Object.<anonymous> (/tmp/tmpbfc7ibd8.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpphid_48a.js:37:12)\n    at Object.<anonymous> (/tmp/tmpphid_48a.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvub_3wny.js:34:12)\n    at Object.<anonymous> (/tmp/tmpvub_3wny.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvub_3wny.js:34:12)\n    at Object.<anonymous> (/tmp/tmpvub_3wny.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isUpper = true;\n    let isLower = true;\n    for (let key\
    \ in dict) {\n        if (key.toUpperCase() !== key) {\n            isUpper =\
    \ false;\n        }\n        if (key.toLowerCase() !== key) {\n            isLower\
    \ = false;\n        }\n    }\n    return isUpper || isLower;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpuhw8gp6j.js:34:12)\n    at Object.<anonymous> (/tmp/tmpuhw8gp6j.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprctjkrbw.js:34:12)\n    at Object.<anonymous> (/tmp/tmprctjkrbw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerKeys: string[] = [];\n    let upperKeys: string[] =\
    \ [];\n    for (let key in dict) {\n        if (key.toLowerCase() === key) {\n\
    \            lowerKeys.push(key);\n        } else {\n            upperKeys.push(key);\n\
    \        }\n    }\n    return lowerKeys.length === Object.keys(dict).length ||\
    \ upperKeys.length === Object.keys(dict).length;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1be_rkq3.js:34:12)\n    at Object.<anonymous> (/tmp/tmp1be_rkq3.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = true;\n    let\
    \ upper = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (keys[i]\
    \ !== keys[i].toLowerCase()) {\n            lower = false;\n        }\n      \
    \  if (keys[i] !== keys[i].toUpperCase()) {\n            upper = false;\n    \
    \    }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy3__knxg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpy3__knxg.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpko3g_tog.js:37:12)\n    at Object.<anonymous> (/tmp/tmpko3g_tog.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo5hqyor8.js:34:12)\n    at Object.<anonymous> (/tmp/tmpo5hqyor8.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpphid_48a.js:37:12)\n    at Object.<anonymous> (/tmp/tmpphid_48a.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpko3g_tog.js:37:12)\n    at Object.<anonymous> (/tmp/tmpko3g_tog.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let isLowerCase = true;\n    let isUpperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            isLowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            isUpperCase\
    \ = false;\n        }\n    }\n    return isLowerCase || isUpperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp622x1vv_.js:37:12)\n    at Object.<anonymous> (/tmp/tmp622x1vv_.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = true;\n    let\
    \ upper = true;\n    for (let key of keys) {\n        if (key.toLowerCase() !==\
    \ key) {\n            lower = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper = false;\n        }\n    }\n    return lower ||\
    \ upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpq1uufjnw.js:36:12)\n    at Object.<anonymous> (/tmp/tmpq1uufjnw.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isUpper = keys[0].toUpperCase()\
    \ === keys[0];\n    for (let key of keys) {\n        if (isUpper && key.toUpperCase()\
    \ !== key) {\n            return false;\n        }\n        if (!isUpper && key.toLowerCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp37b92xy0.js:18\n    var isUpper = keys[0].toUpperCase() === keys[0];\n\
    \                          ^\n\nTypeError: Cannot read property 'toUpperCase'\
    \ of undefined\n    at check_dict_case (/tmp/tmp37b92xy0.js:18:27)\n    at test\
    \ (/tmp/tmp37b92xy0.js:39:22)\n    at Object.<anonymous> (/tmp/tmp37b92xy0.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() != key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() != key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqivqo4tr.js:34:12)\n    at Object.<anonymous> (/tmp/tmpqivqo4tr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() === key)\
    \ {\n            upper_case = false;\n        } else if (key.toUpperCase() ===\
    \ key) {\n            lower_case = false;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo09fh8f0.js:37:12)\n    at Object.<anonymous> (/tmp/tmpo09fh8f0.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvub_3wny.js:34:12)\n    at Object.<anonymous> (/tmp/tmpvub_3wny.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() != key) {\n      \
    \      lower = false;\n        }\n        if (key.toUpperCase() != key) {\n  \
    \          upper = false;\n        }\n    }\n    return lower || upper;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0ikdv3e_.js:34:12)\n    at Object.<anonymous> (/tmp/tmp0ikdv3e_.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lowerCase = true;\n  \
    \  let upperCase = true;\n    for (let i = 0; i < keys.length; i++) {\n      \
    \  if (keys[i] !== keys[i].toLowerCase()) {\n            lowerCase = false;\n\
    \        }\n        if (keys[i] !== keys[i].toUpperCase()) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpedixip_b.js:35:12)\n    at Object.<anonymous> (/tmp/tmpedixip_b.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpphid_48a.js:37:12)\n    at Object.<anonymous> (/tmp/tmpphid_48a.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowercase = true;\n    let uppercase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() === key) {\n            uppercase\
    \ = false;\n        } else if (key.toUpperCase() === key) {\n            lowercase\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return lowercase || uppercase;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6_df1hb4.js:37:12)\n    at Object.<anonymous> (/tmp/tmp6_df1hb4.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let is_all_lower = true;\n    let is_all_upper = true;\n    for\
    \ (let key in dict) {\n        if (key.toLowerCase() !== key) {\n            is_all_lower\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            is_all_upper\
    \ = false;\n        }\n    }\n    return is_all_lower || is_all_upper;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp48pdwkfu.js:34:12)\n    at Object.<anonymous> (/tmp/tmp48pdwkfu.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isLower = keys[0] === keys[0].toLowerCase();\n\
    \    for (let key of keys) {\n        if (isLower && key !== key.toLowerCase())\
    \ {\n            return false;\n        }\n        if (!isLower && key !== key.toUpperCase())\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8kh5nvkx.js:38:12)\n    at Object.<anonymous> (/tmp/tmp8kh5nvkx.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case = true;\n    let upper_case = true;\n    for (let\
    \ key in dict) {\n        if (lower_case && key.toLowerCase() !== key) {\n   \
    \         lower_case = false;\n        }\n        if (upper_case && key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmxkw7myy.js:34:12)\n    at Object.<anonymous> (/tmp/tmpmxkw7myy.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    const lowerCase = Object.keys(dict).every(key => key === key.toLowerCase());\n\
    \    const upperCase = Object.keys(dict).every(key => key === key.toUpperCase());\n\
    \    return lowerCase || upperCase;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdi4f1vd7.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdi4f1vd7.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let lower = true;\n    let\
    \ upper = true;\n    for (let i = 0; i < keys.length; i++) {\n        if (keys[i]\
    \ !== keys[i].toLowerCase()) {\n            lower = false;\n        }\n      \
    \  if (keys[i] !== keys[i].toUpperCase()) {\n            upper = false;\n    \
    \    }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy3__knxg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpy3__knxg.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = false;\n    let upper_case: boolean\
    \ = false;\n    for (let key in dict) {\n        if (key.toLowerCase() === key)\
    \ {\n            lower_case = true;\n        } else if (key.toUpperCase() ===\
    \ key) {\n            upper_case = true;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbppafnu7.js:36:12)\n    at Object.<anonymous> (/tmp/tmpbppafnu7.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprctjkrbw.js:34:12)\n    at Object.<anonymous> (/tmp/tmprctjkrbw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpko3g_tog.js:37:12)\n    at Object.<anonymous> (/tmp/tmpko3g_tog.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpko3g_tog.js:37:12)\n    at Object.<anonymous> (/tmp/tmpko3g_tog.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let isUpper = keys[0].toUpperCase()\
    \ === keys[0];\n    let isLower = keys[0].toLowerCase() === keys[0];\n    for\
    \ (let key of keys) {\n        if (isUpper && key.toUpperCase() !== key) {\n \
    \           return false;\n        }\n        if (isLower && key.toLowerCase()\
    \ !== key) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqpz8ffzj.js:37:12)\n    at Object.<anonymous> (/tmp/tmpqpz8ffzj.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isLowerCase = keys[0] === keys[0].toLowerCase();\n\
    \    for (let i = 1; i < keys.length; i++) {\n        if (isLowerCase) {\n   \
    \         if (keys[i] !== keys[i].toLowerCase()) {\n                return false;\n\
    \            }\n        } else {\n            if (keys[i] !== keys[i].toUpperCase())\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp517326jj.js:41:12)\n    at Object.<anonymous> (/tmp/tmp517326jj.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lowerCase = true;\n    let upperCase = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpko3g_tog.js:37:12)\n    at Object.<anonymous> (/tmp/tmpko3g_tog.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let isLower = true;\n    let isUpper = true;\n    for (let key\
    \ in dict) {\n        if (key.toLowerCase() !== key) {\n            isLower =\
    \ false;\n        }\n        if (key.toUpperCase() !== key) {\n            isUpper\
    \ = false;\n        }\n    }\n    return isLower || isUpper;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\"\
    , \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1icj16h0.js:34:12)\n    at Object.<anonymous> (/tmp/tmp1icj16h0.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    // TODO: Implement this function\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpn2zqoxjl.js:23:12)\n    at Object.<anonymous> (/tmp/tmpn2zqoxjl.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let isUpper = keys[0].toUpperCase() === keys[0];\n\
    \    for (let i = 0; i < keys.length; i++) {\n        if (isUpper) {\n       \
    \     if (keys[i].toUpperCase() !== keys[i]) {\n                return false;\n\
    \            }\n        } else {\n            if (keys[i].toLowerCase() !== keys[i])\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower: boolean = true;\n    let upper: boolean = true;\n\
    \    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo5hqyor8.js:34:12)\n    at Object.<anonymous> (/tmp/tmpo5hqyor8.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let allUpper = true;\n    let allLower = true;\n    for (let\
    \ key in dict) {\n        if (key.toUpperCase() === key) {\n            allLower\
    \ = false;\n        } else if (key.toLowerCase() === key) {\n            allUpper\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return allUpper || allLower;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpp5naivpl.js:41:12)\n    at Object.<anonymous> (/tmp/tmpp5naivpl.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase: boolean = true;\n    let upperCase: boolean =\
    \ true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key) {\n\
    \            lowerCase = false;\n        }\n        if (key.toUpperCase() !==\
    \ key) {\n            upperCase = false;\n        }\n    }\n    return lowerCase\
    \ || upperCase;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprctjkrbw.js:34:12)\n    at Object.<anonymous> (/tmp/tmprctjkrbw.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lower = true;\n    let upper = true;\n\
    \    for (let key of keys) {\n        if (key.toLowerCase() !== key) {\n     \
    \       lower = false;\n        }\n        if (key.toUpperCase() !== key) {\n\
    \            upper = false;\n        }\n    }\n    return lower || upper;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo73rmbob.js:39:12)\n    at Object.<anonymous> (/tmp/tmpo73rmbob.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() != key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() != key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqivqo4tr.js:34:12)\n    at Object.<anonymous> (/tmp/tmpqivqo4tr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let lower = true;\n    let upper = true;\n    for (let key in dict)\
    \ {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n  \
    \      }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpphid_48a.js:37:12)\n    at Object.<anonymous> (/tmp/tmpphid_48a.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    let upper = keys.every(key\
    \ => key.toUpperCase() === key);\n    let lower = keys.every(key => key.toLowerCase()\
    \ === key);\n    return upper || lower;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcpg688gt.js:27:12)\n    at Object.<anonymous> (/tmp/tmpcpg688gt.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let is_lower = keys[0].toLowerCase() === keys[0];\n\
    \    for (let key of keys) {\n        if (is_lower) {\n            if (key.toLowerCase()\
    \ !== key) {\n                return false;\n            }\n        } else {\n\
    \            if (key.toUpperCase() !== key) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpe2mfddet.js:42:12)\n    at Object.<anonymous> (/tmp/tmpe2mfddet.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCaseKeys = Object.keys(dict).filter(key => key.toLowerCase()\
    \ === key);\n    let upperCaseKeys = Object.keys(dict).filter(key => key.toUpperCase()\
    \ === key);\n    return lowerCaseKeys.length === Object.keys(dict).length || upperCaseKeys.length\
    \ === Object.keys(dict).length;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = check_dict_case;\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\": \"banana\"}),true);\n\
    \  assert.deepEqual(candidate({\"p\": \"pineapple\", \"A\": \"banana\", \"B\"\
    : \"banana\"}),false);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkdguxqgq.js:26:12)\n    at Object.<anonymous> (/tmp/tmpkdguxqgq.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let keys = Object.keys(dict);\n    if (keys.length === 0) {\n\
    \        return false;\n    }\n    let lower = keys.every(key => key === key.toLowerCase());\n\
    \    let upper = keys.every(key => key === key.toUpperCase());\n    return lower\
    \ || upper;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxfz4ffu1.js:30:12)\n    at Object.<anonymous> (/tmp/tmpxfz4ffu1.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case: boolean = true;\n    let upper_case: boolean\
    \ = true;\n    for (let key in dict) {\n        if (key.toLowerCase() !== key)\
    \ {\n            lower_case = false;\n        }\n        if (key.toUpperCase()\
    \ !== key) {\n            upper_case = false;\n        }\n    }\n    return lower_case\
    \ || upper_case;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvub_3wny.js:34:12)\n    at Object.<anonymous> (/tmp/tmpvub_3wny.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower = true;\n    let upper = true;\n    for (let key in\
    \ dict) {\n        if (key.toLowerCase() !== key) {\n            lower = false;\n\
    \        }\n        if (key.toUpperCase() !== key) {\n            upper = false;\n\
    \        }\n    }\n    return lower || upper;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = check_dict_case;\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"b\"\
    : \"banana\"}),true);\n  assert.deepEqual(candidate({\"p\": \"pineapple\", \"\
    A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpopw7iutl.js:34:12)\n    at Object.<anonymous> (/tmp/tmpopw7iutl.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lower_case = true;\n    let upper_case = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lower_case\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upper_case\
    \ = false;\n        }\n    }\n    return lower_case || upper_case;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgrqb43gs.js:34:12)\n    at Object.<anonymous> (/tmp/tmpgrqb43gs.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268155
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given an object, return true if all keys are strings\
    \ in lower \n// case or all keys are strings in upper case, else return false.\n\
    // The function should return false is the given object is empty.\n// Examples:\n\
    // >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>>\
    \ check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n\
    // false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"\
    })\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"\
    City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"\
    ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}):\
    \ boolean {\n    let lowerCase = true;\n    let upperCase = true;\n    for (let\
    \ key in dict) {\n        if (key.toLowerCase() !== key) {\n            lowerCase\
    \ = false;\n        }\n        if (key.toUpperCase() !== key) {\n            upperCase\
    \ = false;\n        }\n    }\n    return lowerCase || upperCase;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"p\":\
    \ \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
    p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"\
    fruit\": \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv2z4bawv.js:34:12)\n    at Object.<anonymous> (/tmp/tmpv2z4bawv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
