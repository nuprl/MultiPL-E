language: ts
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpx_ly4u9p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpx_ly4u9p.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpx_ly4u9p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpx_ly4u9p.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpr0ihd8tx.js:14:12)\n    at Object.<anonymous> (/tmp/tmpr0ihd8tx.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(is_integer);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr11nqnm8.js:8\n    return values.filter(is_integer);\n        \
    \                 ^\n\nReferenceError: is_integer is not defined\n    at filter_integers\
    \ (/tmp/tmpr11nqnm8.js:8:26)\n    at test (/tmp/tmpr11nqnm8.js:13:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpr11nqnm8.js:17:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpr0ihd8tx.js:14:12)\n    at Object.<anonymous> (/tmp/tmpr0ihd8tx.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpx_ly4u9p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpx_ly4u9p.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpr0ihd8tx.js:14:12)\n    at Object.<anonymous> (/tmp/tmpr0ihd8tx.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(is_integer);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr11nqnm8.js:8\n    return values.filter(is_integer);\n        \
    \                 ^\n\nReferenceError: is_integer is not defined\n    at filter_integers\
    \ (/tmp/tmpr11nqnm8.js:8:26)\n    at test (/tmp/tmpr11nqnm8.js:13:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpr11nqnm8.js:17:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    let result: number[] = [];\n    for (let i = 0; i < values.length;\
    \ i++) {\n        if (typeof values[i] === \"number\") {\n            result.push(values[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = filter_integers;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4, {}, [],\
    \ 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpxlw09uk6.js:20:12)\n    at Object.<anonymous> (/tmp/tmpxlw09uk6.js:23:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && value % 1 === 0;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value: any): boolean {\n    \
    \    return typeof value === \"number\" && value % 1 === 0;\n    });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => Number.isInteger(value));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpx_ly4u9p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpx_ly4u9p.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Number.isInteger(v));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpx_ly4u9p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpx_ly4u9p.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpr0ihd8tx.js:14:12)\n    at Object.<anonymous> (/tmp/tmpr0ihd8tx.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && Math.floor(v)\
    \ === v);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpr0ihd8tx.js:14:12)\n    at Object.<anonymous> (/tmp/tmpr0ihd8tx.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(v => typeof v === \"number\" && v % 1 ===\
    \ 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpx_ly4u9p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpx_ly4u9p.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && Number.isInteger(value));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !Number.isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpnppu3uep.js:14:12)\n    at Object.<anonymous> (/tmp/tmpnppu3uep.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ !isNaN(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 23.2, 9 ]\n\nshould equal\n\n[ 4, 9\
    \ ]\n    at test (/tmp/tmpx_ly4u9p.js:14:12)\n    at Object.<anonymous> (/tmp/tmpx_ly4u9p.js:17:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 4, 23.2, 9 ],\n  expected: [ 4, 9 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n  return values.filter(value => typeof value === \"number\" && value\
    \ % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && value % 1 === 0;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
    \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
    , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ value % 1 === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(value => typeof value === \"number\" &&\
    \ Number.isInteger(value));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Filter given array of any tsthon values only for integers\n\
    // >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2,\
    \ 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]):\
    \ number[] {\n    return values.filter(function (value) {\n        return typeof\
    \ value === \"number\" && Number.isInteger(value);\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
    \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
