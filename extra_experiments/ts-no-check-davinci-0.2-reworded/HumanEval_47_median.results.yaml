language: ts
name: HumanEval_47_median
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let length = sorted.length;\n    if (length % 2 === 0) {\n \
    \       return (sorted[length / 2 - 1] + sorted[length / 2]) / 2;\n    } else\
    \ {\n        return sorted[(length - 1) / 2];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m] + l[m -\
    \ 1]) / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp844gwqv2.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp844gwqv2.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort(function(a,\
    \ b) {\n        return a - b;\n    });\n    let mid = Math.floor(sorted.length\
    \ / 2);\n    if (sorted.length % 2 == 0) {\n        return (sorted[mid - 1] +\
    \ sorted[mid]) / 2;\n    } else {\n        return sorted[mid];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    if (l.length === 0) {\n  \
    \      return 0;\n    }\n    const sorted = l.sort((a, b) => a - b);\n    const\
    \ mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0) {\n \
    \       return (sorted[mid - 1] + sorted[mid]) / 2;\n    }\n    return sorted[mid];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpxvu8vpiq.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxvu8vpiq.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    if (l.length === 0) {\n  \
    \      return 0;\n    }\n    l.sort();\n    if (l.length % 2 === 0) {\n      \
    \  return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    } else {\n       \
    \ return l[Math.floor(l.length / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpbtt7hdaq.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbtt7hdaq.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let len = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len -\
    \ 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpzplrhhma.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzplrhhma.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0)\
    \ {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n     \
    \   return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpjn1oag4b.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjn1oag4b.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let len = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len -\
    \ 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpc0bq42n5.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc0bq42n5.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    const sorted = l.sort((a,\
    \ b) => a - b);\n    const middle = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n  \
    \  } else {\n        return sorted[middle];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[Math.floor(n / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp82mwdbvc.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp82mwdbvc.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let len = sorted.length;\n    if (len % 2 === 0) {\n       \
    \ return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return\
    \ sorted[(len - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort(function(a,\
    \ b) {return a - b});\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    if (l.length === 0) {\n  \
    \      return 0;\n    }\n    l.sort();\n    let mid = Math.floor(l.length / 2);\n\
    \    if (l.length % 2 === 0) {\n        return (l[mid] + l[mid - 1]) / 2;\n  \
    \  } else {\n        return l[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpov53y3a7.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpov53y3a7.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n  let sorted = l.sort((a, b) =>\
    \ a - b);\n  let mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2\
    \ === 0) {\n    return (sorted[mid] + sorted[mid - 1]) / 2;\n  } else {\n    return\
    \ sorted[mid];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    const sorted = l.sort((a,\
    \ b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let m = l.length / 2;\n  \
    \  if (l.length % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else\
    \ {\n        return l[Math.floor(m)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpnze5sar6.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnze5sar6.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.sort();\n    let\
    \ mid = Math.floor(l2.length / 2);\n    if (l2.length % 2 == 0) {\n        return\
    \ (l2[mid] + l2[mid - 1]) / 2;\n    } else {\n        return l2[mid];\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpjkv0x0p7.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjkv0x0p7.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.slice();\n    l2.sort();\n\
    \    let n = l2.length;\n    if (n % 2 == 0) {\n        return (l2[n / 2 - 1]\
    \ + l2[n / 2]) / 2;\n    } else {\n        return l2[Math.floor(n / 2)];\n   \
    \ }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpb11yuwoi.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb11yuwoi.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[Math.floor(n / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp82mwdbvc.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp82mwdbvc.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let len = sorted.length;\n    if (len % 2 == 0) {\n        return\
    \ (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len\
    \ - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    l.sort();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else\
    \ {\n        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmp31gcn78e.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmp31gcn78e.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let mid = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 === 0)\
    \ {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else {\n     \
    \   return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpjn1oag4b.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjn1oag4b.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    const sorted = l.sort((a,\
    \ b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n == 0) {\n        return 0;\n    }\n    let sorted = l.sort((a, b) => a -\
    \ b);\n    if (n % 2 == 0) {\n        return (sorted[n / 2 - 1] + sorted[n / 2])\
    \ / 2;\n    } else {\n        return sorted[(n - 1) / 2];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp9usq1ulj.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9usq1ulj.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268156
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n  let n = l.length;\n  if (n ===\
    \ 0) {\n    return 0;\n  }\n  let m = n / 2;\n  if (n % 2 === 0) {\n    return\
    \ (l[m - 1] + l[m]) / 2;\n  } else {\n    return l[Math.floor(m)];\n  }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpal8l2s7d.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpal8l2s7d.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268156
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let m = l.length / 2;\n  \
    \  return (l.length % 2 === 0) ? (l[m - 1] + l[m]) / 2 : l[Math.floor(m)];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp9hqj839i.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9hqj839i.js:20:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp9usq1ulj.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9usq1ulj.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268156
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let middle = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[middle - 1] + sorted[middle]) / 2;\n    } else\
    \ {\n        return sorted[middle];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmp7tuu5i3v.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7tuu5i3v.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.sort();\n    let\
    \ mid = l2.length / 2;\n    if (l2.length % 2 == 0) {\n        return (l2[mid]\
    \ + l2[mid - 1]) / 2;\n    } else {\n        return l2[Math.floor(mid)];\n   \
    \ }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpk59d0l_6.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk59d0l_6.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.sort((a, b) =>\
    \ a - b);\n    let mid = Math.floor(l2.length / 2);\n    if (l2.length % 2 ==\
    \ 0) {\n        return (l2[mid] + l2[mid - 1]) / 2;\n    } else {\n        return\
    \ l2[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let len = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len -\
    \ 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpc0bq42n5.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc0bq42n5.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    if (l.length === 0) {\n  \
    \      return 0;\n    }\n    l.sort();\n    if (l.length % 2 === 0) {\n      \
    \  return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    } else {\n       \
    \ return l[Math.floor(l.length / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpbtt7hdaq.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbtt7hdaq.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let len = sorted.length;\n    if (len % 2 === 0) {\n       \
    \ return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return\
    \ sorted[(len - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    return sorted.length\
    \ % 2 === 0 ? (sorted[mid] + sorted[mid - 1]) / 2 : sorted[mid];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = sorted.length / 2;\n    if (sorted.length % 2 ===\
    \ 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n  \
    \      return sorted[Math.floor(mid)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    const sorted = l.sort((a,\
    \ b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    return sorted.length\
    \ % 2 === 0 ? (sorted[mid] + sorted[mid - 1]) / 2 : sorted[mid];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let length = sorted.length;\n    if (length % 2 === 0) {\n \
    \       return (sorted[length / 2 - 1] + sorted[length / 2]) / 2;\n    } else\
    \ {\n        return sorted[Math.floor(length / 2)];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n  let sorted = l.sort((a, b) =>\
    \ a - b);\n  let mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2\
    \ === 0) {\n    return (sorted[mid] + sorted[mid - 1]) / 2;\n  } else {\n    return\
    \ sorted[mid];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp9usq1ulj.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9usq1ulj.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268156
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    if (l.length == 0) {\n   \
    \     return 0;\n    }\n    let sorted = l.sort((a, b) => a - b);\n    let mid\
    \ = Math.floor(sorted.length / 2);\n    if (sorted.length % 2 == 0) {\n      \
    \  return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else {\n        return sorted[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l_sorted = l.sort((a,\
    \ b) => a - b);\n    let l_len = l_sorted.length;\n    if (l_len % 2 === 0) {\n\
    \        return (l_sorted[l_len / 2 - 1] + l_sorted[l_len / 2]) / 2;\n    } else\
    \ {\n        return l_sorted[Math.floor(l_len / 2)];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[Math.floor(n / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp82mwdbvc.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp82mwdbvc.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let len = sorted.length;\n    if (len % 2 === 0) {\n       \
    \ return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return\
    \ sorted[(len - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    l.sort((a, b) => a - b);\n\
    \    let mid = Math.floor(l.length / 2);\n    if (l.length % 2 == 0) {\n     \
    \   return (l[mid] + l[mid - 1]) / 2;\n    } else {\n        return l[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n  let l2 = l.sort();\n  let mid\
    \ = Math.floor(l2.length / 2);\n  if (l2.length % 2 == 0) {\n    return (l2[mid]\
    \ + l2[mid - 1]) / 2;\n  } else {\n    return l2[mid];\n  }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmp5x5sjgjz.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5x5sjgjz.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l1 = l.sort();\n    let\
    \ n = l1.length;\n    if (n % 2 == 0) {\n        return (l1[n / 2] + l1[n / 2\
    \ - 1]) / 2;\n    } else {\n        return l1[(n - 1) / 2];\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmptg_pcjqc.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmptg_pcjqc.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    return sorted.length\
    \ % 2 == 0 ? (sorted[mid] + sorted[mid - 1]) / 2 : sorted[mid];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let m = l.length / 2;\n  \
    \  return l.length % 2 === 0 ? (l[m - 1] + l[m]) / 2 : l[Math.floor(m)];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpn_sl4_hi.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn_sl4_hi.js:20:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[Math.floor(n / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp82mwdbvc.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp82mwdbvc.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.sort(function(a,\
    \ b) { return a - b; });\n    let mid = Math.floor(l2.length / 2);\n    if (l2.length\
    \ % 2 == 0) {\n        return (l2[mid - 1] + l2[mid]) / 2;\n    } else {\n   \
    \     return l2[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n  let n = l.length;\n  let m =\
    \ n / 2;\n  if (n % 2 == 0) {\n    return (l[m - 1] + l[m]) / 2;\n  } else {\n\
    \    return l[Math.floor(m)];\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpiimjhle0.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiimjhle0.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.slice();\n    l2.sort(function(a,\
    \ b) {\n        return a - b;\n    });\n    let mid = Math.floor(l2.length / 2);\n\
    \    if (l2.length % 2 == 0) {\n        return (l2[mid - 1] + l2[mid]) / 2;\n\
    \    } else {\n        return l2[mid];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    if (l.length == 0) {\n   \
    \     return 0;\n    }\n    l.sort();\n    if (l.length % 2 == 0) {\n        return\
    \ (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n    } else {\n        return l[Math.floor(l.length\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpb0asepcg.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb0asepcg.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268157
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let m = l.length / 2;\n  \
    \  if (l.length % 2 == 0) {\n        return (l[m - 1] + l[m]) / 2;\n    } else\
    \ {\n        return l[Math.floor(m)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpnze5sar6.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnze5sar6.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let len = sorted.length;\n    if (len % 2 === 0) {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len -\
    \ 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpzplrhhma.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzplrhhma.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp9usq1ulj.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9usq1ulj.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268156
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.slice();\n    l2.sort();\n\
    \    let mid = Math.floor(l2.length / 2);\n    if (l2.length % 2 == 0) {\n   \
    \     return (l2[mid - 1] + l2[mid]) / 2;\n    } else {\n        return l2[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpu3rk98_v.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu3rk98_v.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 === 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpxvu8vpiq.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxvu8vpiq.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ sorted = l.sort((a, b) => a - b);\n    if (n % 2 == 0) {\n        return (sorted[n\
    \ / 2 - 1] + sorted[n / 2]) / 2;\n    } else {\n        return sorted[(n - 1)\
    \ / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[Math.floor(n / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp1fmk7l7i.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1fmk7l7i.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let len = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[Math.floor(len\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpgva1h4f3.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgva1h4f3.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l_sorted = l.sort((a,\
    \ b) => a - b);\n    let l_len = l_sorted.length;\n    if (l_len % 2 == 0) {\n\
    \        return (l_sorted[l_len / 2 - 1] + l_sorted[l_len / 2]) / 2;\n    } else\
    \ {\n        return l_sorted[Math.floor(l_len / 2)];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    if (l.length === 0) {\n  \
    \      return 0;\n    }\n    l.sort();\n    if (l.length % 2 === 0) {\n      \
    \  return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    } else {\n       \
    \ return l[(l.length - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpp7o11jbx.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp7o11jbx.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    return sorted.length\
    \ % 2 == 0 ? (sorted[mid] + sorted[mid - 1]) / 2 : sorted[mid];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.slice();\n    l2.sort(function(a,\
    \ b) { return a - b; });\n    let mid = Math.floor(l2.length / 2);\n    if (l2.length\
    \ % 2 == 0) {\n        return (l2[mid - 1] + l2[mid]) / 2;\n    } else {\n   \
    \     return l2[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.sort((a, b) =>\
    \ a - b);\n    let mid = Math.floor(l2.length / 2);\n    if (l2.length % 2 ==\
    \ 0) {\n        return (l2[mid] + l2[mid - 1]) / 2;\n    } else {\n        return\
    \ l2[mid];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268157
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n  let sorted = l.sort((a, b) =>\
    \ a - b);\n  let mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2\
    \ == 0) {\n    return (sorted[mid] + sorted[mid - 1]) / 2;\n  } else {\n    return\
    \ sorted[mid];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[Math.floor(n / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp82mwdbvc.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp82mwdbvc.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp9usq1ulj.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9usq1ulj.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268156
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let m = l.length / 2;\n  \
    \  return l.length % 2 == 0 ? (l[m - 1] + l[m]) / 2 : l[Math.floor(m)];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpjfuhucha.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjfuhucha.js:20:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n  let sorted = l.sort((a, b) =>\
    \ a - b);\n  let mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2\
    \ === 0) {\n    return (sorted[mid] + sorted[mid - 1]) / 2;\n  } else {\n    return\
    \ sorted[mid];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    const sorted = l.sort((a,\
    \ b) => a - b);\n    const mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid - 1] + sorted[mid]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp9usq1ulj.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9usq1ulj.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268156
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.slice();\n    l2.sort();\n\
    \    let mid = Math.floor(l2.length / 2);\n    if (l2.length % 2 === 0) {\n  \
    \      return (l2[mid] + l2[mid - 1]) / 2;\n    } else {\n        return l2[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmprjzw8vef.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmprjzw8vef.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ mid = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[mid - 1]\
    \ + l[mid]) / 2;\n    } else {\n        return l[mid];\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp4czq6bpn.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4czq6bpn.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.slice();\n    l2.sort();\n\
    \    let mid = Math.floor(l2.length / 2);\n    if (l2.length % 2 == 0) {\n   \
    \     return (l2[mid] + l2[mid - 1]) / 2;\n    } else {\n        return l2[mid];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpoue5567f.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoue5567f.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m] + l[m -\
    \ 1]) / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp844gwqv2.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp844gwqv2.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let length = sorted.length;\n    let mid = Math.floor(length / 2);\n    if\
    \ (length % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n \
    \   } else {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpho1xg7ok.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpho1xg7ok.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let len = sorted.length;\n    if (len % 2 === 0) {\n       \
    \ return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return\
    \ sorted[Math.floor(len / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    if (l.length === 0) {\n  \
    \      return 0;\n    }\n    l.sort();\n    if (l.length % 2 === 0) {\n      \
    \  return (l[l.length / 2 - 1] + l[l.length / 2]) / 2;\n    } else {\n       \
    \ return l[Math.floor(l.length / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpbtt7hdaq.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbtt7hdaq.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let length = sorted.length;\n    if (length % 2 === 0) {\n \
    \       return (sorted[length / 2 - 1] + sorted[length / 2]) / 2;\n    } else\
    \ {\n        return sorted[(length - 1) / 2];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let len = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len -\
    \ 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpc0bq42n5.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc0bq42n5.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[Math.floor(n / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp82mwdbvc.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp82mwdbvc.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m - 1] + l[m])\
    \ / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp9usq1ulj.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9usq1ulj.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268156
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let length = sorted.length;\n    if (length % 2 == 0) {\n        return (sorted[length\
    \ / 2] + sorted[length / 2 - 1]) / 2;\n    } else {\n        return sorted[Math.floor(length\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmp52sqeon0.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmp52sqeon0.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l_sorted = l.sort();\n\
    \    let l_len = l_sorted.length;\n    if (l_len % 2 == 0) {\n        return (l_sorted[l_len\
    \ / 2] + l_sorted[l_len / 2 - 1]) / 2;\n    } else {\n        return l_sorted[Math.floor(l_len\
    \ / 2)];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmp4bszvc7_.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4bszvc7_.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    if (l.length === 0) {\n  \
    \      return 0;\n    }\n    l.sort();\n    let mid = Math.floor(l.length / 2);\n\
    \    if (l.length % 2 === 0) {\n        return (l[mid] + l[mid - 1]) / 2;\n  \
    \  } else {\n        return l[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpov53y3a7.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpov53y3a7.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m] + l[m -\
    \ 1]) / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp844gwqv2.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp844gwqv2.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let len = sorted.length;\n    if (len % 2 === 0) {\n       \
    \ return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return\
    \ sorted[(len - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort();\n \
    \   let len = sorted.length;\n    if (len % 2 == 0) {\n        return (sorted[len\
    \ / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return sorted[(len -\
    \ 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpc0bq42n5.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc0bq42n5.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    // TODO\n    return 0;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2,\
    \ 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmphgz8d0yy.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmphgz8d0yy.js:20:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l_sorted = l.sort();\n\
    \    let l_len = l_sorted.length;\n    if (l_len % 2 === 0) {\n        return\
    \ (l_sorted[l_len / 2] + l_sorted[l_len / 2 - 1]) / 2;\n    } else {\n       \
    \ return l_sorted[Math.floor(l_len / 2)];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpr1wruwwk.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr1wruwwk.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 === 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpt2r8esgt.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt2r8esgt.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m] + l[m -\
    \ 1]) / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp844gwqv2.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp844gwqv2.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ m = Math.floor(n / 2);\n    if (n % 2 == 0) {\n        return (l[m] + l[m -\
    \ 1]) / 2;\n    } else {\n        return l[m];\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmp844gwqv2.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmp844gwqv2.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n  let sorted = l.sort((a, b) =>\
    \ a - b);\n  let mid = Math.floor(sorted.length / 2);\n  if (sorted.length % 2\
    \ === 0) {\n    return (sorted[mid] + sorted[mid - 1]) / 2;\n  } else {\n    return\
    \ sorted[mid];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    l.sort();\n    let mid = Math.floor(l.length\
    \ / 2);\n    if (l.length % 2 == 0) {\n        return (l[mid] + l[mid - 1]) /\
    \ 2;\n    } else {\n        return l[mid];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmplf89u0rw.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmplf89u0rw.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    return 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n\
    \  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n\
    \  assert.deepEqual(candidate([6, 5]),5.5);\n  assert.deepEqual(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n3\n    at test (/tmp/tmp56z64xjs.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmp56z64xjs.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let l2 = l.slice();\n    l2.sort();\n\
    \    let n = l2.length;\n    if (n % 2 == 0) {\n        return (l2[n / 2 - 1]\
    \ + l2[n / 2]) / 2;\n    } else {\n        return l2[Math.floor(n / 2)];\n   \
    \ }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmpb11yuwoi.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb11yuwoi.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    let\
    \ sorted = l.sort();\n    if (n % 2 == 0) {\n        return (sorted[n / 2 - 1]\
    \ + sorted[n / 2]) / 2;\n    } else {\n        return sorted[Math.floor(n / 2)];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmp_58k5flo.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_58k5flo.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 == 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let len = sorted.length;\n    if (len % 2 === 0) {\n       \
    \ return (sorted[len / 2 - 1] + sorted[len / 2]) / 2;\n    } else {\n        return\
    \ sorted[(len - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n  let len = l.length;\n  let mid\
    \ = Math.floor(len / 2);\n  let sorted = l.sort();\n  if (len % 2 === 0) {\n \
    \   return (sorted[mid] + sorted[mid - 1]) / 2;\n  } else {\n    return sorted[mid];\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = median;\n  assert.deepEqual(candidate([3,\
    \ 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10, 4, 6, 1000, 10, 20]),8.0);\n\
    \  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6, 5]),5.5);\n\
    \  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n510\n\nshould equal\n\n8\n    at test (/tmp/tmps1qfrdmn.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmps1qfrdmn.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 510,\n  expected: 8,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268162
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let sorted = l.sort((a, b)\
    \ => a - b);\n    let mid = Math.floor(sorted.length / 2);\n    if (sorted.length\
    \ % 2 === 0) {\n        return (sorted[mid] + sorted[mid - 1]) / 2;\n    } else\
    \ {\n        return sorted[mid];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return median of elements in the array l.\n// >>>\
    \ median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n//\
    \ 15.0\nfunction median(l: number[]): number {\n    let n = l.length;\n    if\
    \ (n % 2 == 0) {\n        return (l[n / 2 - 1] + l[n / 2]) / 2;\n    } else {\n\
    \        return l[(n - 1) / 2];\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = median;\n\
    \  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
    \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
    \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n3\n    at test (/tmp/tmpeckkhb6r.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeckkhb6r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
