language: ts
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    // TODO\n    return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n1\n    at test (/tmp/tmp09w4wxe7.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmp09w4wxe7.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    if (a % b == 0) {\n        return b;\n    } else {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    while (b > 0) {\n        let tmp = a % b;\n        a = b;\n        b\
    \ = tmp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    while (b !== 0) {\n        let tmp = a % b;\n        a = b;\n      \
    \  b = tmp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n  } else {\n \
    \   return greatest_common_divisor(a, b % a);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    let r = a % b;\n    while (r !== 0) {\n        a = b;\n        b =\
    \ r;\n        r = a % b;\n    }\n    return b;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n  } else {\n \
    \   return greatest_common_divisor(a, b % a);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a === b) {\n    return a;\n  }\n  if (a > b) {\n    return greatest_common_divisor(a\
    \ - b, b);\n  }\n  return greatest_common_divisor(a, b - a);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    if (a % b === 0) {\n        return b;\n    } else {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    //TODO: Implement this function\n    return 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n1\n    at test (/tmp/tmpkgyefhj2.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkgyefhj2.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    while (b != 0) {\n        let tmp = a % b;\n        a = b;\n       \
    \ b = tmp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n  } else {\n \
    \   return greatest_common_divisor(a, b % a);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a < b) {\n    return greatest_common_divisor(b, a);\n  }\n  if (b === 0)\
    \ {\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n  } else {\n \
    \   return greatest_common_divisor(a, b % a);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    while (b !== 0) {\n        let tmp = a % b;\n        a = b;\n      \
    \  b = tmp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a < b) {\n    return greatest_common_divisor(b, a);\n  }\n  if (b === 0)\
    \ {\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        const temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        const temp = a % b;\n        a = b;\n \
    \       b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (a % b != 0) {\n        let temp = a % b;\n        a = b;\n\
    \        b = temp;\n    }\n    return b;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    if (a % b == 0) {\n        return b;\n    } else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    if (a % b == 0) {\n        return b;\n    } else {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    if (a % b == 0) {\n        return b;\n    } else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n  } else {\n \
    \   return greatest_common_divisor(a, b % a);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    let r = a % b;\n    while (r !== 0) {\n        a = b;\n        b = r;\n\
    \        r = a % b;\n    }\n    return b;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    while (b !== 0) {\n        let tmp = a % b;\n        a = b;\n      \
    \  b = tmp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    if (a % b === 0) {\n        return b;\n    } else {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    if (a % b === 0) {\n        return b;\n    } else {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a - b, b);\n\
    \    }\n    return greatest_common_divisor(a, b - a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    while (b > 0) {\n        let tmp = a % b;\n        a = b;\n        b\
    \ = tmp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a < b) {\n    return greatest_common_divisor(b, a);\n  }\n  if (b === 0)\
    \ {\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a < b) {\n    const tmp = a;\n    a = b;\n    b = tmp;\n  }\n  while (b\
    \ !== 0) {\n    const tmp = a % b;\n    a = b;\n    b = tmp;\n  }\n  return a;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b != 0) {\n        let temp = a % b;\n        a = b;\n    \
    \    b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    // TODO: Implement this function\n    return 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n1\n    at test (/tmp/tmptf52rur2.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmptf52rur2.js:19:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    let c = a % b;\n    return greatest_common_divisor(b, c);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    if (a % b === 0) {\n        return b;\n    } else {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n  } else {\n \
    \   return greatest_common_divisor(a, b % a);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n1\n    at test (/tmp/tmppix5syzo.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmppix5syzo.js:18:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    while (b !== 0) {\n        let tmp = a % b;\n        a = b;\n      \
    \  b = tmp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n  } else {\n \
    \   return greatest_common_divisor(a, b % a);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    if (a % b === 0) {\n        return b;\n    } else {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    } else if\
    \ (b === 0) {\n        return a;\n    } else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    if (a % b === 0) {\n        return b;\n    } else {\n        return\
    \ greatest_common_divisor(b, a % b);\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n  } else {\n \
    \   return greatest_common_divisor(a, b % a);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a % b === 0) {\n        return b;\n    } else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    return b == 0 ? a : greatest_common_divisor(b, a % b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a % b === 0) {\n        return b;\n    } else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    } else if (b === 0) {\n        return\
    \ a;\n    } else {\n        return greatest_common_divisor(b, a % b);\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268032
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n  } else {\n \
    \   return greatest_common_divisor(a, b % a);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let tmp = a;\n        a = b;\n        b = tmp;\n  \
    \  }\n    while (b !== 0) {\n        let tmp = a % b;\n        a = b;\n      \
    \  b = tmp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n\
    \  if (a > b) {\n    return greatest_common_divisor(a % b, b);\n  } else {\n \
    \   return greatest_common_divisor(a, b % a);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (b !== 0) {\n        let temp = a % b;\n        a = b;\n   \
    \     b = temp;\n    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        let temp = a;\n        a = b;\n        b = temp;\n\
    \    }\n    while (a % b !== 0) {\n        let temp = a % b;\n        a = b;\n\
    \        b = temp;\n    }\n    return b;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \  if (a < b) {\n    return greatest_common_divisor(b, a);\n  }\n  if (b === 0)\
    \ {\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a == 0) {\n        return b;\n    }\n    if (b == 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    } else if\
    \ (b === 0) {\n        return a;\n    } else {\n        return greatest_common_divisor(b,\
    \ a % b);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (a % b === 0) {\n        return b;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    return greatest_common_divisor(b, a % b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268031
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a === b) {\n        return a;\n    }\n    if (a > b) {\n\
    \        return greatest_common_divisor(a - b, b);\n    }\n    return greatest_common_divisor(a,\
    \ b - a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    if\
    \ (b === 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return a greatest common divisor of two integers a\
    \ and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n\
    \    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return\
    \ a;\n    }\n    if (a > b) {\n        return greatest_common_divisor(a % b, b);\n\
    \    } else {\n        return greatest_common_divisor(a, b % a);\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
