language: ts
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1d6r2_eo.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1d6r2_eo.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfjq8b0gl.js:27:12)\n    at Object.<anonymous> (/tmp/tmpfjq8b0gl.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3k3405h1.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3k3405h1.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcpgdkn_5.js:33:12)\n    at Object.<anonymous> (/tmp/tmpcpgdkn_5.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1b1u0ahk.js:34:12)\n    at Object.<anonymous> (/tmp/tmp1b1u0ahk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyhvct3t8.js:33:12)\n    at Object.<anonymous> (/tmp/tmpyhvct3t8.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgbe7u2qt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgbe7u2qt.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgbe7u2qt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgbe7u2qt.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    \nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp303uyyhc.js:31:12)\n    at Object.<anonymous> (/tmp/tmp303uyyhc.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpa1tokk2k.js:38:12)\n    at Object.<anonymous> (/tmp/tmpa1tokk2k.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1d6r2_eo.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1d6r2_eo.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(3, -2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8snftacq.js:28:12)\n    at Object.<anonymous> (/tmp/tmp8snftacq.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpuszm6iqv.js:38:12)\n    at Object.<anonymous> (/tmp/tmpuszm6iqv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8sp2a2om.js:33:12)\n    at Object.<anonymous> (/tmp/tmp8sp2a2om.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx_r7mk73.js:29:12)\n    at Object.<anonymous> (/tmp/tmpx_r7mk73.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx_r7mk73.js:29:12)\n    at Object.<anonymous> (/tmp/tmpx_r7mk73.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdn87z9fh.js:27:12)\n    at Object.<anonymous> (/tmp/tmpdn87z9fh.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z)) {\n        return x + y === z || x + z === y || y +\
    \ z === x;\n    }\n    return false;\n}\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3,\
    \ 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4ex_r23k.js:36:12)\n    at Object.<anonymous> (/tmp/tmp4ex_r23k.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4s_n374p.js:33:12)\n    at Object.<anonymous> (/tmp/tmp4s_n374p.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1b1u0ahk.js:34:12)\n    at Object.<anonymous> (/tmp/tmp1b1u0ahk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdu3x4z9h.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdu3x4z9h.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z)) {\n        if (x === y + z || y === x + z || z === x\
    \ + y) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpckaxe1vw.js:34:12)\n    at Object.<anonymous> (/tmp/tmpckaxe1vw.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx_r7mk73.js:29:12)\n    at Object.<anonymous> (/tmp/tmpx_r7mk73.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(3,\
    \ -2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpj5_ex_9z.js:35:12)\n    at Object.<anonymous> (/tmp/tmpj5_ex_9z.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp568w7qc7.js:36:12)\n    at Object.<anonymous> (/tmp/tmp568w7qc7.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8sp2a2om.js:33:12)\n    at Object.<anonymous> (/tmp/tmp8sp2a2om.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpuszm6iqv.js:38:12)\n    at Object.<anonymous> (/tmp/tmpuszm6iqv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1b1u0ahk.js:34:12)\n    at Object.<anonymous> (/tmp/tmp1b1u0ahk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx_r7mk73.js:29:12)\n    at Object.<anonymous> (/tmp/tmpx_r7mk73.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpuszm6iqv.js:38:12)\n    at Object.<anonymous> (/tmp/tmpuszm6iqv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpprilr3k4.js:38:12)\n    at Object.<anonymous> (/tmp/tmpprilr3k4.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfjq8b0gl.js:27:12)\n    at Object.<anonymous> (/tmp/tmpfjq8b0gl.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1uc84t8_.js:31:12)\n    at Object.<anonymous> (/tmp/tmp1uc84t8_.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcpgdkn_5.js:33:12)\n    at Object.<anonymous> (/tmp/tmpcpgdkn_5.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdu3x4z9h.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdu3x4z9h.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 !== 0 || y % 1 !== 0 || z % 1 !==\
    \ 0) {\n        return false;\n    }\n    if (x + y === z || x + z === y || y\
    \ + z === x) {\n        return true;\n    }\n    return false;\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpr3ox8y61.js:39:12)\n    at Object.<anonymous> (/tmp/tmpr3ox8y61.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1d6r2_eo.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1d6r2_eo.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    \nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpup91namo.js:31:12)\n    at Object.<anonymous> (/tmp/tmpup91namo.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx_r7mk73.js:29:12)\n    at Object.<anonymous> (/tmp/tmpx_r7mk73.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1b1u0ahk.js:34:12)\n    at Object.<anonymous> (/tmp/tmp1b1u0ahk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z) {\n        return true;\n\
    \    } else if (x + z === y) {\n        return true;\n    } else if (y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvc0htozx.js:37:12)\n    at Object.<anonymous> (/tmp/tmpvc0htozx.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return x + y === z || x + z === y || y +\
    \ z === x;\n}\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\n\
    console.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpoy2be0od.js:26:12)\n    at Object.<anonymous> (/tmp/tmpoy2be0od.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3og_c2ou.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3og_c2ou.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprwamq5yo.js:31:12)\n    at Object.<anonymous> (/tmp/tmprwamq5yo.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y == z || x + z == y || y + z\
    \ == x) && x % 1 == 0 && y % 1 == 0 && z % 1 == 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpf0q097_k.js:29:12)\n    at Object.<anonymous> (/tmp/tmpf0q097_k.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprwamq5yo.js:31:12)\n    at Object.<anonymous> (/tmp/tmprwamq5yo.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1b1u0ahk.js:34:12)\n    at Object.<anonymous> (/tmp/tmp1b1u0ahk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1b1u0ahk.js:34:12)\n    at Object.<anonymous> (/tmp/tmp1b1u0ahk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3og_c2ou.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3og_c2ou.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z)) {\n        if (x === y + z || y === x + z || z === x\
    \ + y) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp26q033pj.js:38:12)\n    at Object.<anonymous> (/tmp/tmp26q033pj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbwrqbxzl.js:33:12)\n    at Object.<anonymous> (/tmp/tmpbwrqbxzl.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(3, -2, 1));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpujuabwsa.js:28:12)\n    at Object.<anonymous> (/tmp/tmpujuabwsa.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpa1tokk2k.js:38:12)\n    at Object.<anonymous> (/tmp/tmpa1tokk2k.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z)) {\n        if (x + y === z || x + z === y || y + z ===\
    \ x) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfixb8s1g.js:38:12)\n    at Object.<anonymous> (/tmp/tmpfixb8s1g.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdu3x4z9h.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdu3x4z9h.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1d6r2_eo.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1d6r2_eo.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcpgdkn_5.js:33:12)\n    at Object.<anonymous> (/tmp/tmpcpgdkn_5.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_hcbqvam.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_hcbqvam.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgbe7u2qt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgbe7u2qt.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1d6r2_eo.js:33:12)\n    at Object.<anonymous> (/tmp/tmp1d6r2_eo.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z) {\n        return true;\n\
    \    } else if (x + z === y) {\n        return true;\n    } else if (y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpc0a1q5z4.js:37:12)\n    at Object.<anonymous> (/tmp/tmpc0a1q5z4.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z)) {\n        if (x === y + z || y === x + z || z === x\
    \ + y) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp26q033pj.js:38:12)\n    at Object.<anonymous> (/tmp/tmp26q033pj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx_r7mk73.js:29:12)\n    at Object.<anonymous> (/tmp/tmpx_r7mk73.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return x + y === z || x + z === y || y +\
    \ z === x;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6qhhmt82.js:22:12)\n    at Object.<anonymous> (/tmp/tmp6qhhmt82.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 == 0 && y % 1 == 0 && z % 1 ==\
    \ 0) {\n        if (x + y == z || x + z == y || y + z == x) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpk1xm1t6b.js:34:12)\n    at Object.<anonymous> (/tmp/tmpk1xm1t6b.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx4hd5o6h.js:31:12)\n    at Object.<anonymous> (/tmp/tmpx4hd5o6h.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y == z || x + z == y || y + z\
    \ == x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjz3c5_jx.js:29:12)\n    at Object.<anonymous> (/tmp/tmpjz3c5_jx.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3k3405h1.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3k3405h1.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3k3405h1.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3k3405h1.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z)) {\n        if (x === y + z || y === x + z || z === x\
    \ + y) {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp26q033pj.js:38:12)\n    at Object.<anonymous> (/tmp/tmp26q033pj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx_r7mk73.js:29:12)\n    at Object.<anonymous> (/tmp/tmpx_r7mk73.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpuszm6iqv.js:38:12)\n    at Object.<anonymous> (/tmp/tmpuszm6iqv.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgbe7u2qt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgbe7u2qt.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y == z || x + z == y || y + z\
    \ == x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_32ki3zp.js:29:12)\n    at Object.<anonymous> (/tmp/tmp_32ki3zp.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3og_c2ou.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3og_c2ou.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1b1u0ahk.js:34:12)\n    at Object.<anonymous> (/tmp/tmp1b1u0ahk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcpgdkn_5.js:33:12)\n    at Object.<anonymous> (/tmp/tmpcpgdkn_5.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    \nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpup91namo.js:31:12)\n    at Object.<anonymous> (/tmp/tmpup91namo.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx_r7mk73.js:29:12)\n    at Object.<anonymous> (/tmp/tmpx_r7mk73.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcpgdkn_5.js:33:12)\n    at Object.<anonymous> (/tmp/tmpcpgdkn_5.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdwezecva.js:34:12)\n    at Object.<anonymous> (/tmp/tmpdwezecva.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdcox9y7e.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdcox9y7e.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (x % 1 === 0 && y % 1 === 0 && z % 1 === 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgbe7u2qt.js:29:12)\n    at Object.<anonymous> (/tmp/tmpgbe7u2qt.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdu3x4z9h.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdu3x4z9h.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x === y + z || y === x + z || z === x\
    \ + y) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmnl9v6cr.js:31:12)\n    at Object.<anonymous> (/tmp/tmpmnl9v6cr.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdu3x4z9h.js:29:12)\n    at Object.<anonymous> (/tmp/tmpdu3x4z9h.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpa1tokk2k.js:38:12)\n    at Object.<anonymous> (/tmp/tmpa1tokk2k.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcpgdkn_5.js:33:12)\n    at Object.<anonymous> (/tmp/tmpcpgdkn_5.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3k3405h1.js:33:12)\n    at Object.<anonymous> (/tmp/tmp3k3405h1.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z)) {\n        if (x === y + z || y === x + z || z === x\
    \ + y) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpckaxe1vw.js:34:12)\n    at Object.<anonymous> (/tmp/tmpckaxe1vw.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx_r7mk73.js:29:12)\n    at Object.<anonymous> (/tmp/tmpx_r7mk73.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    return (x + y === z || x + z === y || y +\
    \ z === x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n\nconsole.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8sp2a2om.js:33:12)\n    at Object.<anonymous> (/tmp/tmp8sp2a2om.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x === y + z || y === x + z || z === x + y) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\n\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpa1tokk2k.js:38:12)\n    at Object.<anonymous> (/tmp/tmpa1tokk2k.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x % 1 === 0 && y % 1 === 0 && z % 1 ===\
    \ 0) {\n        if (x + y === z || x + z === y || y + z === x) {\n           \
    \ return true;\n        }\n    }\n    return false;\n}\nconsole.log(any_int(5,\
    \ 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3, -2, 1));\nconsole.log(any_int(3.6,\
    \ -2.2, 2));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplhihztuj.js:38:12)\n    at Object.<anonymous> (/tmp/tmplhihztuj.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphsrbtbkf.js:31:12)\n    at Object.<anonymous> (/tmp/tmphsrbtbkf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
- exit_code: 1
  program: "// @ts-nocheck\n\n//Create a function that takes 3 numbers.\n// Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5,\
    \ 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n\
    // true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y:\
    \ number, z: number): boolean {\n    if (x + y === z || x + z === y || y + z ===\
    \ x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\
    console.log(any_int(5, 2, 7));\nconsole.log(any_int(3, 2, 2));\nconsole.log(any_int(3,\
    \ -2, 1));\nconsole.log(any_int(3.6, -2.2, 2));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvg2i2gj1.js:31:12)\n    at Object.<anonymous> (/tmp/tmpvg2i2gj1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'true

    false

    true

    false

    '
  timestamp: 1660267966
