language: ts
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = \"aeiouAEIOU\";\n    const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = word.length;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (consonants.indexOf(word[i - 1]) !== -1 && consonants.indexOf(word[i\
    \ + 1]) !== -1) {\n                if (i < closest_vowel_index) {\n          \
    \          closest_vowel = word[i];\n                    closest_vowel_index =\
    \ i;\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpne7xs5ag.js:36:12)\n    at Object.<anonymous> (/tmp/tmpne7xs5ag.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        if (consonants.indexOf(word[i]) !== -1) {\n            for (let j\
    \ = i + 1; j < word.length; j++) {\n                if (vowels.indexOf(word[j])\
    \ !== -1) {\n                    closestVowel = word[j];\n                   \
    \ break;\n                }\n            }\n            break;\n        }\n  \
    \  }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmp7qhxjsu4.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7qhxjsu4.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowel = \"\";\n    let consonant = \"\";\n    let result = \"\";\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            vowel = word[i];\n            break;\n        }\n   \
    \ }\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ !== -1) {\n            consonant = word[i];\n            break;\n        }\n\
    \    }\n    if (vowel && consonant) {\n        result = vowel;\n    }\n    return\
    \ result;\n}\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"\
    FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"\
    ab\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpfdr_vuaz.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfdr_vuaz.js:60:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'u

    U

    i

    a

    '
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestDistance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            let distance = word.length - i;\n            if (distance\
    \ < closestDistance) {\n                closestDistance = distance;\n        \
    \        closestVowel = word[i];\n            }\n        }\n    }\n    return\
    \ closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp01nlwye_.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp01nlwye_.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            if (i > 0 && i < word.length - 1) {\n                if\
    \ (vowels.indexOf(word[i - 1]) < 0 && vowels.indexOf(word[i + 1]) < 0) {\n   \
    \                 if (i < closest_vowel_index) {\n                        closest_vowel\
    \ = word[i];\n                        closest_vowel_index = i;\n             \
    \       }\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpg57qpzau.js:37:12)\n    at Object.<anonymous> (/tmp/tmpg57qpzau.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let closest_vowel\
    \ = \"\";\n    let closest_vowel_index = word.length;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n       \
    \     if (consonants.indexOf(word[i - 1]) !== -1 && consonants.indexOf(word[i\
    \ + 1]) !== -1) {\n                if (i < closest_vowel_index) {\n          \
    \          closest_vowel_index = i;\n                    closest_vowel = word[i];\n\
    \                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpumv_jvhz.js:36:12)\n    at Object.<anonymous> (/tmp/tmpumv_jvhz.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = word.length;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ > -1) {\n            for (let j = i; j >= 0; j--) {\n                if (vowels.indexOf(word[j])\
    \ > -1) {\n                    if (i - j < closest_vowel_index) {\n          \
    \              closest_vowel_index = i - j;\n                        closest_vowel\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return closest_vowel;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpxnx38c7m.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxnx38c7m.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n    for (let\
    \ i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ > -1) {\n            for (let j = i + 1; j < word.length; j++) {\n         \
    \       if (vowels.indexOf(word[j]) > -1) {\n                    if (closestVowelIndex\
    \ === -1 || j < closestVowelIndex) {\n                        closestVowelIndex\
    \ = j;\n                        closestVowel = word[j];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpdvmo9jwq.js:38:12)\n    at Object.<anonymous> (/tmp/tmpdvmo9jwq.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = 0;\n    let closest_consonant_index\
    \ = 0;\n    let closest_consonant = \"\";\n    let word_length = word.length;\n\
    \    let i = 0;\n    while (i < word_length) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n        i++;\n    }\n    if (closest_vowel\
    \ == \"\") {\n        return \"\";\n    }\n    i = word_length - 1;\n    while\
    \ (i > 0) {\n        if (consonants.indexOf(word[i]) > -1) {\n            closest_consonant\
    \ = word[i];\n            closest_consonant_index = i;\n            break;\n \
    \       }\n        i--;\n    }\n    if (closest_consonant == \"\") {\n       \
    \ return \"\";\n    }\n    if (closest_vowel_index < closest_consonant_index)\
    \ {\n        return closest_vowel;\n    }\n    return \"\";\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpv7rl5_38.js:56:12)\n    at Object.<anonymous> (/tmp/tmpv7rl5_38.js:70:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_index = word.length;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            if (i < closest_index) {\n                closest_index\
    \ = i;\n                closest_vowel = word[i];\n            }\n        }\n \
    \   }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp71v_1da0.js:33:12)\n    at Object.<anonymous> (/tmp/tmp71v_1da0.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            if (i < closest_vowel_index) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = word[i];\n            }\n        }\n \
    \   }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmppz6_e2gx.js:33:12)\n    at Object.<anonymous> (/tmp/tmppz6_e2gx.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n    let closestConsonantIndex\
    \ = -1;\n    let closestConsonant = \"\";\n    let wordArray = word.split(\"\"\
    );\n    for (let i = wordArray.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(wordArray[i])\
    \ > -1) {\n            closestVowel = wordArray[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closestVowelIndex\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(wordArray[i]) > -1) {\n\
    \            closestConsonant = wordArray[i];\n            closestConsonantIndex\
    \ = i;\n            break;\n        }\n    }\n    if (closestVowelIndex > closestConsonantIndex)\
    \ {\n        return closestVowel;\n    } else {\n        return \"\";\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp5qwls2wt.js:50:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5qwls2wt.js:62:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let wordArr = word.split(\"\");\n\
    \    let vowelIndex = [];\n    let consonantIndex = [];\n    let result = \"\"\
    ;\n    for (let i = 0; i < wordArr.length; i++) {\n        if (vowels.includes(wordArr[i]))\
    \ {\n            vowelIndex.push(i);\n        } else {\n            consonantIndex.push(i);\n\
    \        }\n    }\n    if (vowelIndex.length == 0 || consonantIndex.length ==\
    \ 0) {\n        return result;\n    }\n    for (let i = 0; i < vowelIndex.length;\
    \ i++) {\n        if (vowelIndex[i] > consonantIndex[consonantIndex.length - 1])\
    \ {\n            result = wordArr[vowelIndex[i]];\n            break;\n      \
    \  }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpswnagx6v.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpswnagx6v.js:58:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let index = word.length - 1;\n\
    \    while (index >= 0) {\n        if (vowels.indexOf(word[index]) >= 0) {\n \
    \           result = word[index];\n            if (index < word.length - 1 &&\
    \ vowels.indexOf(word[index + 1]) < 0) {\n                break;\n           \
    \ }\n        }\n        index--;\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp7cb7ye2l.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7cb7ye2l.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let result\
    \ = \"\";\n    let vowel_index = 0;\n    let consonant_index = 0;\n    for (let\
    \ i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) >=\
    \ 0) {\n            vowel_index = i;\n            break;\n        }\n    }\n \
    \   for (let i = vowel_index - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ >= 0) {\n            consonant_index = i;\n            break;\n        }\n \
    \   }\n    if (consonant_index > 0) {\n        result = word[vowel_index];\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpl1qj37rn.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl1qj37rn.js:56:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let result = \"\";\n    let index = word.length - 1;\n    while (index\
    \ >= 0) {\n        if (consonants.indexOf(word[index]) >= 0) {\n            if\
    \ (index === word.length - 1) {\n                index--;\n                continue;\n\
    \            }\n            if (vowels.indexOf(word[index + 1]) >= 0) {\n    \
    \            result = word[index + 1];\n                break;\n            }\n\
    \        }\n        index--;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpwijpz8cn.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwijpz8cn.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = \"aeiou\";\n    let closestVowel = \"\";\n    let closestDistance =\
    \ word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            let distance = word.length - i;\n            if (distance\
    \ < closestDistance) {\n                closestDistance = distance;\n        \
    \        closestVowel = word[i];\n            }\n        }\n    }\n    return\
    \ closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpyl7hv65q.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyl7hv65q.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    let result = '';\n    let wordArr = word.split('');\n    let vowelIndex =\
    \ 0;\n    let consonantIndex = 0;\n    for (let i = wordArr.length - 1; i >= 0;\
    \ i--) {\n        if (vowels.indexOf(wordArr[i]) > -1) {\n            vowelIndex\
    \ = i;\n            break;\n        }\n    }\n    for (let i = vowelIndex - 1;\
    \ i >= 0; i--) {\n        if (consonants.indexOf(wordArr[i]) > -1) {\n       \
    \     consonantIndex = i;\n            break;\n        }\n    }\n    if (vowelIndex\
    \ > consonantIndex) {\n        result = wordArr[vowelIndex];\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpuzjqumyv.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuzjqumyv.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    let word_array = word.split('');\n    let closest_vowel = '';\n    let closest_vowel_index\
    \ = 0;\n    let closest_consonant_index = 0;\n    let closest_consonant = '';\n\
    \    for (let i = 0; i < word_array.length; i++) {\n        if (vowels.includes(word_array[i]))\
    \ {\n            closest_vowel = word_array[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closest_vowel_index;\
    \ i < word_array.length; i++) {\n        if (consonants.includes(word_array[i]))\
    \ {\n            closest_consonant = word_array[i];\n            closest_consonant_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index < closest_consonant_index)\
    \ {\n        return closest_vowel;\n    } else {\n        return '';\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpyej1hrgg.js:48:12)\n    at Object.<anonymous> (/tmp/tmpyej1hrgg.js:62:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_distance =\
    \ word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            let distance = word.length - i;\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest_vowel = word[i];\n            }\n        }\n    }\n    return\
    \ closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp6er19gdk.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6er19gdk.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestDistance = word.length;\n    for\
    \ (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i]) !==\
    \ -1) {\n            let distance = word.length - i;\n            if (distance\
    \ < closestDistance) {\n                closestDistance = distance;\n        \
    \        closestVowel = word[i];\n            }\n        }\n    }\n    return\
    \ closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpaslq1hvm.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaslq1hvm.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let result = \"\";\n    let index = word.length - 1;\n    while (index\
    \ >= 0) {\n        if (consonants.indexOf(word[index]) >= 0) {\n            if\
    \ (index > 0 && vowels.indexOf(word[index - 1]) >= 0) {\n                result\
    \ = word[index - 1];\n                break;\n            }\n            else\
    \ if (index > 1 && vowels.indexOf(word[index - 2]) >= 0) {\n                result\
    \ = word[index - 2];\n                break;\n            }\n        }\n     \
    \   index--;\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpklqd3a7z.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpklqd3a7z.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = -1;\n    let closest_consonant_index = -1;\n    for (let i = word.length -\
    \ 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n         \
    \   closest_vowel = word[i];\n            closest_vowel_index = i;\n         \
    \   break;\n        }\n    }\n    for (let i = closest_vowel_index - 1; i >= 0;\
    \ i--) {\n        if (vowels.indexOf(word[i]) === -1) {\n            closest_consonant_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index ===\
    \ -1 || closest_consonant_index === -1) {\n        return \"\";\n    }\n    return\
    \ closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp9mmtv_9d.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9mmtv_9d.js:56:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result = \"\";\n    for (let\
    \ i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !==\
    \ -1) {\n            result = word[i];\n            break;\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpj0_i72zq.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpj0_i72zq.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) !== -1) {\n            closest_vowel\
    \ = word[i];\n            break;\n        }\n    }\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) !== -1) {\n   \
    \         if (vowels.indexOf(word[i - 1]) !== -1) {\n                return closest_vowel;\n\
    \            }\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpt_0029uy.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt_0029uy.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let closestVowel = \"\";\n\
    \    let closestVowelIndex = word.length;\n    for (let i = word.length - 1; i\
    \ >= 0; i--) {\n        if (vowels.includes(word[i])) {\n            if (i < closestVowelIndex)\
    \ {\n                closestVowel = word[i];\n                closestVowelIndex\
    \ = i;\n            }\n        }\n    }\n    return closestVowel;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpu4osk44q.js:33:12)\n    at Object.<anonymous> (/tmp/tmpu4osk44q.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let result = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (consonants.indexOf(word[i]) > -1) {\n            for (let j = i +\
    \ 1; j < word.length; j++) {\n                if (vowels.indexOf(word[j]) > -1)\
    \ {\n                    result = word[j];\n                    break;\n     \
    \           }\n            }\n            break;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpti_7j1ka.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpti_7j1ka.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267969
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            if (i < closest_vowel_index) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = word[i];\n            }\n        }\n \
    \   }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmppz6_e2gx.js:33:12)\n    at Object.<anonymous> (/tmp/tmppz6_e2gx.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n  const vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const wordArr = word.split(\"\");\n\
    \  let result = \"\";\n  let vowelIndex = 0;\n  let vowelCount = 0;\n  for (let\
    \ i = wordArr.length - 1; i >= 0; i--) {\n    if (vowels.includes(wordArr[i]))\
    \ {\n      vowelIndex = i;\n      vowelCount++;\n    }\n    if (vowelCount ===\
    \ 2) {\n      result = wordArr[vowelIndex];\n      break;\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpymkwd5ne.js:37:12)\n    at Object.<anonymous> (/tmp/tmpymkwd5ne.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = -1;\n    let closest_consonant_index\
    \ = -1;\n    let closest_consonant = \"\";\n    for (let i = word.length - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            closest_vowel\
    \ = word[i];\n            closest_vowel_index = i;\n            break;\n     \
    \   }\n    }\n    for (let i = closest_vowel_index - 1; i >= 0; i--) {\n     \
    \   if (consonants.indexOf(word[i]) !== -1) {\n            closest_consonant =\
    \ word[i];\n            closest_consonant_index = i;\n            break;\n   \
    \     }\n    }\n    if (closest_vowel_index === -1 || closest_consonant_index\
    \ === -1) {\n        return \"\";\n    }\n    return closest_vowel;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpkuxfqi44.js:49:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkuxfqi44.js:59:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closest_vowel = \"\";\n    let closest_vowel_index = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i > 0 && i < word.length - 1) {\n               \
    \ if (vowels.indexOf(word[i - 1]) === -1 && vowels.indexOf(word[i + 1]) === -1)\
    \ {\n                    if (i < closest_vowel_index) {\n                    \
    \    closest_vowel_index = i;\n                        closest_vowel = word[i];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmprb8h9lm6.js:37:12)\n    at Object.<anonymous> (/tmp/tmprb8h9lm6.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowel_index = -1;\n    let consonant_index = -1;\n    for (let i =\
    \ word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1)\
    \ {\n            vowel_index = i;\n        }\n        if (consonants.indexOf(word[i])\
    \ !== -1) {\n            consonant_index = i;\n            break;\n        }\n\
    \    }\n    if (vowel_index === -1 || consonant_index === -1) {\n        return\
    \ \"\";\n    }\n    return word[vowel_index];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpywc01mr9.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpywc01mr9.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let result = \"\";\n    let index = word.length - 1;\n   \
    \ let is_consonant = true;\n    while (index >= 0) {\n        if (vowels.indexOf(word[index])\
    \ >= 0) {\n            if (!is_consonant) {\n                result = word[index];\n\
    \                break;\n            }\n        } else {\n            is_consonant\
    \ = true;\n        }\n        index--;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmp98hdyenx.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp98hdyenx.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let word_array = word.split(\"\"\
    );\n    let word_length = word_array.length;\n    let closest_vowel = \"\";\n\
    \    let vowel_index = 0;\n    let vowel_found = false;\n    for (let i = word_length\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word_array[i]) > -1) {\n   \
    \         vowel_index = i;\n            vowel_found = true;\n            break;\n\
    \        }\n    }\n    if (vowel_found) {\n        for (let i = vowel_index; i\
    \ >= 0; i--) {\n            if (vowels.indexOf(word_array[i]) == -1) {\n     \
    \           closest_vowel = word_array[vowel_index];\n                break;\n\
    \            }\n        }\n    }\n    return closest_vowel;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpil162qnr.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpil162qnr.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let vowelIndex = 0;\n    let consonantIndex\
    \ = 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            vowelIndex = i;\n            break;\n        }\n    }\n\
    \    for (let i = vowelIndex - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ !== -1) {\n            consonantIndex = i;\n            break;\n        }\n\
    \    }\n    if (consonantIndex === 0) {\n        return \"\";\n    }\n    return\
    \ word[vowelIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmp2o2mcp8d.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2o2mcp8d.js:56:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let result = \"\
    \";\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ > -1) {\n            for (let j = i - 1; j >= 0; j--) {\n                if\
    \ (vowels.indexOf(word[j]) > -1) {\n                    result = word[j];\n  \
    \                  break;\n                }\n            }\n            break;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpa9x6k_01.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa9x6k_01.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_distance =\
    \ 0;\n    let distance = 0;\n    for (let i = 0; i < word.length; i++) {\n   \
    \     if (vowels.indexOf(word[i]) != -1) {\n            distance = word.length\
    \ - i;\n            if (distance > closest_distance) {\n                closest_distance\
    \ = distance;\n                closest_vowel = word[i];\n            }\n     \
    \   }\n    }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmphtczyw4a.js:35:12)\n    at Object.<anonymous> (/tmp/tmphtczyw4a.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestIndex = word.length;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestIndex) {\n                closestIndex\
    \ = i;\n                closestVowel = word[i];\n            }\n        }\n  \
    \  }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp0vtnn85q.js:33:12)\n    at Object.<anonymous> (/tmp/tmp0vtnn85q.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let index = 0;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n       \
    \     if (index === 0) {\n                closest_vowel = word[i];\n         \
    \       index++;\n            } else {\n                break;\n            }\n\
    \        } else if (consonants.indexOf(word[i]) !== -1) {\n            index++;\n\
    \        }\n    }\n    return closest_vowel;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpd78vwbxe.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd78vwbxe.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n    let closestConsonantIndex\
    \ = -1;\n    let closestConsonant = \"\";\n    for (let i = word.length - 1; i\
    \ >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            closestVowel\
    \ = word[i];\n            closestVowelIndex = i;\n            break;\n       \
    \ }\n    }\n    for (let i = closestVowelIndex - 1; i >= 0; i--) {\n        if\
    \ (consonants.indexOf(word[i]) !== -1) {\n            closestConsonant = word[i];\n\
    \            closestConsonantIndex = i;\n            break;\n        }\n    }\n\
    \    if (closestVowelIndex === -1 || closestConsonantIndex === -1) {\n       \
    \ return \"\";\n    }\n    return closestVowel;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpgrj2xaqb.js:49:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgrj2xaqb.js:59:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_index = -1;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closest_vowel = word[i];\n            closest_index =\
    \ i;\n            break;\n        }\n    }\n    if (closest_index === -1) {\n\
    \        return \"\";\n    }\n    for (let i = closest_index - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) === -1) {\n            return closest_vowel;\n\
    \        }\n    }\n    return \"\";\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp9fuitzaa.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9fuitzaa.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            if (i > 0 && i < word.length - 1) {\n                if\
    \ (vowels.indexOf(word[i - 1]) < 0 && vowels.indexOf(word[i + 1]) < 0) {\n   \
    \                 if (i < closest_vowel_index) {\n                        closest_vowel\
    \ = word[i];\n                        closest_vowel_index = i;\n             \
    \       }\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpg57qpzau.js:37:12)\n    at Object.<anonymous> (/tmp/tmpg57qpzau.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestDistance = 0;\n \
    \   for (let i = word.length - 1; i >= 0; i--) {\n        let letter = word[i];\n\
    \        if (vowels.indexOf(letter) >= 0) {\n            if (closestVowel ===\
    \ \"\") {\n                closestVowel = letter;\n                closestDistance\
    \ = word.length - i;\n            } else {\n                let distance = word.length\
    \ - i;\n                if (distance < closestDistance) {\n                  \
    \  closestVowel = letter;\n                    closestDistance = distance;\n \
    \               }\n            }\n        }\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp16qayevo.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmp16qayevo.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ -1;\n    let closestConsonantIndex = -1;\n    let closestConsonant = \"\";\n\
    \    let wordArray = word.split(\"\");\n    for (let i = wordArray.length - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(wordArray[i]) != -1) {\n        \
    \    closestVowel = wordArray[i];\n            closestVowelIndex = i;\n      \
    \      break;\n        }\n    }\n    for (let i = closestVowelIndex - 1; i >=\
    \ 0; i--) {\n        if (vowels.indexOf(wordArray[i]) == -1) {\n            closestConsonant\
    \ = wordArray[i];\n            closestConsonantIndex = i;\n            break;\n\
    \        }\n    }\n    if (closestVowelIndex != -1 && closestConsonantIndex !=\
    \ -1) {\n        return closestVowel;\n    }\n    return \"\";\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp2cjvqiim.js:49:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2cjvqiim.js:59:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let result = \"\";\n    let vowel_index = 0;\n    let consonant_index =\
    \ 0;\n    let vowel_found = false;\n    let consonant_found = false;\n    let\
    \ i = word.length - 1;\n    while (i >= 0) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            vowel_index = i;\n            vowel_found = true;\n   \
    \         break;\n        }\n        i--;\n    }\n    if (vowel_found) {\n   \
    \     i = vowel_index - 1;\n        while (i >= 0) {\n            if (consonants.indexOf(word[i])\
    \ >= 0) {\n                consonant_index = i;\n                consonant_found\
    \ = true;\n                break;\n            }\n            i--;\n        }\n\
    \    }\n    if (consonant_found) {\n        result = word[vowel_index];\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpios5efhc.js:56:12)\n\
    \    at Object.<anonymous> (/tmp/tmpios5efhc.js:66:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let consonants =\
    \ ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M',\
    \ 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'];\n    let result = '';\n\
    \    let index = 0;\n    let distance = 0;\n    let minDistance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            for (let j = i + 1; j < word.length; j++) {\n         \
    \       if (consonants.indexOf(word[j]) > -1) {\n                    distance\
    \ = j - i;\n                    if (distance < minDistance) {\n              \
    \          minDistance = distance;\n                        index = i;\n     \
    \               }\n                    break;\n                }\n           \
    \ }\n        }\n    }\n    if (minDistance < word.length) {\n        result =\
    \ word[index];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp6v7wgee8.js:45:12)\n    at Object.<anonymous> (/tmp/tmp6v7wgee8.js:59:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = \"aeiouAEIOU\";\n    const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowel = \"\";\n    let consonant = \"\";\n    let result = \"\";\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            vowel = word[i];\n        }\n        if (consonants.indexOf(word[i])\
    \ > -1) {\n            consonant = word[i];\n            break;\n        }\n \
    \   }\n    if (vowel && consonant) {\n        result = vowel;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmp32tuhny3.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp32tuhny3.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result = \"\";\n    let index\
    \ = word.length - 1;\n    while (index >= 0) {\n        if (vowels.indexOf(word[index])\
    \ >= 0) {\n            result = word[index];\n            break;\n        }\n\
    \        index--;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpkl5im9qw.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkl5im9qw.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let wordArray = word.split(\"\"\
    );\n    let closestVowel = \"\";\n    let closestVowelIndex = 0;\n    let closestVowelDistance\
    \ = 0;\n    let currentVowelIndex = 0;\n    let currentVowelDistance = 0;\n  \
    \  for (let i = 0; i < wordArray.length; i++) {\n        if (vowels.indexOf(wordArray[i])\
    \ > -1) {\n            currentVowelIndex = i;\n            currentVowelDistance\
    \ = wordArray.length - currentVowelIndex;\n            if (currentVowelDistance\
    \ > closestVowelDistance) {\n                closestVowel = wordArray[i];\n  \
    \              closestVowelIndex = currentVowelIndex;\n                closestVowelDistance\
    \ = currentVowelDistance;\n            }\n        }\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpnyr966yh.js:40:12)\n    at Object.<anonymous> (/tmp/tmpnyr966yh.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267972
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let index = word.length - 1;\n\
    \    while (index >= 0) {\n        if (vowels.indexOf(word[index]) >= 0) {\n \
    \           result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpigjav1sy.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpigjav1sy.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267972
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let closest_vowel = \"\"\
    ;\n    let closest_vowel_index = -1;\n    for (let i = word.length - 1; i >= 0;\
    \ i--) {\n        if (vowels.includes(word[i])) {\n            closest_vowel =\
    \ word[i];\n            closest_vowel_index = i;\n            break;\n       \
    \ }\n    }\n    if (closest_vowel_index === -1) {\n        return \"\";\n    }\n\
    \    for (let i = closest_vowel_index - 1; i >= 0; i--) {\n        if (!vowels.includes(word[i]))\
    \ {\n            return closest_vowel;\n        }\n    }\n    return \"\";\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp0sgc2lt3.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0sgc2lt3.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267972
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            if (i > 0 && i < word.length - 1) {\n                if\
    \ (vowels.indexOf(word[i - 1]) == -1 && vowels.indexOf(word[i + 1]) == -1) {\n\
    \                    if (i < closest_vowel_index) {\n                        closest_vowel_index\
    \ = i;\n                        closest_vowel = word[i];\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp_crli295.js:37:12)\n    at Object.<anonymous> (/tmp/tmp_crli295.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267972
- exit_code: 2
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = 0;\n    let closestConsonantIndex\
    \ = 0;\n    let closestConsonant = \"\";\n    let closestVowelDistance = 0;\n\
    \    let closestConsonantDistance = 0;\n    let currentVowelDistance = 0;\n  \
    \  let currentConsonantDistance = 0;\n    let currentVowelIndex = 0;\n    let\
    \ currentConsonantIndex = 0;\n    let currentVowel = \"\";\n    let currentConsonant\
    \ = \"\";\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            currentVowel = word[i];\n            currentVowelIndex\
    \ = i;\n            for (let j = i; j < word.length; j++) {\n                if\
    \ (consonants.indexOf(word[j]) > -1) {\n                    currentConsonant =\
    \ word[j];\n                    currentConsonantIndex = j;\n                 \
    \   currentVowelDistance = currentConsonantIndex - currentVowelIndex;\n      \
    \              if (closestVowel === \"\") {\n                        closestVowel\
    \ = currentVowel;\n                        closestVowelIndex = currentVowelIndex;\n\
    \                        closestConsonant = currentConsonant;\n              \
    \          closestConsonantIndex = currentConsonantIndex;\n                  \
    \      closestVowelDistance = currentVowelDistance;\n                    } else\
    \ {\n                        if (currentVowelDistance < closestVowelDistance)\
    \ {\n                            closestVowel = currentVowel;\n              \
    \              closestVowelIndex = currentVowelIndex;\n                      \
    \      closestConsonant = currentConsonant;\n                            closestConsonantIndex\
    \ = currentConsonantIndex;\n                            closestVowelDistance =\
    \ currentVowelDistance;\n                        }\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return closestVow\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp3y3tx234.ts(82,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660267972
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = 0;\n    let closest_vowel_distance = 0;\n    let word_length = word.length;\n\
    \    for (let i = 0; i < word_length; i++) {\n        let current_letter = word[i];\n\
    \        if (vowels.indexOf(current_letter) != -1) {\n            let distance\
    \ = word_length - i;\n            if (distance > closest_vowel_distance) {\n \
    \               closest_vowel_distance = distance;\n                closest_vowel_index\
    \ = i;\n                closest_vowel = current_letter;\n            }\n     \
    \   }\n    }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpbak9_w2z.js:38:12)\n    at Object.<anonymous> (/tmp/tmpbak9_w2z.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267972
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ 0;\n    let closestVowelDistance = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n        if (vowels.indexOf(word[i]) != -1) {\n            if (closestVowel\
    \ == \"\") {\n                closestVowel = word[i];\n                closestVowelIndex\
    \ = i;\n                closestVowelDistance = word.length - i;\n            }\
    \ else {\n                if (word.length - i < closestVowelDistance) {\n    \
    \                closestVowel = word[i];\n                    closestVowelIndex\
    \ = i;\n                    closestVowelDistance = word.length - i;\n        \
    \        }\n            }\n        }\n    }\n    if (closestVowelIndex == 0 ||\
    \ closestVowelIndex == word.length - 1) {\n        return \"\";\n    }\n    return\
    \ closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpy6ds6a_j.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy6ds6a_j.js:59:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closest_vowel = \"\";\n    let closest_vowel_index = -1;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index ===\
    \ -1) {\n        return \"\";\n    }\n    for (let i = closest_vowel_index - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(word[i]) === -1) {\n            return\
    \ closest_vowel;\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpssdtg2c1.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpssdtg2c1.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let result = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (consonants.indexOf(word[i]) > -1) {\n            for (let j = i -\
    \ 1; j >= 0; j--) {\n                if (vowels.indexOf(word[j]) > -1) {\n   \
    \                 result = word[j];\n                    break;\n            \
    \    }\n            }\n            break;\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpf58x8kbt.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf58x8kbt.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = word.length;\n  \
    \  for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestVowelIndex) {\n                closestVowel\
    \ = word[i];\n                closestVowelIndex = i;\n            }\n        }\n\
    \        if (consonants.indexOf(word[i]) !== -1) {\n            if (closestVowelIndex\
    \ !== word.length) {\n                return closestVowel;\n            }\n  \
    \      }\n    }\n    return \"\";\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpw57ea6tk.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpw57ea6tk.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267972
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest = \"\";\n    let closest_index = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i > 0 && i < word.length - 1) {\n               \
    \ if (vowels.indexOf(word[i - 1]) === -1 && vowels.indexOf(word[i + 1]) === -1)\
    \ {\n                    if (i < closest_index) {\n                        closest_index\
    \ = i;\n                        closest = word[i];\n                    }\n  \
    \              }\n            }\n        }\n    }\n    return closest;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp3k99xwvs.js:37:12)\n    at Object.<anonymous> (/tmp/tmp3k99xwvs.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestDistance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            let distance = word.length - i;\n            if (distance\
    \ < closestDistance) {\n                closestDistance = distance;\n        \
    \        closestVowel = word[i];\n            }\n        }\n    }\n    return\
    \ closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp9nynejhz.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9nynejhz.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 2
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ -1;\n    let closestConsonantIndex = -1;\n    let closestConsonant = \"\";\n\
    \    let isConsonant = false;\n    let isVowel = false;\n    let isFirstVowel\
    \ = false;\n    let isFirstConsonant = false;\n    let isLastVowel = false;\n\
    \    let isLastConsonant = false;\n    let isFirstLetter = true;\n    let isLastLetter\
    \ = false;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (i ===\
    \ 0) {\n            isFirstLetter = true;\n        }\n        if (i === word.length\
    \ - 1) {\n            isLastLetter = true;\n        }\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            isVowel = true;\n            if (isFirstLetter) {\n \
    \               isFirstVowel = true;\n            }\n            if (isLastLetter)\
    \ {\n                isLastVowel = true;\n            }\n        } else {\n  \
    \          isConsonant = true;\n            if (isFirstLetter) {\n           \
    \     isFirstConsonant = true;\n            }\n            if (isLastLetter) {\n\
    \                isLastConsonant = true;\n            }\n        }\n        if\
    \ (isVowel && isConsonant) {\n            closestVowel = word[i];\n          \
    \  closestVowelIndex = i;\n            break;\n        }\n        if (isConsonant)\
    \ {\n            closestConsonant = word[i];\n            closestConsonantIndex\
    \ = i;\n        }\n        isFirstLetter = false;\n        isLastLetter = false;\n\
    \        isVowel = false;\n        isConsonant = false;\n    }\n    if (closestVowelIndex\
    \ === -1) {\n        return \"\";\n    }\n    if (closestVowelIndex === 0) {\n\
    \        return \"\";\n    }\n    if (closestVowelIndex\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpaw65qzob.ts(76,1): error TS1005: '')'' expected.

    ../../../../tmp/tmpaw65qzob.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660267972
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n    let closestConsonantIndex\
    \ = -1;\n    let closestConsonant = \"\";\n    for (let i = word.length - 1; i\
    \ >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            closestVowel\
    \ = word[i];\n            closestVowelIndex = i;\n            break;\n       \
    \ }\n    }\n    for (let i = closestVowelIndex - 1; i >= 0; i--) {\n        if\
    \ (consonants.indexOf(word[i]) !== -1) {\n            closestConsonant = word[i];\n\
    \            closestConsonantIndex = i;\n            break;\n        }\n    }\n\
    \    if (closestVowelIndex > closestConsonantIndex) {\n        return closestVowel;\n\
    \    }\n    return \"\";\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmphaz6bzf4.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmphaz6bzf4.js:59:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index ===\
    \ -1) {\n        return \"\";\n    }\n    for (let i = closest_vowel_index - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(word[i]) === -1) {\n            return\
    \ closest_vowel;\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp0dq4o08y.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0dq4o08y.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n\
    \    let closestConsonantIndex = -1;\n    for (let i = word.length - 1; i >= 0;\
    \ i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n            closestVowel\
    \ = word[i];\n            closestVowelIndex = i;\n            break;\n       \
    \ }\n    }\n    for (let i = closestVowelIndex - 1; i >= 0; i--) {\n        if\
    \ (vowels.indexOf(word[i]) < 0) {\n            closestConsonantIndex = i;\n  \
    \          break;\n        }\n    }\n    if (closestVowelIndex > 0 && closestConsonantIndex\
    \ > 0) {\n        return closestVowel;\n    }\n    return \"\";\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpges4wm77.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpges4wm77.js:56:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closestVowel = word[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    if (closestVowelIndex === -1)\
    \ {\n        return \"\";\n    }\n    for (let i = closestVowelIndex - 1; i >=\
    \ 0; i--) {\n        if (vowels.indexOf(word[i]) === -1) {\n            return\
    \ closestVowel;\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpro9q7v5g.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpro9q7v5g.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let closestVowel = \"\";\n    let\
    \ closestVowelIndex = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (vowels.indexOf(word[i]) !== -1) {\n            closestVowel = word[i];\n\
    \            closestVowelIndex = i;\n            break;\n        }\n    }\n  \
    \  if (closestVowelIndex === -1) {\n        return \"\";\n    }\n    for (let\
    \ i = closestVowelIndex - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ === -1) {\n            return closestVowel;\n        }\n    }\n    return \"\
    \";\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpl31ywn1u.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl31ywn1u.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowel_index = -1;\n    let consonant_index = -1;\n    for (let i =\
    \ word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) != -1)\
    \ {\n            vowel_index = i;\n        }\n        if (consonants.indexOf(word[i])\
    \ != -1) {\n            consonant_index = i;\n            break;\n        }\n\
    \    }\n    if (vowel_index != -1 && consonant_index != -1 && vowel_index > consonant_index)\
    \ {\n        return word[vowel_index];\n    }\n    return \"\";\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmphbdksks2.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmphbdksks2.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = 0;\n    let closest_vowel_distance\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            let distance = 0;\n            for (let j = i + 1; j\
    \ < word.length; j++) {\n                if (consonants.indexOf(word[j]) !== -1)\
    \ {\n                    distance++;\n                } else {\n             \
    \       break;\n                }\n            }\n            if (distance > closest_vowel_distance)\
    \ {\n                closest_vowel_distance = distance;\n                closest_vowel_index\
    \ = i;\n            }\n        }\n    }\n    if (closest_vowel_distance > 0) {\n\
    \        closest_vowel = word[closest_vowel_index];\n    }\n    return closest_vowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp01dj6nmj.js:49:12)\n\
    \    at Object.<anonymous> (/tmp/tmp01dj6nmj.js:61:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestVowelIndex = word.length;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestVowelIndex) {\n                closestVowel\
    \ = word[i];\n                closestVowelIndex = i;\n            }\n        }\n\
    \    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp18vr_vyu.js:33:12)\n    at Object.<anonymous> (/tmp/tmp18vr_vyu.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_distance =\
    \ word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            let distance = word.length - i;\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest_vowel = word[i];\n            }\n        }\n    }\n    return\
    \ closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpy0s3yz1x.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy0s3yz1x.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result = \"\";\n    let index\
    \ = 0;\n    let min = word.length;\n    for (let i = word.length - 1; i >= 0;\
    \ i--) {\n        if (vowels.indexOf(word[i]) != -1) {\n            if (i < min)\
    \ {\n                min = i;\n                index = i;\n            }\n   \
    \     }\n    }\n    if (index != 0) {\n        result = word[index];\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpxzr5oiu_.js:37:12)\n    at Object.<anonymous> (/tmp/tmpxzr5oiu_.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let closest = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            if (i > 0 && i < word.length - 1) {\n                if\
    \ (vowels.indexOf(word[i - 1]) == -1 && vowels.indexOf(word[i + 1]) == -1) {\n\
    \                    if (i < closest) {\n                        closest = i;\n\
    \                        result = word[i];\n                    }\n          \
    \      }\n            }\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp_an3hozn.js:37:12)\n    at Object.<anonymous> (/tmp/tmp_an3hozn.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    let result = \"\";\n    let wordArray = word.split(\"\");\n    for (let i\
    \ = wordArray.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(wordArray[i])\
    \ != -1) {\n            result = wordArray[i];\n            break;\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp4inphdi0.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4inphdi0.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let i = word.length - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            result\
    \ = word[i];\n            break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpfg18con3.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfg18con3.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_distance = 0;\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ != -1) {\n            for (let j = i - 1; j >= 0; j--) {\n                if\
    \ (vowels.indexOf(word[j]) != -1) {\n                    if (closest_vowel_distance\
    \ == 0) {\n                        closest_vowel = word[j];\n                \
    \        closest_vowel_distance = i - j;\n                    } else if (i - j\
    \ < closest_vowel_distance) {\n                        closest_vowel = word[j];\n\
    \                        closest_vowel_distance = i - j;\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return closest_vowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp00wj1seq.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp00wj1seq.js:56:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ -1;\n    let closestConsonantIndex = -1;\n    for (let i = word.length - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            closestVowel\
    \ = word[i];\n            closestVowelIndex = i;\n            break;\n       \
    \ }\n    }\n    for (let i = closestVowelIndex - 1; i >= 0; i--) {\n        if\
    \ (vowels.indexOf(word[i]) === -1) {\n            closestConsonantIndex = i;\n\
    \            break;\n        }\n    }\n    if (closestVowelIndex === -1 || closestConsonantIndex\
    \ === -1) {\n        return \"\";\n    }\n    return closestVowel;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpn2rx3s5j.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn2rx3s5j.js:56:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let i = word.length - 1;\n  \
    \  let isConsonant = false;\n    while (i >= 0) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (isConsonant) {\n                result = word[i];\n\
    \                break;\n            }\n        } else {\n            isConsonant\
    \ = true;\n        }\n        i--;\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpxwzxcng7.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxwzxcng7.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ 0;\n    let closestVowelDistance = 0;\n    let wordLength = word.length;\n \
    \   for (let i = 0; i < wordLength; i++) {\n        let currentLetter = word[i];\n\
    \        if (vowels.indexOf(currentLetter) >= 0) {\n            let distance =\
    \ wordLength - i;\n            if (distance > closestVowelDistance) {\n      \
    \          closestVowelDistance = distance;\n                closestVowelIndex\
    \ = i;\n            }\n        }\n    }\n    if (closestVowelDistance > 1) {\n\
    \        closestVowel = word[closestVowelIndex];\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpj5yqqu60.js:40:12)\n    at Object.<anonymous> (/tmp/tmpj5yqqu60.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestIndex = 0;\n    let wordLength\
    \ = word.length;\n    let vowelIndex = 0;\n    let consonantIndex = 0;\n    for\
    \ (let i = 0; i < wordLength; i++) {\n        if (vowels.indexOf(word[i]) !==\
    \ -1) {\n            vowelIndex = i;\n            for (let j = i; j < wordLength;\
    \ j++) {\n                if (consonants.indexOf(word[j]) !== -1) {\n        \
    \            consonantIndex = j;\n                    if (consonantIndex - vowelIndex\
    \ < closestIndex || closestIndex === 0) {\n                        closestIndex\
    \ = consonantIndex - vowelIndex;\n                        closestVowel = word[vowelIndex];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpwoxs53qp.js:43:12)\n    at Object.<anonymous> (/tmp/tmpwoxs53qp.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n    let closestConsonantIndex\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closestVowel = word[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closestVowelIndex\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) !== -1) {\n   \
    \         closestConsonantIndex = i;\n            break;\n        }\n    }\n \
    \   if (closestVowelIndex === -1 || closestConsonantIndex === -1) {\n        return\
    \ \"\";\n    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpae4sbw2k.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpae4sbw2k.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            if (i < closest_vowel_index) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = word[i];\n            }\n        }\n \
    \   }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmppz6_e2gx.js:33:12)\n    at Object.<anonymous> (/tmp/tmppz6_e2gx.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let wordArr = word.split(\"\");\n\
    \    let vowelIndex = -1;\n    let vowel = \"\";\n    for (let i = wordArr.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(wordArr[i]) !== -1) {\n    \
    \        vowelIndex = i;\n            vowel = wordArr[i];\n            break;\n\
    \        }\n    }\n    if (vowelIndex === -1) {\n        return \"\";\n    }\n\
    \    for (let i = vowelIndex - 1; i >= 0; i--) {\n        if (vowels.indexOf(wordArr[i])\
    \ === -1) {\n            return vowel;\n        }\n    }\n    return \"\";\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpz27ffny8.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz27ffny8.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = \"aeiouAEIOU\";\n    const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let i = word.length - 1;\n    while (i >=\
    \ 0) {\n        if (consonants.indexOf(word[i]) !== -1) {\n            if (i ===\
    \ word.length - 1) {\n                return \"\";\n            }\n          \
    \  else {\n                if (vowels.indexOf(word[i + 1]) !== -1) {\n       \
    \             closest_vowel = word[i + 1];\n                    break;\n     \
    \           }\n                else {\n                    return \"\";\n    \
    \            }\n            }\n        }\n        i--;\n    }\n    return closest_vowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpea_s260n.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpea_s260n.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = \"aeiouAEIOU\";\n    const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowel = \"\";\n    let consonant = \"\";\n    let closest_vowel = \"\
    \";\n    let closest_consonant = \"\";\n    for (let i = word.length - 1; i >=\
    \ 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            vowel\
    \ = word[i];\n            break;\n        }\n    }\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) !== -1) {\n   \
    \         consonant = word[i];\n            break;\n        }\n    }\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closest_vowel = word[i];\n            break;\n      \
    \  }\n    }\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ !== -1) {\n            closest_consonant = word[i];\n            break;\n  \
    \      }\n    }\n    if (vowel === \"\" || consonant === \"\") {\n        return\
    \ \"\";\n    }\n    if (vowel === closest_vowel && consonant === closest_consonant)\
    \ {\n        return vowel;\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp4ozc4ka_.js:60:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4ozc4ka_.js:72:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i > 0 && i < word.length - 1) {\n               \
    \ if (vowels.indexOf(word[i - 1]) === -1 && vowels.indexOf(word[i + 1]) === -1)\
    \ {\n                    if (i < closest_vowel_index) {\n                    \
    \    closest_vowel_index = i;\n                        closest_vowel = word[i];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp6qpym7rj.js:37:12)\n    at Object.<anonymous> (/tmp/tmp6qpym7rj.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let wordArr = word.split(\"\");\n    let vowelArr = vowels.split(\"\
    \");\n    let vowelIndex = [];\n    let closestVowel = \"\";\n    for (let i =\
    \ 0; i < wordArr.length; i++) {\n        for (let j = 0; j < vowelArr.length;\
    \ j++) {\n            if (wordArr[i] === vowelArr[j]) {\n                vowelIndex.push(i);\n\
    \            }\n        }\n    }\n    if (vowelIndex.length === 0) {\n       \
    \ return \"\";\n    }\n    else if (vowelIndex.length === 1) {\n        return\
    \ wordArr[vowelIndex[0]];\n    }\n    else {\n        for (let i = 0; i < vowelIndex.length;\
    \ i++) {\n            if (vowelIndex[i] === wordArr.length - 1) {\n          \
    \      return \"\";\n            }\n            else if (vowelIndex[i] === 0)\
    \ {\n                return \"\";\n            }\n            else if (vowelIndex[i]\
    \ === vowelIndex[i + 1] - 1) {\n                return wordArr[vowelIndex[i]];\n\
    \            }\n        }\n    }\n    return closestVowel;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpvwstuozj.js:53:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvwstuozj.js:67:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    let result = '';\n    let index = word.length - 1;\n    while (index >= 0)\
    \ {\n        if (vowels.indexOf(word[index]) !== -1) {\n            result = word[index];\n\
    \            break;\n        }\n        index--;\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpuda3al2c.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuda3al2c.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = word.length;\n  \
    \  for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            if (consonants.indexOf(word[i - 1]) > -1 && consonants.indexOf(word[i\
    \ + 1]) > -1) {\n                if (i < closestVowelIndex) {\n              \
    \      closestVowel = word[i];\n                    closestVowelIndex = i;\n \
    \               }\n            }\n        }\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp4rs17svy.js:36:12)\n    at Object.<anonymous> (/tmp/tmp4rs17svy.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let result = \"\";\n    let vowel_index = 0;\n    let consonant_index =\
    \ 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            vowel_index = i;\n            break;\n        }\n    }\n\
    \    for (let i = vowel_index - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ >= 0) {\n            consonant_index = i;\n            break;\n        }\n \
    \   }\n    if (consonant_index == 0) {\n        return result;\n    }\n    else\
    \ {\n        return word[vowel_index];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpkls8u2oo.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkls8u2oo.js:58:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let result = \"\";\n    let min_distance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            let distance = word.length - i;\n            if (distance\
    \ < min_distance) {\n                min_distance = distance;\n              \
    \  result = word[i];\n            }\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpvrijyud3.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvrijyud3.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result = \"\";\n    let wordArr\
    \ = word.split(\"\");\n    let index = wordArr.length - 1;\n    while (index >=\
    \ 0) {\n        if (vowels.indexOf(wordArr[index]) >= 0) {\n            result\
    \ = wordArr[index];\n            break;\n        }\n        index--;\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpn9cytmdd.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn9cytmdd.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ 0;\n    let closestConsonantIndex = 0;\n    let closestConsonant = \"\";\n \
    \   let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    let\
    \ wordArray = word.split(\"\");\n    for (let i = 0; i < wordArray.length; i++)\
    \ {\n        if (vowels.indexOf(wordArray[i]) > -1) {\n            closestVowel\
    \ = wordArray[i];\n            closestVowelIndex = i;\n            for (let j\
    \ = i; j < wordArray.length; j++) {\n                if (consonants.indexOf(wordArray[j])\
    \ > -1) {\n                    closestConsonant = wordArray[j];\n            \
    \        closestConsonantIndex = j;\n                    break;\n            \
    \    }\n            }\n            if (closestConsonantIndex > closestVowelIndex)\
    \ {\n                return closestVowel;\n            }\n        }\n    }\n \
    \   return \"\";\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp5gldc_mb.js:45:12)\n    at Object.<anonymous> (/tmp/tmp5gldc_mb.js:59:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 2
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestVowelIndex = 0;\n\
    \    let closestConsonantIndex = 0;\n    let closestConsonant = \"\";\n    let\
    \ consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let wordArray = word.split(\"\"\
    );\n    let wordLength = wordArray.length;\n    let vowelIndex = 0;\n    let consonantIndex\
    \ = 0;\n    let currentVowel = \"\";\n    let currentConsonant = \"\";\n    let\
    \ currentVowelIndex = 0;\n    let currentConsonantIndex = 0;\n    let currentVowelDistance\
    \ = 0;\n    let currentConsonantDistance = 0;\n    let currentVowelDistanceFromConsonant\
    \ = 0;\n    let currentConsonantDistanceFromVowel = 0;\n    let closestVowelDistanceFromConsonant\
    \ = 0;\n    let closestConsonantDistanceFromVowel = 0;\n    for (let i = 0; i\
    \ < wordLength; i++) {\n        currentVowel = wordArray[i];\n        currentVowelIndex\
    \ = i;\n        currentVowelDistance = wordLength - currentVowelIndex;\n     \
    \   vowelIndex = vowels.indexOf(currentVowel);\n        if (vowelIndex > -1) {\n\
    \            for (let j = 0; j < wordLength; j++) {\n                currentConsonant\
    \ = wordArray[j];\n                currentConsonantIndex = j;\n              \
    \  currentConsonantDistance = wordLength - currentConsonantIndex;\n          \
    \      consonantIndex = consonants.indexOf(currentConsonant);\n              \
    \  if (consonantIndex > -1) {\n                    currentVowelDistanceFromConsonant\
    \ = Math.abs(currentVowelIndex - currentConsonantIndex);\n                   \
    \ currentConsonantDistanceFromVowel = Math.abs(currentConsonantIndex - currentVowelIndex);\n\
    \                    if (currentVowelDistanceFromConsonant < currentConsonantDistanceFromVowel)\
    \ {\n                        if (currentVowelDistanceFromConsonant < closestVowelDistanceFromConson\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpjpx7plyl.ts(54,1): error TS1005: '')'' expected.

    ../../../../tmp/tmpjpx7plyl.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = -1;\n    let closest_consonant_index\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closest_vowel_index\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) !== -1) {\n   \
    \         closest_consonant_index = i;\n            break;\n        }\n    }\n\
    \    if (closest_vowel_index === -1 || closest_consonant_index === -1) {\n   \
    \     return \"\";\n    }\n    return closest_vowel;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp9hra28vg.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9hra28vg.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestIndex = 0;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n       \
    \     closestVowel = word[i];\n            closestIndex = i;\n            break;\n\
    \        }\n    }\n    if (closestVowel === \"\") {\n        return \"\";\n  \
    \  }\n    for (let i = closestIndex - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ !== -1) {\n            return closestVowel;\n        }\n    }\n    return \"\
    \";\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmprilfoto8.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmprilfoto8.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 0
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = 0;\n    let closest_vowel_distance = 0;\n    for (let i = 0; i < word.length;\
    \ i++) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            if (i > 0\
    \ && i < word.length - 1) {\n                if (vowels.indexOf(word[i - 1]) ===\
    \ -1 && vowels.indexOf(word[i + 1]) === -1) {\n                    if (closest_vowel\
    \ === \"\") {\n                        closest_vowel = word[i];\n            \
    \            closest_vowel_index = i;\n                        closest_vowel_distance\
    \ = word.length - i;\n                    } else {\n                        if\
    \ (word.length - i < closest_vowel_distance) {\n                            closest_vowel\
    \ = word[i];\n                            closest_vowel_index = i;\n         \
    \                   closest_vowel_distance = word.length - i;\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (let i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (vowels.indexOf(word[i]) == -1) {\n            return\
    \ closest_vowel;\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpie7_eo2b.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpie7_eo2b.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let wordArray = word.split(\"\"\
    );\n    let result = \"\";\n    for (let i = wordArray.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(wordArray[i]) > -1) {\n            result = wordArray[i];\n\
    \            break;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp0qg7u9s1.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0qg7u9s1.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestIndex = word.length;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestIndex) {\n                closestIndex\
    \ = i;\n                closestVowel = word[i];\n            }\n        }\n  \
    \  }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp0vtnn85q.js:33:12)\n    at Object.<anonymous> (/tmp/tmp0vtnn85q.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestIndex = word.length;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestIndex) {\n                closestIndex\
    \ = i;\n                closestVowel = word[i];\n            }\n        }\n  \
    \  }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp0vtnn85q.js:33:12)\n    at Object.<anonymous> (/tmp/tmp0vtnn85q.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestDistance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        let letter = word[i];\n\
    \        if (vowels.indexOf(letter) >= 0) {\n            let distance = word.length\
    \ - i;\n            if (distance < closestDistance) {\n                closestDistance\
    \ = distance;\n                closestVowel = letter;\n            }\n       \
    \ }\n    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp1u19bwoa.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1u19bwoa.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = 0;\n    let closest_consonant_index\
    \ = 0;\n    let closest_consonant = \"\";\n    let word_length = word.length;\n\
    \    for (let i = 0; i < word_length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    for (let i = word_length - 1;\
    \ i >= 0; i--) {\n        if (consonants.indexOf(word[i]) != -1) {\n         \
    \   closest_consonant = word[i];\n            closest_consonant_index = i;\n \
    \           break;\n        }\n    }\n    if (closest_vowel_index < closest_consonant_index)\
    \ {\n        return closest_vowel;\n    } else {\n        return \"\";\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpcn01m48t.js:48:12)\n    at Object.<anonymous> (/tmp/tmpcn01m48t.js:62:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = 'aeiouAEIOU';\n    let closest_vowel = '';\n    let closest_vowel_index =\
    \ 0;\n    let word_length = word.length;\n    for (let i = word_length - 1; i\
    \ >= 0; i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n            closest_vowel\
    \ = word[i];\n            closest_vowel_index = i;\n            break;\n     \
    \   }\n    }\n    if (closest_vowel_index === 0) {\n        return '';\n    }\n\
    \    for (let i = closest_vowel_index - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ < 0) {\n            return closest_vowel;\n        }\n    }\n    return '';\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmppklr3ci2.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmppklr3ci2.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        if (consonants.indexOf(word[i]) !== -1) {\n            for (let j\
    \ = i + 1; j < word.length; j++) {\n                if (vowels.indexOf(word[j])\
    \ !== -1) {\n                    closest_vowel = word[j];\n                  \
    \  break;\n                }\n            }\n            break;\n        }\n \
    \   }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpmwrvnvi8.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmwrvnvi8.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let closestVowel\
    \ = \"\";\n    let closestVowelIndex = 0;\n    let closestConsonantIndex = 0;\n\
    \    let closestConsonant = \"\";\n    let wordLength = word.length;\n    for\
    \ (let i = wordLength - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            closestVowel = word[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closestVowelIndex\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) >= 0) {\n     \
    \       closestConsonant = word[i];\n            closestConsonantIndex = i;\n\
    \            break;\n        }\n    }\n    if (closestVowelIndex > closestConsonantIndex)\
    \ {\n        return closestVowel;\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpp9azrfby.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp9azrfby.js:60:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ word.length;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestVowelIndex) {\n                closestVowel\
    \ = word[i];\n                closestVowelIndex = i;\n            }\n        }\n\
    \    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpq1q2bcs7.js:33:12)\n    at Object.<anonymous> (/tmp/tmpq1q2bcs7.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let closestVowel\
    \ = \"\";\n    let closestVowelIndex = word.length;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) > -1) {\n     \
    \       for (let j = i; j >= 0; j--) {\n                if (vowels.indexOf(word[j])\
    \ > -1) {\n                    if (i - j < closestVowelIndex) {\n            \
    \            closestVowelIndex = i - j;\n                        closestVowel\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return closestVowel;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpdhn0bp6c.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdhn0bp6c.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closest_vowel = \"\";\n    let closest_vowel_distance\
    \ = 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (closest_vowel_distance === 0) {\n               \
    \ closest_vowel = word[i];\n                closest_vowel_distance = word.length\
    \ - i;\n            } else {\n                if (word.length - i < closest_vowel_distance)\
    \ {\n                    closest_vowel = word[i];\n                    closest_vowel_distance\
    \ = word.length - i;\n                }\n            }\n        }\n    }\n   \
    \ return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp3lg7pdf_.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3lg7pdf_.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = -1;\n    let closest_consonant_index\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closest_vowel_index\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) !== -1) {\n   \
    \         closest_consonant_index = i;\n            break;\n        }\n    }\n\
    \    if (closest_vowel_index === -1 || closest_consonant_index === -1) {\n   \
    \     return \"\";\n    }\n    return closest_vowel;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp9hra28vg.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9hra28vg.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let index = word.length - 1;\n\
    \    while (index >= 0) {\n        if (vowels.indexOf(word[index]) != -1) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpl7vb1ypp.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl7vb1ypp.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result = \"\";\n    let vowelIndex\
    \ = 0;\n    let wordIndex = word.length - 1;\n    while (wordIndex >= 0) {\n \
    \       if (vowels.indexOf(word[wordIndex]) !== -1) {\n            vowelIndex\
    \ = wordIndex;\n            break;\n        }\n        wordIndex--;\n    }\n \
    \   if (vowelIndex === 0) {\n        return result;\n    }\n    wordIndex = vowelIndex\
    \ - 1;\n    while (wordIndex >= 0) {\n        if (vowels.indexOf(word[wordIndex])\
    \ === -1) {\n            result = word[vowelIndex];\n            break;\n    \
    \    }\n        wordIndex--;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpvev2nkau.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvev2nkau.js:58:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n    let closestConsonantIndex\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closestVowel = word[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closestVowelIndex\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) !== -1) {\n   \
    \         closestConsonantIndex = i;\n            break;\n        }\n    }\n \
    \   if (closestVowelIndex === -1 || closestConsonantIndex === -1) {\n        return\
    \ \"\";\n    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpae4sbw2k.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpae4sbw2k.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let wordArr = word.split('');\n    let vowelIndex\
    \ = wordArr.length;\n    let vowel = '';\n    for (let i = wordArr.length - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(wordArr[i]) > -1) {\n           \
    \ vowelIndex = i;\n            vowel = wordArr[i];\n            break;\n     \
    \   }\n    }\n    for (let i = vowelIndex - 1; i >= 0; i--) {\n        if (vowels.indexOf(wordArr[i])\
    \ === -1) {\n            return vowel;\n        }\n    }\n    return '';\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp8ryit6h4.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8ryit6h4.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closest_vowel = \"\";\n    let closest_vowel_index = -1;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index ===\
    \ -1) {\n        return \"\";\n    }\n    for (let i = closest_vowel_index - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(word[i]) === -1) {\n            return\
    \ closest_vowel;\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpvoj2dkee.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvoj2dkee.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) >= 0) {\n            closestVowel = word[i];\n\
    \            if (consonants.indexOf(word[i - 1]) >= 0 && consonants.indexOf(word[i\
    \ + 1]) >= 0) {\n                return closestVowel;\n            }\n       \
    \ }\n    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'e'\n\nshould equal\n\n''\n    at test (/tmp/tmp28r40q8i.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmp28r40q8i.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'e',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = 0;\n    let closestConsonantIndex\
    \ = 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            closestVowel = word[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closestVowelIndex\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) >= 0) {\n     \
    \       closestConsonantIndex = i;\n            break;\n        }\n    }\n   \
    \ if (closestVowelIndex - closestConsonantIndex == 1) {\n        return \"\";\n\
    \    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmp0rh0i4e8.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0rh0i4e8.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ word.length;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestVowelIndex) {\n                closestVowel\
    \ = word[i];\n                closestVowelIndex = i;\n            }\n        }\n\
    \    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpq1q2bcs7.js:33:12)\n    at Object.<anonymous> (/tmp/tmpq1q2bcs7.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestIndex = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            if (i > 0 && i < word.length - 1) {\n                if\
    \ (vowels.indexOf(word[i - 1]) == -1 && vowels.indexOf(word[i + 1]) == -1) {\n\
    \                    if (i < closestIndex) {\n                        closestIndex\
    \ = i;\n                        closestVowel = word[i];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpfpoouhzc.js:37:12)\n    at Object.<anonymous> (/tmp/tmpfpoouhzc.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        if (consonants.indexOf(word[i]) >= 0) {\n            for (let j =\
    \ i + 1; j < word.length; j++) {\n                if (vowels.indexOf(word[j])\
    \ >= 0) {\n                    closestVowel = word[j];\n                    break;\n\
    \                }\n            }\n            break;\n        }\n    }\n    return\
    \ closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpqd_14bj4.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqd_14bj4.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 2
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let word_arr = word.split(\"\");\n\
    \    let vowel_index = 0;\n    let vowel_count = 0;\n    let vowel_arr = [];\n\
    \    let vowel_arr_index = 0;\n    let vowel_arr_count = 0;\n    let vowel_arr_length\
    \ = 0;\n    let vowel_arr_last_index = 0;\n    let vowel_arr_last_count = 0;\n\
    \    let vowel_arr_last_length = 0;\n    let vowel_arr_last_value = \"\";\n  \
    \  let vowel_arr_last_value_index = 0;\n    let vowel_arr_last_value_count = 0;\n\
    \    let vowel_arr_last_value_length = 0;\n    let vowel_arr_last_value_last_index\
    \ = 0;\n    let vowel_arr_last_value_last_count = 0;\n    let vowel_arr_last_value_last_length\
    \ = 0;\n    let vowel_arr_last_value_last_value = \"\";\n    let vowel_arr_last_value_last_value_index\
    \ = 0;\n    let vowel_arr_last_value_last_value_count = 0;\n    let vowel_arr_last_value_last_value_length\
    \ = 0;\n    let vowel_arr_last_value_last_value_last_index = 0;\n    let vowel_arr_last_value_last_value_last_count\
    \ = 0;\n    let vowel_arr_last_value_last_value_last_length = 0;\n    let vowel_arr_last_value_last_value_last_value\
    \ = \"\";\n    let vowel_arr_last_value_last_value_last_value_index = 0;\n   \
    \ let vowel_arr_last_value_last_value_last_value_count = 0;\n    let vowel_arr_last_value_last_value_last_value_length\
    \ = 0;\n    let vowel_arr_last_value_last_value_last_value_last_index = 0;\n \
    \   let vowel_arr_last_value_last_value_last_value_\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp9l236mhx.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowel: string = \"\";\n    let consonant: string = \"\";\n    let result:\
    \ string = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n        if\
    \ (vowels.indexOf(word[i]) >= 0) {\n            vowel = word[i];\n           \
    \ break;\n        }\n    }\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (consonants.indexOf(word[i]) >= 0) {\n            consonant = word[i];\n\
    \            break;\n        }\n    }\n    if (vowel && consonant) {\n       \
    \ for (let i = word.length - 1; i >= 0; i--) {\n            if (word[i] === vowel)\
    \ {\n                result = vowel;\n                break;\n            }\n\
    \            if (word[i] === consonant) {\n                break;\n          \
    \  }\n        }\n    }\n    return result;\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpd36_95zj.js:54:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd36_95zj.js:68:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: '




    '
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let vowel_index = -1;\n    let consonant_index\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_index = i;\n            break;\n        }\n    }\n\
    \    for (let i = vowel_index - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ != -1) {\n            consonant_index = i;\n            break;\n        }\n\
    \    }\n    if (vowel_index != -1 && consonant_index != -1) {\n        closest_vowel\
    \ = word[vowel_index];\n    }\n    return closest_vowel;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp3ir6c8wv.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3ir6c8wv.js:56:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = '';\n\
    \    let index = word.length - 1;\n    let flag = false;\n    while (index >=\
    \ 0) {\n        if (vowels.indexOf(word[index]) >= 0) {\n            if (flag)\
    \ {\n                result = word[index];\n                break;\n         \
    \   }\n        } else {\n            flag = true;\n        }\n        index--;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp_sjn22qr.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_sjn22qr.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267979
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    let result = '';\n    let last_consonant = '';\n    let last_vowel = '';\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            last_vowel = word[i];\n            if (last_consonant !==\
    \ '') {\n                result = last_vowel;\n                break;\n      \
    \      }\n        } else if (consonants.indexOf(word[i]) > -1) {\n           \
    \ last_consonant = word[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp7vhv9t2j.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7vhv9t2j.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: 'u


    i

    a

    '
  timestamp: 1660267981
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let index = word.length - 1;\n\
    \    while (index >= 0) {\n        if (vowels.indexOf(word[index]) >= 0) {\n \
    \           result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpigjav1sy.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpigjav1sy.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267972
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let i = word.length - 1;\n  \
    \  while (i >= 0) {\n        if (vowels.indexOf(word[i]) !== -1) {\n         \
    \   result = word[i];\n            break;\n        }\n        i--;\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpt_x5zk0e.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpt_x5zk0e.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267981
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let consonants =\
    \ ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M',\
    \ 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'];\n    let vowel_index\
    \ = -1;\n    let consonant_index = -1;\n    for (let i = word.length - 1; i >=\
    \ 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            vowel_index\
    \ = i;\n        }\n        if (consonants.indexOf(word[i]) !== -1) {\n       \
    \     consonant_index = i;\n            break;\n        }\n    }\n    if (vowel_index\
    \ === -1 || consonant_index === -1) {\n        return '';\n    }\n    return word[vowel_index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmp9dscvyu2.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9dscvyu2.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267981
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestIndex = -1;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            closestVowel = word[i];\n            closestIndex = i;\n\
    \            break;\n        }\n    }\n    if (closestIndex > 0) {\n        for\
    \ (let i = closestIndex - 1; i >= 0; i--) {\n            if (vowels.indexOf(word[i])\
    \ < 0) {\n                return closestVowel;\n            }\n        }\n   \
    \ }\n    return \"\";\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpk14wxiz7.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk14wxiz7.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267981
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let vowel_index = word.length;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n         \
    \   vowel_index = i;\n            break;\n        }\n    }\n    if (vowel_index\
    \ == word.length) {\n        return \"\";\n    }\n    for (let i = vowel_index\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) < 0) {\n          \
    \  return word[vowel_index];\n        }\n    }\n    return \"\";\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpr1x8jj83.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr1x8jj83.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267981
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let index = word.length - 1;\n    let vowel = \"\";\n\
    \    while (index > 0) {\n        if (vowels.indexOf(word[index]) >= 0) {\n  \
    \          vowel = word[index];\n            if (vowels.indexOf(word[index - 1])\
    \ < 0) {\n                return vowel;\n            }\n        }\n        index--;\n\
    \    }\n    return \"\";\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp_0ifzz_p.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_0ifzz_p.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267981
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let word_arr = word.split(\"\");\n\
    \    let vowel_index = -1;\n    let vowel_arr = [];\n    for (let i = 0; i < word_arr.length;\
    \ i++) {\n        if (vowels.indexOf(word_arr[i]) > -1) {\n            vowel_index\
    \ = i;\n            vowel_arr.push(word_arr[i]);\n        }\n    }\n    if (vowel_index\
    \ === -1) {\n        return \"\";\n    }\n    if (vowel_index === 0) {\n     \
    \   return \"\";\n    }\n    if (vowel_index === word_arr.length - 1) {\n    \
    \    return \"\";\n    }\n    if (vowels.indexOf(word_arr[vowel_index - 1]) >\
    \ -1) {\n        return \"\";\n    }\n    if (vowels.indexOf(word_arr[vowel_index\
    \ + 1]) > -1) {\n        return \"\";\n    }\n    return vowel_arr[vowel_arr.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'i'\n    at test (/tmp/tmpdt0451ip.js:57:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdt0451ip.js:61:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'i',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestDistance = 0;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            if (closestVowel === \"\") {\n                closestVowel\
    \ = word[i];\n                closestDistance = word.length - i;\n           \
    \ } else {\n                if (word.length - i < closestDistance) {\n       \
    \             closestVowel = word[i];\n                    closestDistance = word.length\
    \ - i;\n                }\n            }\n        }\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp91e8v484.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp91e8v484.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267981
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = 0;\n    let closestConsonantIndex\
    \ = 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closestVowel = word[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closestVowelIndex\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) !== -1) {\n   \
    \         closestConsonantIndex = i;\n            break;\n        }\n    }\n \
    \   if (closestVowelIndex - closestConsonantIndex === 1) {\n        return \"\"\
    ;\n    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpamjiqs9x.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpamjiqs9x.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n    let closestConsonantIndex\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closestVowel = word[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closestVowelIndex\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) !== -1) {\n   \
    \         closestConsonantIndex = i;\n            break;\n        }\n    }\n \
    \   if (closestVowelIndex === -1 || closestConsonantIndex === -1) {\n        return\
    \ \"\";\n    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpae4sbw2k.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpae4sbw2k.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267975
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result = \"\";\n    let index\
    \ = 0;\n    let counter = 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (vowels.indexOf(word[i]) !== -1) {\n            index = i;\n     \
    \       counter++;\n        }\n        if (counter === 2) {\n            result\
    \ = word[index];\n            break;\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp705nfqmk.js:36:12)\n    at Object.<anonymous> (/tmp/tmp705nfqmk.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267981
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = word.length;\n  \
    \  let closestConsonantIndex = 0;\n    for (let i = 0; i < word.length; i++) {\n\
    \        if (vowels.indexOf(word[i]) != -1) {\n            for (let j = i + 1;\
    \ j < word.length; j++) {\n                if (consonants.indexOf(word[j]) !=\
    \ -1) {\n                    if (j - i < closestVowelIndex - closestConsonantIndex)\
    \ {\n                        closestVowelIndex = i;\n                        closestConsonantIndex\
    \ = j;\n                        closestVowel = word[i];\n                    }\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpr707_tv7.js:41:12)\n    at Object.<anonymous> (/tmp/tmpr707_tv7.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267981
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestIndex = word.length;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestIndex) {\n                closestIndex\
    \ = i;\n                closestVowel = word[i];\n            }\n        }\n  \
    \  }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp0vtnn85q.js:33:12)\n    at Object.<anonymous> (/tmp/tmp0vtnn85q.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let closestVowel = \"\";\n    let\
    \ closestVowelIndex = -1;\n    let closestConsonantIndex = -1;\n    for (let i\
    \ = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1)\
    \ {\n            closestVowel = word[i];\n            closestVowelIndex = i;\n\
    \            break;\n        }\n    }\n    for (let i = closestVowelIndex - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(word[i]) === -1) {\n            closestConsonantIndex\
    \ = i;\n            break;\n        }\n    }\n    if (closestVowelIndex === -1\
    \ || closestConsonantIndex === -1) {\n        return \"\";\n    }\n    return\
    \ closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpfw2mmhyi.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfw2mmhyi.js:56:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    for (let i = word.length - 1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n            result\
    \ = word[i];\n            break;\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp026mm3er.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp026mm3er.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    const consonants = [\"b\"\
    , \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let closest_vowel\
    \ = \"\";\n    let closest_vowel_index = word.length;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.includes(word[i])) {\n            if\
    \ (i < closest_vowel_index) {\n                closest_vowel = word[i];\n    \
    \            closest_vowel_index = i;\n            }\n        }\n        if (consonants.includes(word[i]))\
    \ {\n            if (i < closest_vowel_index) {\n                return closest_vowel;\n\
    \            }\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpwam8gpuc.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwam8gpuc.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestIndex = word.length;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestIndex) {\n                closestIndex\
    \ = i;\n                closestVowel = word[i];\n            }\n        }\n  \
    \  }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp0vtnn85q.js:33:12)\n    at Object.<anonymous> (/tmp/tmp0vtnn85q.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ word.length;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            if (i < closestVowelIndex) {\n                closestVowel\
    \ = word[i];\n                closestVowelIndex = i;\n            }\n        }\n\
    \    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpnvqmd9g8.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnvqmd9g8.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result = \"\";\n    let wordLength\
    \ = word.length;\n    let i = wordLength - 1;\n    while (i >= 0) {\n        let\
    \ char = word[i];\n        if (vowels.indexOf(char) >= 0) {\n            result\
    \ = char;\n            break;\n        }\n        i--;\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp1coofcfx.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1coofcfx.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestDistance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            let distance = word.length - i;\n            if (distance\
    \ < closestDistance) {\n                closestDistance = distance;\n        \
    \        closestVowel = word[i];\n            }\n        }\n    }\n    return\
    \ closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp9nynejhz.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9nynejhz.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_distance =\
    \ word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            let distance = word.length - i;\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest_vowel = word[i];\n            }\n        }\n    }\n    return\
    \ closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpy0s3yz1x.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy0s3yz1x.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let result = \"\";\n    let index = word.length - 1;\n    let found = false;\n\
    \    while (index >= 0 && !found) {\n        if (consonants.indexOf(word[index])\
    \ !== -1) {\n            let i = index - 1;\n            while (i >= 0 && !found)\
    \ {\n                if (vowels.indexOf(word[i]) !== -1) {\n                 \
    \   result = word[i];\n                    found = true;\n                }\n\
    \                i--;\n            }\n        }\n        index--;\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp3sr155v2.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3sr155v2.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let vowel = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n \
    \       if (vowels.indexOf(word[i]) !== -1) {\n            vowel = word[i];\n\
    \            break;\n        }\n    }\n    if (vowel === \"\") {\n        return\
    \ \"\";\n    }\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ !== -1) {\n            if (vowel === word[i + 1]) {\n                return\
    \ vowel;\n            }\n        }\n    }\n    return \"\";\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp4y17hxbx.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4y17hxbx.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = -1;\n    for (let\
    \ i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) >=\
    \ 0) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    if (closest_vowel_index == -1)\
    \ {\n        return \"\";\n    }\n    for (let i = closest_vowel_index - 1; i\
    \ >= 0; i--) {\n        if (consonants.indexOf(word[i]) >= 0) {\n            return\
    \ closest_vowel;\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpz88gf8v0.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz88gf8v0.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n         \
    \   closestVowel = word[i];\n            break;\n        }\n    }\n    return\
    \ closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpe08ytfzs.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe08ytfzs.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closest_vowel = \"\";\n    let closest_distance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            let distance = word.length - i;\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest_vowel = word[i];\n            }\n        }\n    }\n    return\
    \ closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpl0q4fv9u.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl0q4fv9u.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = 0;\n    let closest_vowel_distance\
    \ = 0;\n    let word_length = word.length;\n    for (let i = 0; i < word_length;\
    \ i++) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            let distance\
    \ = 0;\n            for (let j = i + 1; j < word_length; j++) {\n            \
    \    if (consonants.indexOf(word[j]) !== -1) {\n                    distance++;\n\
    \                } else {\n                    break;\n                }\n   \
    \         }\n            if (distance > closest_vowel_distance) {\n          \
    \      closest_vowel_distance = distance;\n                closest_vowel_index\
    \ = i;\n            }\n        }\n    }\n    if (closest_vowel_distance > 0) {\n\
    \        closest_vowel = word[closest_vowel_index];\n    }\n    return closest_vowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpmwffj081.js:50:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmwffj081.js:62:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let result = \"\";\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (consonants.indexOf(word[i]) !== -1) {\n            for (let j = i\
    \ + 1; j < word.length; j++) {\n                if (vowels.indexOf(word[j]) !==\
    \ -1) {\n                    result = word[j];\n                    break;\n \
    \               }\n            }\n            break;\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpyozglqcb.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyozglqcb.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n    let closestConsonantIndex\
    \ = -1;\n    let closestConsonant = \"\";\n    let wordArray = word.split(\"\"\
    );\n    for (let i = wordArray.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(wordArray[i])\
    \ !== -1) {\n            closestConsonantIndex = i;\n            closestConsonant\
    \ = wordArray[i];\n            break;\n        }\n    }\n    for (let i = closestConsonantIndex\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(wordArray[i]) !== -1) {\n  \
    \          closestVowelIndex = i;\n            closestVowel = wordArray[i];\n\
    \            break;\n        }\n    }\n    if (closestVowelIndex === -1) {\n \
    \       return \"\";\n    }\n    return closestVowel;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp5wgzie49.js:48:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5wgzie49.js:60:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let index = word.length - 1;\n\
    \    while (index >= 0) {\n        if (vowels.indexOf(word[index]) !== -1) {\n\
    \            result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp5_ozsm9e.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5_ozsm9e.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_distance =\
    \ word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            let distance = word.length - i;\n            if (distance\
    \ < closest_distance) {\n                closest_distance = distance;\n      \
    \          closest_vowel = word[i];\n            }\n        }\n    }\n    return\
    \ closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp6er19gdk.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6er19gdk.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n  let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let closestVowel = \"\";\n  let closestIndex\
    \ = word.length;\n  for (let i = 0; i < word.length; i++) {\n    if (vowels.includes(word[i]))\
    \ {\n      if (i > 0 && i < word.length - 1) {\n        if (!vowels.includes(word[i\
    \ - 1]) && !vowels.includes(word[i + 1])) {\n          if (i < closestIndex) {\n\
    \            closestIndex = i;\n            closestVowel = word[i];\n        \
    \  }\n        }\n      }\n    }\n  }\n  return closestVowel;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpqbrorzbx.js:37:12)\n    at Object.<anonymous> (/tmp/tmpqbrorzbx.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let vowel_index = 0;\n    let consonant_index\
    \ = 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            vowel_index = i;\n            break;\n        }\n    }\n\
    \    for (let i = vowel_index - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ >= 0) {\n            consonant_index = i;\n            break;\n        }\n \
    \   }\n    if (consonant_index == 0) {\n        return \"\";\n    }\n    else\
    \ {\n        return word[vowel_index];\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpenh3qvw1.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpenh3qvw1.js:58:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            closestVowel = word[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    if (closestVowelIndex == -1)\
    \ {\n        return \"\";\n    }\n    for (let i = closestVowelIndex - 1; i >=\
    \ 0; i--) {\n        if (vowels.indexOf(word[i]) == -1) {\n            return\
    \ closestVowel;\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp5dmynbxk.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5dmynbxk.js:54:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let result = \"\";\n    let index = word.length - 1;\n   \
    \ while (index >= 0) {\n        if (vowels.indexOf(word[index]) >= 0) {\n    \
    \        result = word[index];\n            if (index > 0 && vowels.indexOf(word[index\
    \ - 1]) < 0) {\n                break;\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'e'\n\nshould equal\n\n''\n    at test (/tmp/tmp4zctvqe6.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4zctvqe6.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'e',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let result = \"\";\n    let closest = word.length;\n    for\
    \ (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i]) !=\
    \ -1) {\n            if (i > 0 && i < word.length - 1) {\n                if (vowels.indexOf(word[i\
    \ - 1]) == -1 && vowels.indexOf(word[i + 1]) == -1) {\n                    if\
    \ (i < closest) {\n                        closest = i;\n                    \
    \    result = word[i];\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp5a_cws9a.js:37:12)\n    at Object.<anonymous> (/tmp/tmp5a_cws9a.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closest = \"\";\n    let closest_distance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        let letter = word[i];\n\
    \        if (vowels.indexOf(letter) >= 0) {\n            let distance = word.length\
    \ - i;\n            if (distance < closest_distance) {\n                closest\
    \ = letter;\n                closest_distance = distance;\n            }\n   \
    \     }\n    }\n    return closest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpxvq4a0a3.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxvq4a0a3.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i > 0 && i < word.length - 1) {\n               \
    \ if (vowels.indexOf(word[i - 1]) === -1 && vowels.indexOf(word[i + 1]) === -1)\
    \ {\n                    if (i < closest_vowel_index) {\n                    \
    \    closest_vowel = word[i];\n                        closest_vowel_index = i;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpovz1kqse.js:37:12)\n    at Object.<anonymous> (/tmp/tmpovz1kqse.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            if (i < closest_vowel_index) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = word[i];\n            }\n        }\n \
    \   }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmppz6_e2gx.js:33:12)\n    at Object.<anonymous> (/tmp/tmppz6_e2gx.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let closest_vowel_index = -1;\n    let closest_consonant_index\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closest_vowel = word[i];\n            closest_vowel_index\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closest_vowel_index\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) !== -1) {\n   \
    \         closest_consonant_index = i;\n            break;\n        }\n    }\n\
    \    if (closest_vowel_index === -1 || closest_consonant_index === -1) {\n   \
    \     return \"\";\n    }\n    return closest_vowel;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp9hra28vg.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9hra28vg.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_index\
    \ = word.length;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i > 0 && i < word.length - 1) {\n               \
    \ if (vowels.indexOf(word[i - 1]) === -1 && vowels.indexOf(word[i + 1]) === -1)\
    \ {\n                    if (i < closest_vowel_index) {\n                    \
    \    closest_vowel_index = i;\n                        closest_vowel = word[i];\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp6qpym7rj.js:37:12)\n    at Object.<anonymous> (/tmp/tmp6qpym7rj.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267976
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ word.length;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            if (i < closestVowelIndex) {\n                closestVowel\
    \ = word[i];\n                closestVowelIndex = i;\n            }\n        }\n\
    \    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpnvqmd9g8.js:33:12)\n    at Object.<anonymous> (/tmp/tmpnvqmd9g8.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267982
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let closest = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i > 0 && i < word.length - 1) {\n               \
    \ if (vowels.indexOf(word[i - 1]) === -1 && vowels.indexOf(word[i + 1]) === -1)\
    \ {\n                    if (i < closest) {\n                        closest =\
    \ i;\n                        result = word[i];\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp3rbag7ws.js:37:12)\n    at Object.<anonymous> (/tmp/tmp3rbag7ws.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let distance = 0;\n  \
    \  for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            if (distance > 0) {\n                return closest_vowel;\n\
    \            }\n            closest_vowel = word[i];\n        } else {\n     \
    \       distance++;\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpkctbn999.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkctbn999.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ word.length;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestVowelIndex) {\n                closestVowel\
    \ = word[i];\n                closestVowelIndex = i;\n            }\n        }\n\
    \    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpq1q2bcs7.js:33:12)\n    at Object.<anonymous> (/tmp/tmpq1q2bcs7.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267978
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = \"aeiouAEIOU\";\n    const consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n    let closestConsonantIndex\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ > -1) {\n            closestVowel = word[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closestVowelIndex\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) > -1) {\n     \
    \       closestConsonantIndex = i;\n            break;\n        }\n    }\n   \
    \ if (closestVowelIndex > -1 && closestConsonantIndex > -1) {\n        return\
    \ closestVowel;\n    }\n    return \"\";\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpvbpm_bx4.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvbpm_bx4.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = word.length;\n  \
    \  for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ !== -1) {\n            for (let j = i; j >= 0; j--) {\n                if (vowels.indexOf(word[j])\
    \ !== -1) {\n                    if (i - j < closestVowelIndex) {\n          \
    \              closestVowelIndex = i - j;\n                        closestVowel\
    \ = word[j];\n                    }\n                    break;\n            \
    \    }\n            }\n        }\n    }\n    return closestVowel;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmppjmtoh9u.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmppjmtoh9u.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = \"aeiou\";\n    const word_array = word.split(\"\");\n    let vowel_index\
    \ = -1;\n    for (let i = word_array.length - 1; i >= 0; i--) {\n        if (vowels.includes(word_array[i]))\
    \ {\n            vowel_index = i;\n            break;\n        }\n    }\n    if\
    \ (vowel_index === -1) {\n        return \"\";\n    }\n    for (let i = vowel_index\
    \ - 1; i >= 0; i--) {\n        if (!vowels.includes(word_array[i])) {\n      \
    \      return word_array[vowel_index];\n        }\n    }\n    return \"\";\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpwl_l51kb.js:43:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwl_l51kb.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = 0;\n    let closestConsonantIndex\
    \ = 0;\n    let closestConsonant = \"\";\n    for (let i = word.length - 1; i\
    \ >= 0; i--) {\n        if (vowels.indexOf(word[i]) > -1) {\n            closestVowel\
    \ = word[i];\n            closestVowelIndex = i;\n            break;\n       \
    \ }\n    }\n    for (let i = closestVowelIndex - 1; i >= 0; i--) {\n        if\
    \ (consonants.indexOf(word[i]) > -1) {\n            closestConsonant = word[i];\n\
    \            closestConsonantIndex = i;\n            break;\n        }\n    }\n\
    \    if (closestVowelIndex > closestConsonantIndex) {\n        return closestVowel;\n\
    \    } else {\n        return \"\";\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpz_cexk8c.js:49:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz_cexk8c.js:61:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267984
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let cons = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) !== -1) {\n            closestVowel =\
    \ word[i];\n            break;\n        }\n    }\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (cons.indexOf(word[i]) !== -1) {\n         \
    \   if (vowels.indexOf(word[i - 1]) !== -1) {\n                closestVowel =\
    \ \"\";\n            }\n            break;\n        }\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpbje9rk7t.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbje9rk7t.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let vowelIndex = -1;\n    let consonantIndex\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ !== -1) {\n            consonantIndex = i;\n            break;\n        }\n\
    \    }\n    for (let i = consonantIndex - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            vowelIndex = i;\n            break;\n        }\n    }\n\
    \    if (vowelIndex !== -1 && consonantIndex !== -1) {\n        closestVowel =\
    \ word[vowelIndex];\n    }\n    return closestVowel;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpum9i0ca4.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmpum9i0ca4.js:56:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closest_vowel = \"\";\n    let vowel_index = 0;\n    let consonant_index\
    \ = 0;\n    let vowel_found = false;\n    let consonant_found = false;\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            vowel_index = i;\n            vowel_found = true;\n  \
    \      }\n        if (consonants.indexOf(word[i]) != -1) {\n            consonant_index\
    \ = i;\n            consonant_found = true;\n        }\n        if (vowel_found\
    \ && consonant_found) {\n            closest_vowel = word[vowel_index];\n    \
    \        break;\n        }\n    }\n    return closest_vowel;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpkshbwszo.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkshbwszo.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestIndex = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            if (i > 0 && i < word.length - 1) {\n                if\
    \ (vowels.indexOf(word[i - 1]) < 0 && vowels.indexOf(word[i + 1]) < 0) {\n   \
    \                 if (i < closestIndex) {\n                        closestIndex\
    \ = i;\n                        closestVowel = word[i];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmph61kzbch.js:37:12)\n    at Object.<anonymous> (/tmp/tmph61kzbch.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result = \"\";\n    let index\
    \ = word.length - 1;\n    while (index >= 0) {\n        if (vowels.indexOf(word[index])\
    \ >= 0) {\n            result = word[index];\n            break;\n        }\n\
    \        index--;\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpkl5im9qw.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkl5im9qw.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    let consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    let word_arr = word.split('');\n    let vowel_index = -1;\n    let consonant_index\
    \ = -1;\n    let result = '';\n    for (let i = word_arr.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word_arr[i]) > -1) {\n            vowel_index\
    \ = i;\n            break;\n        }\n    }\n    for (let i = vowel_index - 1;\
    \ i >= 0; i--) {\n        if (consonants.indexOf(word_arr[i]) > -1) {\n      \
    \      consonant_index = i;\n            break;\n        }\n    }\n    if (vowel_index\
    \ > -1 && consonant_index > -1) {\n        result = word_arr[vowel_index];\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp9uzte1p6.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9uzte1p6.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let result\
    \ = \"\";\n    let word_array = word.split(\"\");\n    let word_length = word_array.length;\n\
    \    let i = word_length - 1;\n    while (i >= 0) {\n        if (consonants.indexOf(word_array[i])\
    \ >= 0) {\n            if (i == word_length - 1) {\n                i--;\n   \
    \             continue;\n            }\n            if (vowels.indexOf(word_array[i\
    \ + 1]) >= 0) {\n                result = word_array[i + 1];\n               \
    \ break;\n            }\n        }\n        i--;\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp2cw0ggrt.js:45:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2cw0ggrt.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ 0;\n    let closestConsonantIndex = 0;\n    for (let i = word.length - 1; i\
    \ >= 0; i--) {\n        if (vowels.indexOf(word[i]) !== -1) {\n            closestVowel\
    \ = word[i];\n            closestVowelIndex = i;\n            break;\n       \
    \ }\n    }\n    for (let i = closestVowelIndex - 1; i >= 0; i--) {\n        if\
    \ (vowels.indexOf(word[i]) === -1) {\n            closestConsonantIndex = i;\n\
    \            break;\n        }\n    }\n    if (closestVowelIndex - closestConsonantIndex\
    \ === 1) {\n        return \"\";\n    }\n    return closestVowel;\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpe__d3t7_.js:46:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe__d3t7_.js:60:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: '


    i

    a

    '
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let index = word.length - 1;\n\
    \    while (index > 0) {\n        if (vowels.indexOf(word[index]) !== -1) {\n\
    \            if (vowels.indexOf(word[index - 1]) === -1) {\n                result\
    \ = word[index];\n                break;\n            }\n        }\n        index--;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmp5jxnzf2y.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5jxnzf2y.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267985
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestVowelIndex = word.length;\n\
    \    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closestVowelIndex) {\n                closestVowel\
    \ = word[i];\n                closestVowelIndex = i;\n            }\n        }\n\
    \    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp18vr_vyu.js:33:12)\n    at Object.<anonymous> (/tmp/tmp18vr_vyu.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267973
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    let closestVowelIndex = -1;\n    let closestConsonantIndex\
    \ = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            if (closestVowelIndex < 0) {\n                closestVowelIndex\
    \ = i;\n            }\n        } else if (consonants.indexOf(word[i]) >= 0) {\n\
    \            if (closestVowelIndex >= 0 && closestConsonantIndex < 0) {\n    \
    \            closestConsonantIndex = i;\n                break;\n            }\n\
    \        }\n    }\n    if (closestVowelIndex >= 0 && closestConsonantIndex >=\
    \ 0) {\n        closestVowel = word[closestVowelIndex];\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpsfb1iu4z.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsfb1iu4z.js:57:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let wordArr = word.split(\"\");\n\
    \    let vowelIndex = -1;\n    for (let i = wordArr.length - 1; i >= 0; i--) {\n\
    \        if (vowels.indexOf(wordArr[i]) > -1) {\n            vowelIndex = i;\n\
    \            break;\n        }\n    }\n    if (vowelIndex === -1) {\n        return\
    \ \"\";\n    }\n    if (vowelIndex === 0) {\n        return \"\";\n    }\n   \
    \ if (vowelIndex === wordArr.length - 1) {\n        return \"\";\n    }\n    if\
    \ (vowels.indexOf(wordArr[vowelIndex - 1]) > -1) {\n        return \"\";\n   \
    \ }\n    if (vowels.indexOf(wordArr[vowelIndex + 1]) > -1) {\n        return \"\
    \";\n    }\n    return wordArr[vowelIndex];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'i'\n    at test (/tmp/tmpdwwp7aqw.js:56:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdwwp7aqw.js:60:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'i',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestDistance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        let letter = word[i];\n\
    \        if (vowels.indexOf(letter) > -1) {\n            let distance = word.length\
    \ - i;\n            if (distance < closestDistance) {\n                closestDistance\
    \ = distance;\n                closestVowel = letter;\n            }\n       \
    \ }\n    }\n    return closestVowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp7xmxacmj.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7xmxacmj.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    let closestVowel = \"\";\n    for (let i = word.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) != -1) {\n            closestVowel =\
    \ word[i];\n            break;\n        }\n    }\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i]) != -1) {\n    \
    \        if (vowels.indexOf(word[i - 1]) != -1) {\n                return closestVowel;\n\
    \            }\n        }\n    }\n    return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpbpjna235.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbpjna235.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closest_vowel = \"\";\n    let closest_vowel_distance\
    \ = 0;\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ != -1) {\n            let distance = word.length - i;\n            if (distance\
    \ > closest_vowel_distance) {\n                closest_vowel = word[i];\n    \
    \            closest_vowel_distance = distance;\n            }\n        }\n  \
    \  }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpo8a1kt_t.js:34:12)\n    at Object.<anonymous> (/tmp/tmpo8a1kt_t.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closestVowel = \"\";\n    let closestDistance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            if (i > 0 && i < word.length - 1) {\n                if\
    \ (vowels.indexOf(word[i - 1]) < 0 && vowels.indexOf(word[i + 1]) < 0) {\n   \
    \                 if (i < closestDistance) {\n                        closestDistance\
    \ = i;\n                        closestVowel = word[i];\n                    }\n\
    \                }\n            }\n        }\n    }\n    return closestVowel;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmp58salzlv.js:37:12)\n    at Object.<anonymous> (/tmp/tmp58salzlv.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result = \"\";\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.includes(word[i]))\
    \ {\n            result = word[i];\n            break;\n        }\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpve31ctoa.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpve31ctoa.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let result = \"\";\n    let index = word.length - 1;\n   \
    \ while (index >= 0) {\n        if (vowels.indexOf(word[index]) >= 0) {\n    \
    \        result = word[index];\n            break;\n        }\n        index--;\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmps1er6gck.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmps1er6gck.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let last_vowel = -1;\n    let\
    \ last_consonant = -1;\n    for (let i = word.length - 1; i >= 0; i--) {\n   \
    \     if (vowels.indexOf(word[i]) >= 0) {\n            last_vowel = i;\n     \
    \   } else {\n            last_consonant = i;\n        }\n        if (last_vowel\
    \ >= 0 && last_consonant >= 0) {\n            result = word[last_vowel];\n   \
    \         break;\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp93tkn3fg.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmp93tkn3fg.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let closest_vowel = \"\";\n    let closest_vowel_index = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closest_vowel_index) {\n                closest_vowel_index\
    \ = i;\n                closest_vowel = word[i];\n            }\n        }\n \
    \   }\n    return closest_vowel;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmpyey80t3v.js:33:12)\n    at Object.<anonymous> (/tmp/tmpyey80t3v.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestDistance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            let distance = word.length - i;\n            if (distance\
    \ < closestDistance) {\n                closestDistance = distance;\n        \
    \        closestVowel = word[i];\n            }\n        }\n    }\n    return\
    \ closestVowel;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp8xaehvje.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8xaehvje.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\"\n    let closest_vowel = \"\"\n    let closest_vowel_index\
    \ = word.length\n    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            if (i < closest_vowel_index) {\n                closest_vowel_index\
    \ = i\n                closest_vowel = word[i]\n            }\n        }\n   \
    \ }\n    return closest_vowel\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'o'\n\nshould equal\n\n'u'\n    at test\
    \ (/tmp/tmprrwa6ft7.js:33:12)\n    at Object.<anonymous> (/tmp/tmprrwa6ft7.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let closestVowelIndex =\
    \ word.length;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            closestVowel = word[i];\n            closestVowelIndex\
    \ = i;\n            break;\n        }\n    }\n    for (let i = closestVowelIndex\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n         \
    \   return \"\";\n        }\n    }\n    return closestVowel;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpmwj94kgi.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmwj94kgi.js:51:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiou\";\n    let result = \"\";\n    let min_distance = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            let distance = word.length - i;\n            if (distance\
    \ < min_distance) {\n                min_distance = distance;\n              \
    \  result = word[i];\n            }\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmp579qyfgn.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmp579qyfgn.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let closestVowel = \"\";\n    let wordLength = word.length;\n\
    \    let i = wordLength - 1;\n    while (i >= 0) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            closestVowel = word[i];\n            break;\n       \
    \ }\n        i--;\n    }\n    return closestVowel;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'a'\n\nshould equal\n\n''\n    at test (/tmp/tmpkvcmvpot.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkvcmvpot.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = \"aeiouAEIOU\";\n    let result = \"\";\n    let index = word.length - 1;\n\
    \    while (index > 0) {\n        if (vowels.indexOf(word[index]) > -1) {\n  \
    \          if (vowels.indexOf(word[index - 1]) > -1) {\n                index--;\n\
    \            } else {\n                result = word[index];\n               \
    \ break;\n            }\n        }\n        index--;\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'i'\n\nshould equal\n\n''\n    at test (/tmp/tmpe_3rapg9.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe_3rapg9.js:51:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected: '',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
- exit_code: 1
  program: "// @ts-nocheck\n\n//You are given a word. Your task is to find the closest\
    \ vowel that stands between \n// two consonants from the right side of the word\
    \ (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return\
    \ empty string if you didn't\n// find any vowel met the above condition. \n//\
    \ You may assume that the given string contains English letter only.\n// Example:\n\
    // >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\"\
    )\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"\
    ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let result = \"\";\n    let index\
    \ = word.length - 1;\n    let isConsonant = true;\n    while (index >= 0) {\n\
    \        if (vowels.indexOf(word[index]) >= 0) {\n            if (!isConsonant)\
    \ {\n                result = word[index];\n                break;\n         \
    \   }\n            isConsonant = false;\n        } else {\n            isConsonant\
    \ = true;\n        }\n        index--;\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n'u'\n    at test (/tmp/tmpo7gkkxto.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpo7gkkxto.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: 'u',\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267987
