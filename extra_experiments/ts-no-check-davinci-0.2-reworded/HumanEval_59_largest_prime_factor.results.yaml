language: ts
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n  \
    \      } else {\n            i = i + 1;\n        }\n    }\n    return n;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let factor = 2;\n    while (n > 1) {\n        if (n % factor == 0)\
    \ {\n            largest_prime = factor;\n            n /= factor;\n         \
    \   while (n % factor == 0) {\n                n /= factor;\n            }\n \
    \       }\n        factor += 1;\n    }\n    return largest_prime;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n  \
    \      } else {\n            i = i + 1;\n        }\n    }\n    return n;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i * i <= n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n   \
    \   i++;\n    }\n  }\n  return n;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest = 1;\n\
    \    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            largest\
    \ = i;\n            n /= i;\n            i--;\n        }\n    }\n    return largest;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor = 2;\n\
    \    while (n > 1) {\n        if (n % factor == 0) {\n            n /= factor;\n\
    \        } else {\n            factor++;\n        }\n    }\n    return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor = 2;\n\
    \    let largest = 1;\n    while (n > 1) {\n        if (n % factor === 0) {\n\
    \            largest = factor;\n            n = n / factor;\n            while\
    \ (n % factor === 0) {\n                n = n / factor;\n            }\n     \
    \   }\n        factor += 1;\n    }\n    return largest;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor = 2;\n\
    \  while (n > 1) {\n    if (n % factor === 0) {\n      n /= factor;\n    } else\
    \ {\n      factor++;\n    }\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 2;\n    while (n > largest_prime) {\n        if (n % largest_prime === 0)\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime++;\n\
    \        }\n    }\n    return largest_prime;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let prime_factors:\
    \ number[] = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            prime_factors.push(i);\n            n /= i;\n            i--;\n\
    \        }\n    }\n    return prime_factors[prime_factors.length - 1];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 0;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largestPrimeFactor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largestPrimeFactor = i;\n            n /= i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return largestPrimeFactor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let prime_factors:\
    \ number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n %\
    \ i === 0) {\n            prime_factors.push(i);\n            n = n / i;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return prime_factors[prime_factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largestPrimeFactor\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largestPrimeFactor\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largestPrimeFactor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let factor = 2;\n\
    \  while (n > 1) {\n    if (n % factor === 0) {\n      n /= factor;\n    } else\
    \ {\n      factor++;\n    }\n  }\n  return factor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i = 1;\n        }\n\
    \    }\n    return largest_prime;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    if (n <= 1) {\n\
    \        return 0;\n    }\n    let largest_prime_factor = 1;\n    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i === 0) {\n            largest_prime_factor\
    \ = i;\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return largest_prime_factor;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n    \
    \        largest_prime = i;\n            n = n / i;\n        } else {\n      \
    \      i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n5\n    at test (/tmp/tmpzuwnzkfr.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzuwnzkfr.js:30:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 5,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i < n) {\n        if (n % i === 0) {\n            n = n / i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let prime_factors:\
    \ number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n %\
    \ i === 0) {\n            prime_factors.push(i);\n            n = n / i;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return prime_factors[prime_factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor = 2;\n\
    \    while (n > 1) {\n        if (n % factor == 0) {\n            n /= factor;\n\
    \        } else {\n            factor++;\n        }\n    }\n    return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ let largest_prime_factor = 1;\n    while (i <= n) {\n        if (n % i === 0)\
    \ {\n            largest_prime_factor = i;\n            n = n / i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return largest_prime_factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime_factor\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime_factor\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime_factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let prime_factors:\
    \ number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n %\
    \ i === 0) {\n            prime_factors.push(i);\n            n = n / i;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return prime_factors[prime_factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n \
    \       } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor = 2;\n\
    \    while (n > 1) {\n        if (n % factor === 0) {\n            n /= factor;\n\
    \        } else {\n            factor++;\n        }\n    }\n    return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n  \
    \      } else {\n            i = i + 1;\n        }\n    }\n    return n;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime_factor\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime_factor\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime_factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i = 1;\n        }\n\
    \    }\n    return largest_prime;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n \
    \       } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 0;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor = 2;\n\
    \    while (n > 1) {\n        if (n % factor === 0) {\n            n /= factor;\n\
    \        } else {\n            factor++;\n        }\n    }\n    return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor = 2;\n\
    \    while (n > 1) {\n        if (n % factor == 0) {\n            n /= factor;\n\
    \        } else {\n            factor++;\n        }\n    }\n    return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest = 0;\n\
    \  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n\
    \      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return largest;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n  \
    \      } else {\n            i = i + 1;\n        }\n    }\n    return n;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i = 1;\n        }\n\
    \    }\n    return largest_prime;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  for (let i = 2; i\
    \ < n; i++) {\n    if (n % i === 0) {\n      return largest_prime_factor(n / i);\n\
    \    }\n  }\n  return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let max = 0;\n \
    \   for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            max\
    \ = i;\n            n /= i;\n            i = 1;\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n \
    \       } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 0;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let prime = 2;\n\
    \    while (n > prime) {\n        if (n % prime == 0) {\n            n = n / prime;\n\
    \        } else {\n            prime++;\n        }\n    }\n    return prime;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i--;\n        }\n\
    \    }\n    return largest_prime;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i < n) {\n        if (n % i === 0) {\n            n = n / i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest: number\
    \ = 1;\n    let i: number = 2;\n    while (i <= n) {\n        if (n % i === 0)\
    \ {\n            largest = i;\n            n = n / i;\n        } else {\n    \
    \        i++;\n        }\n    }\n    return largest;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largestPrimeFactor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largestPrimeFactor = i;\n            n /= i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return largestPrimeFactor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n \
    \       } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let max_prime =\
    \ 1;\n    while (n % 2 === 0) {\n        max_prime = 2;\n        n /= 2;\n   \
    \ }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i ===\
    \ 0) {\n            max_prime = i;\n            n /= i;\n        }\n    }\n  \
    \  if (n > 2) {\n        max_prime = n;\n    }\n    return max_prime;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime_factor\
    \ = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      largest_prime_factor\
    \ = i;\n      n /= i;\n      i--;\n    }\n  }\n  return largest_prime_factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largestPrimeFactor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largestPrimeFactor = i;\n            n /= i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return largestPrimeFactor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 0;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largestPrimeFactor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largestPrimeFactor = i;\n            n /= i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return largestPrimeFactor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largestPrimeFactor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largestPrimeFactor = i;\n            n /= i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return largestPrimeFactor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n     \
    \       n /= i;\n            largest_prime = i;\n        }\n    }\n    return\
    \ largest_prime;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n9\n\nshould equal\n\n3\n    at test (/tmp/tmp3d7d5_29.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3d7d5_29.js:26:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 3,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n \
    \       } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor = 2;\n\
    \    while (n > 1) {\n        if (n % factor === 0) {\n            n /= factor;\n\
    \        } else {\n            factor++;\n        }\n    }\n    return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor: number\
    \ = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            n /=\
    \ factor;\n        } else {\n            factor++;\n        }\n    }\n    return\
    \ factor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    if (n > largest_prime_factor) {\n   \
    \     largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i < n) {\n        if (n % i === 0) {\n            n = n / i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i < n) {\n        if (n % i === 0) {\n            n = n / i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor: number\
    \ = 2;\n    while (n > 1) {\n        if (n % factor == 0) {\n            n /=\
    \ factor;\n        } else {\n            factor++;\n        }\n    }\n    return\
    \ factor;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor = 2;\n\
    \    while (n > 1) {\n        if (n % factor == 0) {\n            n /= factor;\n\
    \        } else {\n            factor++;\n        }\n    }\n    return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime_factor\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime_factor\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime_factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let prime_factors:\
    \ number[] = [];\n    let i: number = 2;\n    while (n > 1) {\n        if (n %\
    \ i === 0) {\n            prime_factors.push(i);\n            n = n / i;\n   \
    \     } else {\n            i++;\n        }\n    }\n    return prime_factors[prime_factors.length\
    \ - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime_factor\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime_factor\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime_factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor = 2;\n\
    \    while (n > 1) {\n        if (n % factor === 0) {\n            n /= factor;\n\
    \        } else {\n            factor++;\n        }\n    }\n    return factor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 0;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime\
    \ = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest_prime\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest_prime;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 0;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n     \
    \       largest_prime = i;\n            n /= i;\n            i = 1;\n        }\n\
    \    }\n    return largest_prime;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let factor = 2;\n\
    \    let lastFactor = 1;\n    while (n > 1) {\n        if (n % factor == 0) {\n\
    \            lastFactor = factor;\n            n = n / factor;\n            while\
    \ (n % factor == 0) {\n                n = n / factor;\n            }\n      \
    \  }\n        factor++;\n    }\n    return lastFactor;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 0;\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0) {\n      \
    \      if (is_prime(i)) {\n                largest_prime = i;\n            }\n\
    \        }\n    }\n    return largest_prime;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpr86wh7c_.js:11\n            if (is_prime(i)) {\n            ^\n\
    \nReferenceError: is_prime is not defined\n    at largest_prime_factor (/tmp/tmpr86wh7c_.js:11:13)\n\
    \    at test (/tmp/tmpr86wh7c_.js:21:22)\n    at Object.<anonymous> (/tmp/tmpr86wh7c_.js:27:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let i = 2;\n  while\
    \ (i <= n) {\n    if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n\
    \    }\n  }\n  return i;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime_factor = i;\n            n /= i;\n        } else {\n \
    \           i++;\n        }\n    }\n    return largest_prime_factor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i < n) {\n        if (n % i === 0) {\n            n = n / i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i === 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 0;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime\
    \ = 0;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      n = n\
    \ / i;\n      largest_prime = i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ largest_prime;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n \
    \       } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 1
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  // TODO: implement\
    \ this function\n  return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n5\n    at test (/tmp/tmpikzm00wr.js:14:12)\n\
    \    at Object.<anonymous> (/tmp/tmpikzm00wr.js:20:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 5,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largestPrimeFactor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largestPrimeFactor = i;\n            n /= i;\n        } else {\n   \
    \         i++;\n        }\n    }\n    return largestPrimeFactor;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    if (n > largest_prime_factor) {\n   \
    \     largest_prime_factor = n;\n    }\n    return largest_prime_factor;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest = 1;\n\
    \  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return largest;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 0;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let largest_prime\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         largest_prime = i;\n            n /= i;\n        } else {\n        \
    \    i++;\n        }\n    }\n    return largest_prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i < n) {\n        if (n % i === 0) {\n            n = n / i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267970
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n  let largest_prime_factor\
    \ = 1;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      largest_prime_factor\
    \ = i;\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  if (n > largest_prime_factor)\
    \ {\n    largest_prime_factor = n;\n  }\n  return largest_prime_factor;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267972
- exit_code: 0
  program: "// @ts-nocheck\n\n//Return the largest prime factor of n. Assume n > 1\
    \ and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n: number): number {\n    let i = 2;\n   \
    \ while (i * i <= n) {\n        if (n % i == 0) {\n            n = n / i;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660267967
