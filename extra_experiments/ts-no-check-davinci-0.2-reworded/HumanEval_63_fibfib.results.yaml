language: ts
name: HumanEval_63_fibfib
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) return 0;\n    if\
    \ (n === 1) return 0;\n    if (n === 2) return 1;\n    return fibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n <= 1) {\n        return\
    \ 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n \
    \   a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n < 3) {\n        return\
    \ n - 1;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    let d = 1;\n\
    \    for (let i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n < 3) {\n        return\
    \ n - 1;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    let d = 1;\n\
    \    for (let i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n < 0) {\n        throw new\
    \ Error(\"n must be a positive integer\");\n    }\n    if (n === 0) {\n      \
    \  return 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n ===\
    \ 2) {\n        return 1;\n    }\n    let a = 0;\n    let b = 0;\n    let c =\
    \ 1;\n    let d = 0;\n    for (let i = 3; i <= n; i++) {\n        d = a + b +\
    \ c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return d;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n \
    \   a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n <= 1) {\n        return\
    \ 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    let a = 0;\n  \
    \  let b = 0;\n    let c = 1;\n    let d = 0;\n    for (let i = 3; i <= n; i++)\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n \
    \   a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n <= 1) {\n    return 0;\n\
    \  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 0) {\n    throw new Error(\"\
    n must be a positive number\");\n  }\n  if (n < 2) {\n    return 0;\n  }\n  if\
    \ (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n\
    \  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n\
    \    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 1
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n <= 1) {\n    return 0;\n\
    \  }\n  if (n === 2) {\n    return 1;\n  }\n  let fibfibPrevPrev = 0;\n  let fibfibPrev\
    \ = 0;\n  let fibfibCurr = 1;\n  for (let i = 3; i <= n; i++) {\n    fibfibPrevPrev\
    \ = fibfibPrev;\n    fibfibPrev = fibfibCurr;\n    fibfibCurr = fibfibPrevPrev\
    \ + fibfibPrev + fibfibCurr;\n  }\n  return fibfibCurr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n12\n\nshould equal\n\n4\n    at test (/tmp/tmptirkxldu.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmptirkxldu.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n \
    \   a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n < 2) {\n        return\
    \ 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    let a = 0;\n  \
    \  let b = 0;\n    let c = 1;\n    let d = 0;\n    for (let i = 3; i <= n; i++)\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 1
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    let a = 0;\n    let b = 0;\n\
    \    let c = 1;\n    let d = 0;\n    for (let i = 2; i <= n; i++) {\n        d\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n7\n\nshould equal\n\n4\n    at test (/tmp/tmpup2_whee.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpup2_whee.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n <= 1) {\n        return\
    \ 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n < 2) {\n        return\
    \ 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n < 2) {\n        return\
    \ 0;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n <= 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n < 3) {\n        return\
    \ n - 1;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    let d = 1;\n\
    \    for (let i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 3) {\n    return n - 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 1;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) return 0;\n    if\
    \ (n === 1) return 0;\n    if (n === 2) return 1;\n    return fibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n \
    \   a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n \
    \   a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ } else if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3);\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n \
    \   a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n < 2) {\n        return\
    \ 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    let a = 0;\n  \
    \  let b = 0;\n    let c = 1;\n    let d = 0;\n    for (let i = 3; i <= n; i++)\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n -\
    \ 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n < 3) {\n        return\
    \ n - 1;\n    }\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    let d = 1;\n\
    \    for (let i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n    return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) return 0;\n    if\
    \ (n === 1) return 0;\n    if (n === 2) return 1;\n    return fibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n \
    \   a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 1
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    let a = 0;\n    let b = 0;\n\
    \    let c = 1;\n    let d = 0;\n    for (let i = 2; i <= n; i++) {\n        d\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n7\n\nshould equal\n\n4\n    at test (/tmp/tmpup2_whee.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpup2_whee.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 0) {\n    throw new Error(\"\
    n must be >= 0\");\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1)\
    \ {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n \
    \   a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n\
    \        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 0;\n  for (let i = 3;\
    \ i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\
    \  return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) return 0;\n    if\
    \ (n === 1) return 0;\n    if (n === 2) return 1;\n    return fibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n <= 1) {\n        return\
    \ 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fibfib;\n\
    \  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n\
    \  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
    \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n < 2) {\n        return\
    \ 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    let a = 0;\n  \
    \  let b = 0;\n    let c = 1;\n    let d = 0;\n    for (let i = 3; i <= n; i++)\
    \ {\n        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n\
    \    }\n    return d;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n\
    \  assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n \
    \ assert.deepEqual(candidate(1),0);\n  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n\
    \  assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n < 2) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let d = 0;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n \
    \   a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
- exit_code: 0
  program: "// @ts-nocheck\n\n//The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1)\
    \ == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    // Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n\
    // 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
    \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n \
    \ assert.deepEqual(candidate(10),81);\n  assert.deepEqual(candidate(12),274);\n\
    \  assert.deepEqual(candidate(14),927);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268026
