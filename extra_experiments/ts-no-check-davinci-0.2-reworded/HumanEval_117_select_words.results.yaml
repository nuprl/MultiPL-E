language: ts
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8mt9c9tt.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp8mt9c9tt.js:23:9)\n    at test (/tmp/tmp8mt9c9tt.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp8mt9c9tt.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let words: string[] = s.split(\" \");\n    for (let word\
    \ of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpirgu5_t_.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpirgu5_t_.js:23:9)\n    at test (/tmp/tmpirgu5_t_.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpirgu5_t_.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    const words = s.split(' ');\n    const result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let count = 0;\n\
    \        for (let j = 0; j < words[i].length; j++) {\n            if (!vowels.includes(words[i][j]))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpv2oht_q3.js:42:12)\n    at Object.<anonymous> (/tmp/tmpv2oht_q3.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter !== \"a\" && letter !== \"e\" && letter !== \"i\" && letter\
    \ !== \"o\" && letter !== \"u\") {\n                consonants++;\n          \
    \  }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmppahbtu5y.js:43:12)\n    at Object.<anonymous> (/tmp/tmppahbtu5y.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let letter = word[j];\n        \
    \    if (letter !== \"a\" && letter !== \"e\" && letter !== \"i\" && letter !==\
    \ \"o\" && letter !== \"u\") {\n                count++;\n            }\n    \
    \    }\n        if (count === n) {\n            result.push(word);\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmptm77kf44.js:43:12)\n    at Object.<anonymous> (/tmp/tmptm77kf44.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (countConsonants(word) === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbpdwovk4.js:23\n        if (countConsonants(word) === n) {\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmpbpdwovk4.js:23:9)\n    at test (/tmp/tmpbpdwovk4.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbpdwovk4.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_vufqn_q.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_vufqn_q.js:22:9)\n    at test (/tmp/tmp_vufqn_q.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_vufqn_q.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(' ');\n  let result = [];\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let word = words[i];\n    let consonants = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let letter = word[j];\n      if (letter != 'a'\
    \ && letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n   \
    \     consonants++;\n      }\n    }\n    if (consonants == n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpf1urqpj7.js:43:12)\n    at Object.<anonymous> (/tmp/tmpf1urqpj7.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0er7z9l8.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp0er7z9l8.js:23:25)\n    at test (/tmp/tmp0er7z9l8.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp0er7z9l8.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    const consonants = word.match(/[^aeiou]/gi);\n\
    \    if (consonants && consonants.length === n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char !== \"a\" && char !== \"e\" && char !== \"i\" && char !== \"o\" &&\
    \ char !== \"u\") {\n                count++;\n            }\n        }\n    \
    \    if (count === n) {\n            result.push(word);\n        }\n    }\n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmph8wdre5g.js:43:12)\n    at Object.<anonymous> (/tmp/tmph8wdre5g.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4ugo2ydj.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp4ugo2ydj.js:23:25)\n    at test (/tmp/tmp4ugo2ydj.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp4ugo2ydj.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ksxugmv.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp9ksxugmv.js:22:9)\n    at test (/tmp/tmp9ksxugmv.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ksxugmv.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter != \"a\" && letter != \"e\" && letter != \"i\" && letter\
    \ != \"o\" && letter != \"u\") {\n                consonants++;\n            }\n\
    \        }\n        if (consonants == n) {\n            result.push(word);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpkf77gmoy.js:43:12)\n    at Object.<anonymous> (/tmp/tmpkf77gmoy.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (countConsonants(word) === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbpdwovk4.js:23\n        if (countConsonants(word) === n) {\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmpbpdwovk4.js:23:9)\n    at test (/tmp/tmpbpdwovk4.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbpdwovk4.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let c = word[j];\n        \
    \    if (c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\" && c != \"u\") {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpmil25ipx.js:43:12)\n    at Object.<anonymous> (/tmp/tmpmil25ipx.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        if (count_consonants(word) ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5hj5fwhw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp5hj5fwhw.js:23:9)\n    at test (/tmp/tmp5hj5fwhw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp5hj5fwhw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ksxugmv.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp9ksxugmv.js:22:9)\n    at test (/tmp/tmp9ksxugmv.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ksxugmv.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let consonants = 0;\n        for (let letter of word) {\n            if\
    \ (letter.toLowerCase() != \"a\" && letter.toLowerCase() != \"e\" && letter.toLowerCase()\
    \ != \"i\" && letter.toLowerCase() != \"o\" && letter.toLowerCase() != \"u\")\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpyoorjy4l.js:25\n            if (isConsonant(word[j])) {\n     \
    \       ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpyoorjy4l.js:25:13)\n\
    \    at test (/tmp/tmpyoorjy4l.js:38:22)\n    at Object.<anonymous> (/tmp/tmpyoorjy4l.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char\
    \ != \"u\") {\n                count++;\n            }\n        }\n        if\
    \ (count == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpp17ht4dl.js:43:12)\n    at Object.<anonymous> (/tmp/tmpp17ht4dl.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let words: string[] = s.split(\" \");\n    for (let word\
    \ of words) {\n        if (countConsonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpefbbw5r2.js:23\n        if (countConsonants(word) === n) {\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmpefbbw5r2.js:23:9)\n    at test (/tmp/tmpefbbw5r2.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpefbbw5r2.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let word\
    \ of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5j0vb3au.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp5j0vb3au.js:23:9)\n    at test (/tmp/tmp5j0vb3au.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j0vb3au.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" &&\
    \ char != \"u\") {\n                consonants++;\n            }\n        }\n\
    \        if (consonants == n) {\n            result.push(word);\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpb2opekz8.js:43:12)\n    at Object.<anonymous> (/tmp/tmpb2opekz8.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    const words = s.split(' ');\n    const result\
    \ = [];\n    for (let word of words) {\n        let count = 0;\n        for (let\
    \ letter of word) {\n            if (!vowels.includes(letter)) {\n           \
    \     count++;\n            }\n        }\n        if (count === n) {\n       \
    \     result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpem8qmclc.js:44:12)\n    at Object.<anonymous> (/tmp/tmpem8qmclc.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268090
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter !== 'a' && letter !== 'e' && letter !== 'i' && letter !==\
    \ 'o' && letter !== 'u') {\n                consonants++;\n            }\n   \
    \     }\n        if (consonants === n) {\n            result.push(word);\n   \
    \     }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpzm5y_oy0.js:43:12)\n    at Object.<anonymous> (/tmp/tmpzm5y_oy0.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ksxugmv.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp9ksxugmv.js:22:9)\n    at test (/tmp/tmp9ksxugmv.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ksxugmv.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let count = 0;\n        for (let letter of word) {\n            if (letter\
    \ != \"a\" && letter != \"e\" && letter != \"i\" && letter != \"o\" && letter\
    \ != \"u\") {\n                count++;\n            }\n        }\n        if\
    \ (count == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpd0zfnksn.js:43:12)\n    at Object.<anonymous> (/tmp/tmpd0zfnksn.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char !== 'a' && char !== 'e' && char !== 'i' && char !== 'o' && char\
    \ !== 'u') {\n                consonants++;\n            }\n        }\n      \
    \  if (consonants === n) {\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmph7f4tkxc.js:43:12)\n    at Object.<anonymous> (/tmp/tmph7f4tkxc.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpyoorjy4l.js:25\n            if (isConsonant(word[j])) {\n     \
    \       ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpyoorjy4l.js:25:13)\n\
    \    at test (/tmp/tmpyoorjy4l.js:38:22)\n    at Object.<anonymous> (/tmp/tmpyoorjy4l.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let consonants = 0;\n        for (let i = 0; i < word.length; i++) {\n \
    \           if (word[i] != \"a\" && word[i] != \"e\" && word[i] != \"i\" && word[i]\
    \ != \"o\" && word[i] != \"u\") {\n                consonants++;\n           \
    \ }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp8ds56hw_.js:42:12)\n    at Object.<anonymous> (/tmp/tmp8ds56hw_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let consonants = 0;\n        for (let char of word) {\n            if (char.match(/[^aeiou]/i))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i].match(/[bcdfghjklmnpqrstvwxyz]/gi).length === n)\
    \ {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpei5k3r8g.js:22\n        if (words[i].match(/[bcdfghjklmnpqrstvwxyz]/gi).length\
    \ === n) {\n                                                       ^\n\nTypeError:\
    \ Cannot read property 'length' of null\n    at select_words (/tmp/tmpei5k3r8g.js:22:56)\n\
    \    at test (/tmp/tmpei5k3r8g.js:31:22)\n    at Object.<anonymous> (/tmp/tmpei5k3r8g.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (word.match(/[bcdfghjklmnpqrstvwxyz]/g).length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp09j6akl4.js:23\n        if (word.match(/[bcdfghjklmnpqrstvwxyz]/g).length\
    \ === n) {\n                                                  ^\n\nTypeError:\
    \ Cannot read property 'length' of null\n    at select_words (/tmp/tmp09j6akl4.js:23:51)\n\
    \    at test (/tmp/tmp09j6akl4.js:32:22)\n    at Object.<anonymous> (/tmp/tmp09j6akl4.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" &&\
    \ char != \"u\") {\n                consonants++;\n            }\n        }\n\
    \        if (consonants == n) {\n            result.push(word);\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpb2opekz8.js:43:12)\n    at Object.<anonymous> (/tmp/tmpb2opekz8.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let letter = word[j];\n        \
    \    if (letter != \"a\" && letter != \"e\" && letter != \"i\" && letter != \"\
    o\" && letter != \"u\") {\n                count++;\n            }\n        }\n\
    \        if (count == n) {\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp37iis0xz.js:43:12)\n    at Object.<anonymous> (/tmp/tmp37iis0xz.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  const words = s.split(' ');\n  const result\
    \ = [];\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for\
    \ (let j = 0; j < words[i].length; j++) {\n      if (!vowels.includes(words[i][j]))\
    \ {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(words[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp4cyv6hqw.js:42:12)\n    at Object.<anonymous> (/tmp/tmp4cyv6hqw.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp36bcutrz.js:25\n            if (isConsonant(word[j])) {\n     \
    \       ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmp36bcutrz.js:25:13)\n\
    \    at test (/tmp/tmp36bcutrz.js:38:22)\n    at Object.<anonymous> (/tmp/tmp36bcutrz.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (word.length > n) {\n            let count = 0;\n            for (let\
    \ i = 0; i < word.length; i++) {\n                if (word[i] != \"a\" && word[i]\
    \ != \"e\" && word[i] != \"i\" && word[i] != \"o\" && word[i] != \"u\") {\n  \
    \                  count++;\n                }\n            }\n            if\
    \ (count == n) {\n                result.push(word);\n            }\n        }\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp0p2mx_79.js:44:12)\n    at Object.<anonymous> (/tmp/tmp0p2mx_79.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        if (count_consonants(word) ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5hj5fwhw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp5hj5fwhw.js:23:9)\n    at test (/tmp/tmp5hj5fwhw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp5hj5fwhw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (word[j] != 'a' && word[j]\
    \ != 'e' && word[j] != 'i' && word[j] != 'o' && word[j] != 'u') {\n          \
    \      consonants++;\n            }\n        }\n        if (consonants == n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpe544q7q5.js:42:12)\n    at Object.<anonymous> (/tmp/tmpe544q7q5.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (countConsonants(word) === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbpdwovk4.js:23\n        if (countConsonants(word) === n) {\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmpbpdwovk4.js:23:9)\n    at test (/tmp/tmpbpdwovk4.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbpdwovk4.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char\
    \ != \"u\") {\n                count++;\n            }\n        }\n        if\
    \ (count == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpp17ht4dl.js:43:12)\n    at Object.<anonymous> (/tmp/tmpp17ht4dl.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let consonants = 0;\n        for (let i = 0; i < word.length; i++) {\n \
    \           if (word[i] != \"a\" && word[i] != \"e\" && word[i] != \"i\" && word[i]\
    \ != \"o\" && word[i] != \"u\") {\n                consonants++;\n           \
    \ }\n        }\n        if (consonants == n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp8ds56hw_.js:42:12)\n    at Object.<anonymous> (/tmp/tmp8ds56hw_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0er7z9l8.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp0er7z9l8.js:23:25)\n    at test (/tmp/tmp0er7z9l8.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp0er7z9l8.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (countConsonants(word) === n) {\n            result.push(word);\n   \
    \     }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkoiry6a0.js:23\n        if (countConsonants(word) === n) {\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmpkoiry6a0.js:23:9)\n    at test (/tmp/tmpkoiry6a0.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpkoiry6a0.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8mt9c9tt.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp8mt9c9tt.js:23:9)\n    at test (/tmp/tmp8mt9c9tt.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp8mt9c9tt.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ksxugmv.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp9ksxugmv.js:22:9)\n    at test (/tmp/tmp9ksxugmv.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ksxugmv.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char ===\
    \ 'u') {\n                count++;\n            }\n        }\n        if (count\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'little' ]\n   \
    \ at test (/tmp/tmpn_vkxi4b.js:39:12)\n    at Object.<anonymous> (/tmp/tmpn_vkxi4b.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'little' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let consonants = 0;\n        for (let char of word) {\n            if (char.match(/[^aeiou]/i))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char != 'a' && char != 'e' && char != 'i' && char != 'o' && char !=\
    \ 'u') {\n                consonants++;\n            }\n        }\n        if\
    \ (consonants == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp44a3n5by.js:43:12)\n    at Object.<anonymous> (/tmp/tmp44a3n5by.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (is_consonant(char)) {\n                consonants++;\n           \
    \ }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpk_3xkyih.js:26\n            if (is_consonant(char)) {\n       \
    \     ^\n\nReferenceError: is_consonant is not defined\n    at select_words (/tmp/tmpk_3xkyih.js:26:13)\n\
    \    at test (/tmp/tmpk_3xkyih.js:39:22)\n    at Object.<anonymous> (/tmp/tmpk_3xkyih.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let consonants = 0;\n        for (let letter of word) {\n            if\
    \ (letter.toLowerCase() != \"a\" && letter.toLowerCase() != \"e\" && letter.toLowerCase()\
    \ != \"i\" && letter.toLowerCase() != \"o\" && letter.toLowerCase() != \"u\")\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (word.length > n) {\n            let count = 0;\n            for (let i\
    \ = 0; i < word.length; i++) {\n                if (word[i] !== 'a' && word[i]\
    \ !== 'e' && word[i] !== 'i' && word[i] !== 'o' && word[i] !== 'u') {\n      \
    \              count++;\n                }\n            }\n            if (count\
    \ === n) {\n                result.push(word);\n            }\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpkjmwkf0z.js:44:12)\n    at Object.<anonymous> (/tmp/tmpkjmwkf0z.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char\
    \ != \"u\") {\n                count++;\n            }\n        }\n        if\
    \ (count == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpp17ht4dl.js:43:12)\n    at Object.<anonymous> (/tmp/tmpp17ht4dl.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4ugo2ydj.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp4ugo2ydj.js:23:25)\n    at test (/tmp/tmp4ugo2ydj.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp4ugo2ydj.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char != 'a' && char != 'e' && char != 'i' && char != 'o' && char !=\
    \ 'u') {\n                consonants++;\n            }\n        }\n        if\
    \ (consonants == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp44a3n5by.js:43:12)\n    at Object.<anonymous> (/tmp/tmp44a3n5by.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (countConsonants(word) === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbpdwovk4.js:23\n        if (countConsonants(word) === n) {\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmpbpdwovk4.js:23:9)\n    at test (/tmp/tmpbpdwovk4.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbpdwovk4.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpefsp6hmz.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpefsp6hmz.js:22:9)\n    at test (/tmp/tmpefsp6hmz.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpefsp6hmz.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    let\
    \ result = [];\n    for (let word of words) {\n        let count = 0;\n      \
    \  for (let letter of word) {\n            if (consonants.includes(letter)) {\n\
    \                count++;\n            }\n        }\n        if (count === n)\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'lamb' ]\n\nshould equal\n\n[ 'Mary',\
    \ 'lamb' ]\n    at test (/tmp/tmppkiq06cw.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppkiq06cw.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6_5l45ff.js:25\n            if (isConsonant(word[j])) {\n     \
    \       ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmp6_5l45ff.js:25:13)\n\
    \    at test (/tmp/tmp6_5l45ff.js:38:22)\n    at Object.<anonymous> (/tmp/tmp6_5l45ff.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter !== \"a\" && letter !== \"e\" && letter !== \"i\" && letter\
    \ !== \"o\" && letter !== \"u\") {\n                consonants++;\n          \
    \  }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmppahbtu5y.js:43:12)\n    at Object.<anonymous> (/tmp/tmppahbtu5y.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter !== \"a\" && letter !== \"e\" && letter !== \"i\" && letter\
    \ !== \"o\" && letter !== \"u\") {\n                consonants++;\n          \
    \  }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmppahbtu5y.js:43:12)\n    at Object.<anonymous> (/tmp/tmppahbtu5y.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let consonants = 0;\n        for (let letter of word) {\n            if\
    \ (isConsonant(letter)) consonants++;\n        }\n        if (consonants === n)\
    \ result.push(word);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpii4wqfei.js:26\n            if (isConsonant(letter))\n        \
    \    ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpii4wqfei.js:26:13)\n\
    \    at test (/tmp/tmpii4wqfei.js:37:22)\n    at Object.<anonymous> (/tmp/tmpii4wqfei.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4ugo2ydj.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp4ugo2ydj.js:23:25)\n    at test (/tmp/tmp4ugo2ydj.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp4ugo2ydj.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char\
    \ != \"u\") {\n                count++;\n            }\n        }\n        if\
    \ (count == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpp17ht4dl.js:43:12)\n    at Object.<anonymous> (/tmp/tmpp17ht4dl.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter !== \"a\" && letter !== \"e\" && letter !== \"i\" && letter\
    \ !== \"o\" && letter !== \"u\") {\n                consonants++;\n          \
    \  }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmppahbtu5y.js:43:12)\n    at Object.<anonymous> (/tmp/tmppahbtu5y.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let count = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (isConsonant(word[i])) {\n                count++;\n            }\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmbfrw24t.js:25\n            if (isConsonant(word[i])) {\n     \
    \       ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpmbfrw24t.js:25:13)\n\
    \    at test (/tmp/tmpmbfrw24t.js:38:22)\n    at Object.<anonymous> (/tmp/tmpmbfrw24t.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268093
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char.toLowerCase() != \"a\" && char.toLowerCase() != \"e\" && char.toLowerCase()\
    \ != \"i\" && char.toLowerCase() != \"o\" && char.toLowerCase() != \"u\") {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let count = 0;\n        for (let i = 0; i < word.length; i++) {\n      \
    \      if (word[i] != \"a\" && word[i] != \"e\" && word[i] != \"i\" && word[i]\
    \ != \"o\" && word[i] != \"u\") {\n                count++;\n            }\n \
    \       }\n        if (count == n) {\n            result.push(word);\n       \
    \ }\n    }\n    return result;\n}\nconsole.log(select_words(\"Mary had a little\
    \ lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\", 3));\nconsole.log(select_words(\"\
    simple white space\", 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpkbt684a8.js:47:12)\n    at Object.<anonymous> (/tmp/tmpkbt684a8.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ksxugmv.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp9ksxugmv.js:22:9)\n    at test (/tmp/tmp9ksxugmv.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ksxugmv.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0er7z9l8.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp0er7z9l8.js:23:25)\n    at test (/tmp/tmp0er7z9l8.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp0er7z9l8.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (word[j] != \"a\" && word[j]\
    \ != \"e\" && word[j] != \"i\" && word[j] != \"o\" && word[j] != \"u\") {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp3zsv92h2.js:42:12)\n    at Object.<anonymous> (/tmp/tmp3zsv92h2.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i].match(/[^aeiou]/g).length === n) {\n          \
    \  result.push(words[i]);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp231r0xue.js:22\n        if (words[i].match(/[^aeiou]/g).length\
    \ === n) {\n                                       ^\n\nTypeError: Cannot read\
    \ property 'length' of null\n    at select_words (/tmp/tmp231r0xue.js:22:40)\n\
    \    at test (/tmp/tmp231r0xue.js:31:22)\n    at Object.<anonymous> (/tmp/tmp231r0xue.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (isConsonant(letter)) {\n                consonants++;\n        \
    \    }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_hv9fwia.js:26\n            if (isConsonant(letter)) {\n      \
    \      ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmp_hv9fwia.js:26:13)\n\
    \    at test (/tmp/tmp_hv9fwia.js:39:22)\n    at Object.<anonymous> (/tmp/tmp_hv9fwia.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (word.length > n) {\n            let count = 0;\n            for (let i\
    \ = 0; i < word.length; i++) {\n                if (word[i] !== 'a' && word[i]\
    \ !== 'e' && word[i] !== 'i' && word[i] !== 'o' && word[i] !== 'u') {\n      \
    \              count++;\n                }\n            }\n            if (count\
    \ === n) {\n                result.push(word);\n            }\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpkjmwkf0z.js:44:12)\n    at Object.<anonymous> (/tmp/tmpkjmwkf0z.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0er7z9l8.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp0er7z9l8.js:23:25)\n    at test (/tmp/tmp0er7z9l8.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp0er7z9l8.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8mt9c9tt.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp8mt9c9tt.js:23:9)\n    at test (/tmp/tmp8mt9c9tt.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp8mt9c9tt.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let count = 0;\n        for (let letter of word) {\n            if (isConsonant(letter))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpyzkzj8jh.js:26\n            if (isConsonant(letter)) {\n      \
    \      ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpyzkzj8jh.js:26:13)\n\
    \    at test (/tmp/tmpyzkzj8jh.js:39:22)\n    at Object.<anonymous> (/tmp/tmpyzkzj8jh.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            if (isConsonant(word[j])) {\n  \
    \              count++;\n            }\n        }\n        if (count === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6_5l45ff.js:25\n            if (isConsonant(word[j])) {\n     \
    \       ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmp6_5l45ff.js:25:13)\n\
    \    at test (/tmp/tmp6_5l45ff.js:38:22)\n    at Object.<anonymous> (/tmp/tmp6_5l45ff.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let word\
    \ of words) {\n        if (word.length > n) {\n            let consonants: number\
    \ = 0;\n            for (let i = 0; i < word.length; i++) {\n                if\
    \ (word[i] != \"a\" && word[i] != \"e\" && word[i] != \"i\" && word[i] != \"o\"\
    \ && word[i] != \"u\") {\n                    consonants++;\n                }\n\
    \            }\n            if (consonants == n) {\n                result.push(word);\n\
    \            }\n        }\n    }\n    return result;\n}\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp08mw9d32.js:49:12)\n    at Object.<anonymous> (/tmp/tmp08mw9d32.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: '[ ''little'' ]

    [ ''Mary'', ''lamb'' ]

    []

    [ ''world'' ]

    []

    '
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (word.length >= n) {\n            let count = 0;\n            for (let\
    \ i = 0; i < word.length; i++) {\n                if (isConsonant(word[i])) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count === n) {\n                result.push(word);\n            }\n       \
    \ }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3oa7n6y0.js:26\n                if (isConsonant(word[i])) {\n \
    \               ^\n\nReferenceError: isConsonant is not defined\n    at select_words\
    \ (/tmp/tmp3oa7n6y0.js:26:17)\n    at test (/tmp/tmp3oa7n6y0.js:40:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp3oa7n6y0.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let word = words[i];\n    let count = 0;\n    for (let j = 0; j < word.length;\
    \ j++) {\n      if (isConsonant(word[j])) {\n        count++;\n      }\n    }\n\
    \    if (count === n) {\n      result.push(word);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpa4t6h0qq.js:25\n            if (isConsonant(word[j])) {\n     \
    \       ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpa4t6h0qq.js:25:13)\n\
    \    at test (/tmp/tmpa4t6h0qq.js:38:22)\n    at Object.<anonymous> (/tmp/tmpa4t6h0qq.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    if (count_consonants(word) === n) {\n\
    \      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1o4s50db.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp1o4s50db.js:23:9)\n    at test (/tmp/tmp1o4s50db.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp1o4s50db.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8mt9c9tt.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp8mt9c9tt.js:23:9)\n    at test (/tmp/tmp8mt9c9tt.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp8mt9c9tt.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let words: string[] = s.split(\" \");\n    for (let i =\
    \ 0; i < words.length; i++) {\n        let word: string = words[i];\n        let\
    \ consonants: number = 0;\n        for (let j = 0; j < word.length; j++) {\n \
    \           let char: string = word[j];\n            if (char.match(/[bcdfghjklmnpqrstvwxyz]/i))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" &&\
    \ char != \"u\") {\n                consonants++;\n            }\n        }\n\
    \        if (consonants == n) {\n            result.push(word);\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpb2opekz8.js:43:12)\n    at Object.<anonymous> (/tmp/tmpb2opekz8.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i].length === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mary', 'lamb' ]\n\nshould equal\n\n[\
    \ 'little' ]\n    at test (/tmp/tmp4__ogw0t.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4__ogw0t.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mary',\
    \ 'lamb' ],\n  expected: [ 'little' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let consonants = 0;\n        for (let letter of word) {\n            if\
    \ (letter.match(/[bcdfghjklmnpqrstvwxyz]/i)) {\n                consonants++;\n\
    \            }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (word[j] != \"a\" && word[j]\
    \ != \"e\" && word[j] != \"i\" && word[j] != \"o\" && word[j] != \"u\") {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp3zsv92h2.js:42:12)\n    at Object.<anonymous> (/tmp/tmp3zsv92h2.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (isConsonant(letter)) {\n                consonants++;\n        \
    \    }\n        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvtobuycb.js:26\n            if (isConsonant(letter)) {\n      \
    \      ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmpvtobuycb.js:26:13)\n\
    \    at test (/tmp/tmpvtobuycb.js:39:22)\n    at Object.<anonymous> (/tmp/tmpvtobuycb.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ksxugmv.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp9ksxugmv.js:22:9)\n    at test (/tmp/tmp9ksxugmv.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ksxugmv.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter != \"a\" && letter != \"e\" && letter != \"i\" && letter\
    \ != \"o\" && letter != \"u\") {\n                consonants++;\n            }\n\
    \        }\n        if (consonants == n) {\n            result.push(word);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpkf77gmoy.js:43:12)\n    at Object.<anonymous> (/tmp/tmpkf77gmoy.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let word of words) {\n    if (count_consonants(word)\
    \ === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6cg5dmbr.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp6cg5dmbr.js:23:9)\n    at test (/tmp/tmp6cg5dmbr.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp6cg5dmbr.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let word = words[i];\n    let consonants = 0;\n    for (let j = 0; j\
    \ < word.length; j++) {\n      let char = word[j];\n      if (\n        char !=\
    \ \"a\" &&\n        char != \"e\" &&\n        char != \"i\" &&\n        char !=\
    \ \"o\" &&\n        char != \"u\"\n      ) {\n        consonants++;\n      }\n\
    \    }\n    if (consonants == n) {\n      result.push(word);\n    }\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpfom8yb8b.js:47:12)\n    at Object.<anonymous> (/tmp/tmpfom8yb8b.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0er7z9l8.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp0er7z9l8.js:23:25)\n    at test (/tmp/tmp0er7z9l8.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp0er7z9l8.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let word of words) {\n    if (count_consonants(word)\
    \ === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6cg5dmbr.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp6cg5dmbr.js:23:9)\n    at test (/tmp/tmp6cg5dmbr.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp6cg5dmbr.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            if (word[j] != \"a\" && word[j]\
    \ != \"e\" && word[j] != \"i\" && word[j] != \"o\" && word[j] != \"u\") {\n  \
    \              consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp3zsv92h2.js:42:12)\n    at Object.<anonymous> (/tmp/tmp3zsv92h2.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let i:\
    \ number = 0; i < words.length; i++) {\n        let word: string = words[i];\n\
    \        let consonants: number = 0;\n        for (let j: number = 0; j < word.length;\
    \ j++) {\n            let char: string = word[j];\n            if (char !== \"\
    a\" && char !== \"e\" && char !== \"i\" && char !== \"o\" && char !== \"u\") {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpnbn46377.js:43:12)\n    at Object.<anonymous> (/tmp/tmpnbn46377.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let consonants = 0;\n        for (let letter of word) {\n            if\
    \ (letter.match(/[^aeiou]/i)) {\n                consonants++;\n            }\n\
    \        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_vufqn_q.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_vufqn_q.js:22:9)\n    at test (/tmp/tmp_vufqn_q.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_vufqn_q.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    if (count_consonants(word) === n) {\n\
    \      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1o4s50db.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp1o4s50db.js:23:9)\n    at test (/tmp/tmp1o4s50db.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp1o4s50db.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = ['a', 'e', 'i', 'o', 'u', 'y'];\n    const words = s.split(' ');\n    const\
    \ result = [];\n    for (let i = 0; i < words.length; i++) {\n        let consonants\
    \ = 0;\n        for (let j = 0; j < words[i].length; j++) {\n            if (!vowels.includes(words[i][j].toLowerCase()))\
    \ {\n                consonants++;\n            }\n        }\n        if (consonants\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'lamb' ]\n\nshould equal\n\n[ 'Mary',\
    \ 'lamb' ]\n    at test (/tmp/tmp26x5o7i9.js:39:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp26x5o7i9.js:46:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp8mt9c9tt.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp8mt9c9tt.js:23:9)\n    at test (/tmp/tmp8mt9c9tt.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp8mt9c9tt.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (countConsonants(word) === n) {\n            result.push(word);\n   \
    \     }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkoiry6a0.js:23\n        if (countConsonants(word) === n) {\n  \
    \      ^\n\nReferenceError: countConsonants is not defined\n    at select_words\
    \ (/tmp/tmpkoiry6a0.js:23:9)\n    at test (/tmp/tmpkoiry6a0.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpkoiry6a0.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let letter = word[j];\n   \
    \         if (letter != \"a\" && letter != \"e\" && letter != \"i\" && letter\
    \ != \"o\" && letter != \"u\") {\n                consonants++;\n            }\n\
    \        }\n        if (consonants == n) {\n            result.push(word);\n \
    \       }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpkf77gmoy.js:43:12)\n    at Object.<anonymous> (/tmp/tmpkf77gmoy.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i].match(/[^aeiou]/g) && words[i].match(/[^aeiou]/g).length\
    \ === n) {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpicqqzyy7.js:35:12)\n    at Object.<anonymous> (/tmp/tmpicqqzyy7.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let word\
    \ of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5j0vb3au.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp5j0vb3au.js:23:9)\n    at test (/tmp/tmp5j0vb3au.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j0vb3au.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ksxugmv.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp9ksxugmv.js:22:9)\n    at test (/tmp/tmp9ksxugmv.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ksxugmv.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char !== 'a' && char !== 'e' && char !== 'i' && char !== 'o' && char !==\
    \ 'u') {\n                count++;\n            }\n        }\n        if (count\
    \ === n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpgmyanx5z.js:43:12)\n    at Object.<anonymous> (/tmp/tmpgmyanx5z.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ksxugmv.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp9ksxugmv.js:22:9)\n    at test (/tmp/tmp9ksxugmv.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ksxugmv.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ksxugmv.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp9ksxugmv.js:22:9)\n    at test (/tmp/tmp9ksxugmv.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ksxugmv.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j]\
    \ != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\") {\n              \
    \  count++;\n            }\n        }\n        if (count == n) {\n           \
    \ result.push(words[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp93ot1g0b.js:41:12)\n    at Object.<anonymous> (/tmp/tmp93ot1g0b.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(' ');\n    let result: string[] = [];\n    for (let word\
    \ of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1h75_y3r.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp1h75_y3r.js:23:9)\n    at test (/tmp/tmp1h75_y3r.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp1h75_y3r.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (words[i].match(/[bcdfghjklmnpqrstvwxyz]/g).length === n)\
    \ {\n            result.push(words[i]);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpuqxtbgx5.js:22\n        if (words[i].match(/[bcdfghjklmnpqrstvwxyz]/g).length\
    \ === n) {\n                                                      ^\n\nTypeError:\
    \ Cannot read property 'length' of null\n    at select_words (/tmp/tmpuqxtbgx5.js:22:55)\n\
    \    at test (/tmp/tmpuqxtbgx5.js:31:22)\n    at Object.<anonymous> (/tmp/tmpuqxtbgx5.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const result:\
    \ string[] = [];\n    const words = s.split(' ');\n    for (const word of words)\
    \ {\n        if (word.length > 0 && count_consonants(word) === n) {\n        \
    \    result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9dhnd1e1.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp9dhnd1e1.js:23:25)\n    at test (/tmp/tmp9dhnd1e1.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp9dhnd1e1.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4ugo2ydj.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp4ugo2ydj.js:23:25)\n    at test (/tmp/tmp4ugo2ydj.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp4ugo2ydj.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = ['a', 'e', 'i', 'o', 'u', 'y'];\n    const words = s.split(' ');\n    const\
    \ result = [];\n    for (let word of words) {\n        let count = 0;\n      \
    \  for (let i = 0; i < word.length; i++) {\n            if (!vowels.includes(word[i].toLowerCase()))\
    \ {\n                count++;\n            }\n        }\n        if (count ===\
    \ n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'lamb' ]\n\nshould equal\n\n[ 'Mary',\
    \ 'lamb' ]\n    at test (/tmp/tmpy5h8fkx4.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy5h8fkx4.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'lamb' ],\n\
    \  expected: [ 'Mary', 'lamb' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(\" \");\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        if (is_word_valid(word, n))\
    \ {\n            result.push(word);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5lutagh_.js:23\n        if (is_word_valid(word, n)) {\n       \
    \ ^\n\nReferenceError: is_word_valid is not defined\n    at select_words (/tmp/tmp5lutagh_.js:23:9)\n\
    \    at test (/tmp/tmp5lutagh_.js:32:22)\n    at Object.<anonymous> (/tmp/tmp5lutagh_.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let word of words) {\n    let\
    \ count = 0;\n    for (let i = 0; i < word.length; i++) {\n      if (\n      \
    \  word[i] !== \"a\" &&\n        word[i] !== \"e\" &&\n        word[i] !== \"\
    i\" &&\n        word[i] !== \"o\" &&\n        word[i] !== \"u\"\n      ) {\n \
    \       count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp721z0qu3.js:46:12)\n    at Object.<anonymous> (/tmp/tmp721z0qu3.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" &&\
    \ char != \"u\") {\n                consonants++;\n            }\n        }\n\
    \        if (consonants == n) {\n            result.push(word);\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpb2opekz8.js:43:12)\n    at Object.<anonymous> (/tmp/tmpb2opekz8.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9ksxugmv.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp9ksxugmv.js:22:9)\n    at test (/tmp/tmp9ksxugmv.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp9ksxugmv.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        const consonants = word.match(/[^aeiou]/g);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpz7g8jm4q.js:37:12)\n    at Object.<anonymous> (/tmp/tmpz7g8jm4q.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let word\
    \ of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5j0vb3au.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp5j0vb3au.js:23:9)\n    at test (/tmp/tmp5j0vb3au.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j0vb3au.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    const words = s.split(' ');\n    const result\
    \ = [];\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i];\n\
    \        let count = 0;\n        for (let j = 0; j < word.length; j++) {\n   \
    \         if (!vowels.includes(word[j])) {\n                count++;\n       \
    \     }\n        }\n        if (count === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpkhsh_qjg.js:43:12)\n    at Object.<anonymous> (/tmp/tmpkhsh_qjg.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words\
    \ = s.split(' ');\n    const result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        const consonants = word.match(/[^aeiou]/g);\n\
    \        if (consonants && consonants.length === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpz7g8jm4q.js:37:12)\n    at Object.<anonymous> (/tmp/tmpz7g8jm4q.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  const words = s.split(' ');\n  const result\
    \ = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n\
    \    let count = 0;\n    for (let j = 0; j < word.length; j++) {\n      if (!vowels.includes(word[j]))\
    \ {\n        count++;\n      }\n    }\n    if (count === n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp58hnjezj.js:43:12)\n    at Object.<anonymous> (/tmp/tmp58hnjezj.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (count_consonants(words[i]) === n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_vufqn_q.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_vufqn_q.js:22:9)\n    at test (/tmp/tmp_vufqn_q.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_vufqn_q.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let result:\
    \ string[] = [];\n    let words: string[] = s.split(\" \");\n    for (let word\
    \ of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpirgu5_t_.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpirgu5_t_.js:23:9)\n    at test (/tmp/tmpirgu5_t_.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpirgu5_t_.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (word.length > 0 && count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp0er7z9l8.js:23\n        if (word.length > 0 && count_consonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: count_consonants is not\
    \ defined\n    at select_words (/tmp/tmp0er7z9l8.js:23:25)\n    at test (/tmp/tmp0er7z9l8.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmp0er7z9l8.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let c = word[j];\n            if\
    \ (c != \"a\" && c != \"e\" && c != \"i\" && c != \"o\" && c != \"u\") {\n   \
    \             count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp0akv4mhp.js:43:12)\n    at Object.<anonymous> (/tmp/tmp0akv4mhp.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  let words\
    \ = s.split(\" \");\n  let result = [];\n  for (let i = 0; i < words.length; i++)\
    \ {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n   \
    \   if (\n        words[i][j] != \"a\" &&\n        words[i][j] != \"e\" &&\n \
    \       words[i][j] != \"i\" &&\n        words[i][j] != \"o\" &&\n        words[i][j]\
    \ != \"u\"\n      ) {\n        count++;\n      }\n    }\n    if (count == n) {\n\
    \      result.push(words[i]);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp1pdyuzo1.js:45:12)\n    at Object.<anonymous> (/tmp/tmp1pdyuzo1.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char\
    \ != \"u\") {\n                count++;\n            }\n        }\n        if\
    \ (count == n) {\n            result.push(word);\n        }\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmpp17ht4dl.js:43:12)\n    at Object.<anonymous> (/tmp/tmpp17ht4dl.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (word.length > 0 && countConsonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpkal2ja6k.js:23\n        if (word.length > 0 && countConsonants(word)\
    \ === n) {\n                        ^\n\nReferenceError: countConsonants is not\
    \ defined\n    at select_words (/tmp/tmpkal2ja6k.js:23:25)\n    at test (/tmp/tmpkal2ja6k.js:32:22)\n\
    \    at Object.<anonymous> (/tmp/tmpkal2ja6k.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let count = 0;\n        for (let j = 0; j < words[i].length;\
    \ j++) {\n            if (words[i][j] != \"a\" && words[i][j] != \"e\" && words[i][j]\
    \ != \"i\" && words[i][j] != \"o\" && words[i][j] != \"u\") {\n              \
    \  count++;\n            }\n        }\n        if (count == n) {\n           \
    \ result.push(words[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had a little\
    \ lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white\
    \ space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
    ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp93ot1g0b.js:41:12)\n    at Object.<anonymous> (/tmp/tmp93ot1g0b.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (count_consonants(word) === n) {\n            result.push(word);\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbrihrrqw.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpbrihrrqw.js:23:9)\n    at test (/tmp/tmpbrihrrqw.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrihrrqw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let c = word[j];\n        \
    \    if (isConsonant(c)) {\n                consonants++;\n            }\n   \
    \     }\n        if (consonants === n) {\n            result.push(word);\n   \
    \     }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmprjqv_rl7.js:26\n            if (isConsonant(c)) {\n           \
    \ ^\n\nReferenceError: isConsonant is not defined\n    at select_words (/tmp/tmprjqv_rl7.js:26:13)\n\
    \    at test (/tmp/tmprjqv_rl7.js:39:22)\n    at Object.<anonymous> (/tmp/tmprjqv_rl7.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const words\
    \ = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length;\
    \ i++) {\n    const word = words[i];\n    if (count_consonants(word) === n) {\n\
    \      result.push(word);\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
    little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
    , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n\
    \  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"\
    Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1o4s50db.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp1o4s50db.js:23:9)\n    at test (/tmp/tmp1o4s50db.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp1o4s50db.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268094
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let i =\
    \ 0; i < words.length; i++) {\n        if (count_consonants(words[i]) === n) {\n\
    \            result.push(words[i]);\n        }\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpp81kvivw.js:22\n        if (count_consonants(words[i]) === n) {\n\
    \        ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmpp81kvivw.js:22:9)\n    at test (/tmp/tmpp81kvivw.js:31:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpp81kvivw.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     let consonants = 0;\n        for (let letter of word) {\n            if\
    \ (letter.match(/[^aeiou]/i)) {\n                consonants++;\n            }\n\
    \        }\n        if (consonants === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268094
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let consonants = 0;\n        for\
    \ (let j = 0; j < word.length; j++) {\n            let char = word[j];\n     \
    \       if (char.toLowerCase() != \"a\" && char.toLowerCase() != \"e\" && char.toLowerCase()\
    \ != \"i\" && char.toLowerCase() != \"o\" && char.toLowerCase() != \"u\") {\n\
    \                consonants++;\n            }\n        }\n        if (consonants\
    \ == n) {\n            result.push(word);\n        }\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268093
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(' ');\n    let result = [];\n    for (let word of words) {\n     \
    \   if (count_consonants(word) === n) {\n            result.push(word);\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_huxtz23.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp_huxtz23.js:23:9)\n    at test (/tmp/tmp_huxtz23.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp_huxtz23.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let char = word[j];\n          \
    \  if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" ||\
    \ char === \"u\") {\n                continue;\n            }\n            count++;\n\
    \        }\n        if (count === n) {\n            result.push(word);\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp61zhve76.js:44:12)\n    at Object.<anonymous> (/tmp/tmp61zhve76.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268096
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let i = 0; i < words.length;\
    \ i++) {\n        let word = words[i];\n        let count = 0;\n        for (let\
    \ j = 0; j < word.length; j++) {\n            let letter = word[j];\n        \
    \    if (letter != \"a\" && letter != \"e\" && letter != \"i\" && letter != \"\
    o\" && letter != \"u\") {\n                count++;\n            }\n        }\n\
    \        if (count == n) {\n            result.push(word);\n        }\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"\
    Mary had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary\
    \ had a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 'Uncle' ]\n    at\
    \ test (/tmp/tmp37iis0xz.js:43:12)\n    at Object.<anonymous> (/tmp/tmp37iis0xz.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 'Uncle' ],\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660268091
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words:\
    \ string[] = s.split(\" \");\n    let result: string[] = [];\n    for (let word\
    \ of words) {\n        if (count_consonants(word) === n) {\n            result.push(word);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = select_words;\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"little\"]);\n\
    \  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\", \"lamb\"\
    ]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
    Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
    Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
    a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5j0vb3au.js:23\n        if (count_consonants(word) === n) {\n \
    \       ^\n\nReferenceError: count_consonants is not defined\n    at select_words\
    \ (/tmp/tmp5j0vb3au.js:23:9)\n    at test (/tmp/tmp5j0vb3au.js:32:22)\n    at\
    \ Object.<anonymous> (/tmp/tmp5j0vb3au.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660268088
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a string s and a natural number n, you have\
    \ been tasked to implement \n// a function that returns an array of all words\
    \ from string s that contain exactly \n// n consonants, in order these words appear\
    \ in the string s.\n// If the string s is empty then the function should return\
    \ an empty array.\n// Note: you may assume the input string contains only letters\
    \ and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n\
    // [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\"\
    , \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"\
    Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"\
    Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words\
    \ = s.split(\" \");\n    let result = [];\n    for (let word of words) {\n   \
    \     if (word.match(/[^aeiou]/gi) && word.match(/[^aeiou]/gi).length === n) {\n\
    \            result.push(word);\n        }\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
    \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"\
    simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"\
    world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
    \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
    d\", \"f\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268096
