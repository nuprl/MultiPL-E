language: ts
name: HumanEval_76_is_simple_power
results:
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  let i = 1;\n  while\
    \ (n ** i <= x) {\n    if (n ** i === x) {\n      result = true;\n    }\n    i++;\n\
    \  }\n  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349004
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpumszf5iy.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpumszf5iy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (i < x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpumszf5iy.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpumszf5iy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    if (x === 1) {\n        return true;\n  \
    \  }\n    let i = 1;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n,\
    \ i) === x) {\n            return true;\n        }\n        i++;\n    }\n    return\
    \ false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349004
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    const power = Math.log(x) / Math.log(n);\n\
    \    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpiu_h6lob.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiu_h6lob.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n\
    \    return Math.pow(n, Math.round(power)) === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmhqin7b2.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmhqin7b2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgz3w6lvn.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgz3w6lvn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while\
    \ (i < x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  \
    \  i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_ohovm8r.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_ohovm8r.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i <\
    \ x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  if (x % n === 0) {\n\
    \    let i = 0;\n    while (Math.pow(n, i) < x) {\n      i++;\n    }\n    if (Math.pow(n,\
    \ i) === x) {\n      result = true;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi7o86dfv.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi7o86dfv.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  for (let i = 1; i <=\
    \ x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbldr96u8.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbldr96u8.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s2o4d4t.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s2o4d4t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348988
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    if (x === 1) {\n\
    \        result = true;\n    } else {\n        for (let i = 1; i <= x; i++) {\n\
    \            if (Math.pow(n, i) === x) {\n                result = true;\n   \
    \         }\n        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5pxb7_1f.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5pxb7_1f.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while\
    \ (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n\
    \    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349004
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 1;\n    while (Math.pow(n, i) <=\
    \ x) {\n        if (Math.pow(n, i) === x) {\n            return true;\n      \
    \  }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349004
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i <\
    \ x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_ohovm8r.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_ohovm8r.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i <\
    \ x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let power = 1;\n    while (power < x) {\n\
    \        power *= n;\n    }\n    return power === x;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (Math.pow(n, i) < x) {\n        i++;\n    }\n    if (Math.pow(n, i) ===\
    \ x) {\n        result = true;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349004
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt9rhuk17.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt9rhuk17.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  let i = 1;\n  while\
    \ (n ** i <= x) {\n    if (n ** i === x) {\n      result = true;\n    }\n    i++;\n\
    \  }\n  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349004
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = 1;\n    for (let i = 0; i <\
    \ n; i++) {\n        result *= n;\n        if (result === x) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpupky7slg.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpupky7slg.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    false

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxki3e2y5.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxki3e2y5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 1;\n    while (Math.pow(n, i) <=\
    \ x) {\n        if (Math.pow(n, i) === x) {\n            return true;\n      \
    \  }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349004
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = n;\n    while (result < x) {\n\
    \        result *= n;\n    }\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349007
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    if (x === 1) {\n\
    \        result = true;\n    } else {\n        for (let i = 0; i < x; i++) {\n\
    \            if (Math.pow(n, i) === x) {\n                result = true;\n   \
    \         }\n        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n \
    \ return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7on79s7y.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7on79s7y.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpumszf5iy.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpumszf5iy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = Math.log(x) / Math.log(n);\n \
    \ return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdtqyuhbm.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdtqyuhbm.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n       \
    \     result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349007
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (Math.pow(n, i) < x) {\n        if (Math.pow(n, i) === x) {\n        \
    \    result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    false

    false

    false

    '
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s2o4d4t.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s2o4d4t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348988
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i <\
    \ x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  let i = 1;\n  while\
    \ (i < x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  \
    \  i++;\n  }\n  return result;\n}\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb7bu1rmz.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb7bu1rmz.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxki3e2y5.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxki3e2y5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let power = n;\n  while (power < x) {\n   \
    \ power *= n;\n  }\n  return power === x;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp99cukhs8.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp99cukhs8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpumszf5iy.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpumszf5iy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n\
    \    return power % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8g0ws4wl.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8g0ws4wl.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = 1;\n  let i = 1;\n  while (result\
    \ < x) {\n    result = n ** i;\n    i++;\n  }\n  return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349007
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    for (let i = 0;\
    \ i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (i < x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348993
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 0;\n    let result = 1;\n    while\
    \ (result <= x) {\n        result = n ** i;\n        if (result === x) {\n   \
    \         return true;\n        }\n        i++;\n    }\n    return false;\n}\n\
    \nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpumszf5iy.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpumszf5iy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    if (x === 1) {\n\
    \        result = true;\n    } else {\n        for (let i = 1; i <= x; i++) {\n\
    \            if (Math.pow(n, i) === x) {\n                result = true;\n   \
    \         }\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348992
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = 1;\n  let i = 1;\n  while (result\
    \ < x) {\n    result = Math.pow(n, i);\n    i++;\n  }\n  return result === x;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349007
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  let power = 1;\n  while\
    \ (power <= x) {\n    if (power === x) {\n      result = true;\n    }\n    power\
    \ *= n;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349008
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 1;\n    while (Math.pow(n, i) <=\
    \ x) {\n        if (Math.pow(n, i) === x) {\n            return true;\n      \
    \  }\n        i++;\n    }\n    return false;\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349010
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxki3e2y5.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxki3e2y5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    if (x === 1) {\n\
    \        result = true;\n    } else {\n        let i = 1;\n        while (Math.pow(n,\
    \ i) <= x) {\n            if (Math.pow(n, i) === x) {\n                result\
    \ = true;\n            }\n            i++;\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349010
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = 1;\n    for (let i = 0; i <\
    \ n; i++) {\n        result *= n;\n        if (result === x) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpupky7slg.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpupky7slg.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    false

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 1;\n   \
    \ while (i < x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp85uh4qff.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp85uh4qff.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    true

    false

    false

    false

    '
  timestamp: 1660348995
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxki3e2y5.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxki3e2y5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s2o4d4t.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s2o4d4t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348988
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5pxb7_1f.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5pxb7_1f.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n  return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl_5ajkd7.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl_5ajkd7.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348995
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = 1;\n    let i = 1;\n    while\
    \ (result < x) {\n        result = Math.pow(n, i);\n        i++;\n    }\n    return\
    \ result === x;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349010
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    if (x === 1) {\n        return true;\n  \
    \  }\n    if (x === n) {\n        return true;\n    }\n    if (x % n !== 0) {\n\
    \        return false;\n    }\n    return is_simple_power(x / n, n);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348995
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s2o4d4t.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s2o4d4t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348988
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let power = 1;\n  while (power < x) {\n   \
    \ power *= n;\n  }\n  return power === x;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348995
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result: number = 1;\n    let i: number\
    \ = 1;\n    while (result < x) {\n        result = Math.pow(n, i);\n        i++;\n\
    \    }\n    return result === x;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349011
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  if (x === 1) {\n   \
    \ result = true;\n  } else {\n    for (let i = 2; i <= x; i++) {\n      if (Math.pow(n,\
    \ i) === x) {\n        result = true;\n      }\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348995
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    if (x === 1) {\n\
    \        result = true;\n    } else {\n        for (let i = 2; i <= x; i++) {\n\
    \            if (Math.pow(n, i) === x) {\n                result = true;\n   \
    \             break;\n            }\n        }\n    }\n    return result;\n}\n\
    \nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    false

    false

    false

    '
  timestamp: 1660348996
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 1;\n   \
    \ while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n       \
    \     result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349011
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.pow(n, Math.round(Math.log(x) /\
    \ Math.log(n))) === x;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf10rrhqk.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf10rrhqk.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348998
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while\
    \ (x > 1) {\n    x = x / n;\n    i++;\n  }\n  if (x === 1) {\n    result = true;\n\
    \  }\n  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349013
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    if (x === 1) {\n        return true;\n  \
    \  }\n    if (n === 1) {\n        return false;\n    }\n    let result = n;\n\
    \    while (result < x) {\n        result *= n;\n    }\n    return result ===\
    \ x;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348998
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  if (x === 1) {\n    return true;\n  }\n  if\
    \ (n === 1) {\n    return false;\n  }\n  let i = 1;\n  let result = n;\n  while\
    \ (result <= x) {\n    if (result === x) {\n      return true;\n    }\n    result\
    \ *= n;\n  }\n  return false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348998
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result: boolean = false;\n    let i:\
    \ number = 1;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) ===\
    \ x) {\n            result = true;\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n\
    \    return Math.pow(n, Math.round(power)) === x;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpa8rbjgm2.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa8rbjgm2.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348998
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result: boolean = false;\n    for (let\
    \ i = 0; i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result\
    \ = true;\n        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660349000
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result: number = 1;\n    let i: number\
    \ = 1;\n    while (result < x) {\n        result = Math.pow(n, i);\n        i++;\n\
    \    }\n    return result === x;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349011
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 1;\n   \
    \ while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n       \
    \     result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349016
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let power = 1;\n\
    \    while (power <= x) {\n        if (power === x) {\n            result = true;\n\
    \        }\n        power *= n;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660349016
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgz3w6lvn.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgz3w6lvn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpbfqgp30t.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbfqgp30t.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349001
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result: boolean = false;\n    let i:\
    \ number = 1;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) ===\
    \ x) {\n            result = true;\n        }\n        i++;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660349018
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 1;\n    while (Math.pow(n, i) <=\
    \ x) {\n        if (Math.pow(n, i) === x) {\n            return true;\n      \
    \  }\n        i++;\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349004
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let power = n;\n  while (power < x) {\n   \
    \ power *= n;\n  }\n  return power === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349019
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.pow(n, Math.round(Math.log(x) /\
    \ Math.log(n))) === x;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpus9sw8na.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpus9sw8na.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n))) === x;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzrcszxak.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzrcszxak.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let i = 1;\n  let result = 1;\n  while (result\
    \ < x) {\n    result = n ** i;\n    i++;\n  }\n  return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349023
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 0;\n    let result = 1;\n    while\
    \ (result < x) {\n        result = Math.pow(n, i);\n        i++;\n    }\n    return\
    \ result === x;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349023
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxki3e2y5.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxki3e2y5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (i < x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348993
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i <\
    \ x; i++) {\n    if (n ** i === x) {\n      result = true;\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt9rhuk17.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt9rhuk17.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxki3e2y5.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxki3e2y5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s2o4d4t.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s2o4d4t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348988
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let power = 1;\n    while (power < x) {\n\
    \        power *= n;\n    }\n    return power === x;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    if (x === 1) {\n\
    \        result = true;\n    } else {\n        for (let i = 1; i <= x; i++) {\n\
    \            if (Math.pow(n, i) === x) {\n                result = true;\n   \
    \         }\n        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    if (x === 1) {\n        return true;\n  \
    \  }\n    if (x % n !== 0) {\n        return false;\n    }\n    return is_simple_power(x\
    \ / n, n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349009
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while\
    \ (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n\
    \    }\n    i++;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660349025
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    if (x === 1) {\n\
    \        result = true;\n    } else {\n        let i = 1;\n        while (n **\
    \ i <= x) {\n            if (n ** i === x) {\n                result = true;\n\
    \                break;\n            }\n            i++;\n        }\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349009
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while\
    \ (i < x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  \
    \  i++;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349010
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    if (x === 1) {\n        return true;\n  \
    \  }\n    let i = 1;\n    let result = n;\n    while (result <= x) {\n       \
    \ if (result === x) {\n            return true;\n        }\n        result *=\
    \ n;\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  if (x === 1) {\n   \
    \ result = true;\n  } else {\n    for (let i = 0; i < x; i++) {\n      if (Math.pow(n,\
    \ i) === x) {\n        result = true;\n      }\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660349010
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgz3w6lvn.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgz3w6lvn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgz3w6lvn.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgz3w6lvn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 1;\n   \
    \ while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n       \
    \     result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349016
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = 1;\n  let i = 1;\n  while (result\
    \ < x) {\n    result = n ** i;\n    i++;\n  }\n  return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpumszf5iy.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpumszf5iy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (i < x) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n        i++;\n    }\n    return result;\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660349011
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    if (x === 1) {\n\
    \        result = true;\n    } else {\n        for (let i = 1; i <= x; i++) {\n\
    \            if (Math.pow(n, i) === x) {\n                result = true;\n   \
    \         }\n        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = 1;\n  for (let i = 1; i <= x;\
    \ i++) {\n    result *= n;\n    if (result === x) {\n      return true;\n    }\n\
    \  }\n  return false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz7rkmdcd.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz7rkmdcd.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    true

    false

    false

    false

    '
  timestamp: 1660349011
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s2o4d4t.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s2o4d4t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348988
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  let i = 0;\n  while\
    \ (Math.pow(n, i) <= x) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n\
    \    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349004
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp72t3din8.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp72t3din8.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660349011
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpumszf5iy.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpumszf5iy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 0;\n    let result = 1;\n    while\
    \ (result <= x) {\n        result = Math.pow(n, i);\n        if (result === x)\
    \ {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    // your code here\n    return false;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppl2qpvca.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppl2qpvca.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349012
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxki3e2y5.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxki3e2y5.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s2o4d4t.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s2o4d4t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348988
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 1;\n    while (Math.pow(n, i) <=\
    \ x) {\n        if (Math.pow(n, i) === x) {\n            return true;\n      \
    \  }\n        i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg926dph2.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg926dph2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349012
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  if (x === 1) {\n   \
    \ result = true;\n  } else {\n    for (let i = 0; i < x; i++) {\n      if (Math.pow(n,\
    \ i) === x) {\n        result = true;\n      }\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660349010
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgz3w6lvn.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgz3w6lvn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    for (let i = 0;\
    \ i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660349013
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    for (let i = 0;\
    \ i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s2o4d4t.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s2o4d4t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348988
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i <\
    \ x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i <\
    \ x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    for (let i = 0;\
    \ i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 1;\n    while (Math.pow(n, i) <=\
    \ x) {\n        if (Math.pow(n, i) === x) {\n            return true;\n      \
    \  }\n        i++;\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg926dph2.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg926dph2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349012
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let i = 1;\n  while (Math.pow(n, i) <= x) {\n\
    \    if (Math.pow(n, i) === x) {\n      return true;\n    }\n    i++;\n  }\n \
    \ return false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    for (let i = 0;\
    \ i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660349013
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = 1;\n    let i = 1;\n    while\
    \ (result <= x) {\n        result = Math.pow(n, i);\n        if (result === x)\
    \ {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349029
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let power = n;\n  while (power < x) {\n   \
    \ power *= n;\n  }\n  return power === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    true

    true

    false

    '
  timestamp: 1660349019
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (Math.pow(n, i) < x) {\n        i++;\n    }\n    if (Math.pow(n, i) ===\
    \ x) {\n        result = true;\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349004
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n))) === x;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzrcszxak.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzrcszxak.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349006
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2z2p6bdy.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2z2p6bdy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s2o4d4t.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s2o4d4t.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348988
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    for (let i = 0;\
    \ i < x; i++) {\n        if (Math.pow(n, i) === x) {\n            result = true;\n\
    \        }\n    }\n    return result;\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    if (x === 1) {\n        return true;\n  \
    \  }\n    let i = 1;\n    let result = n;\n    while (result <= x) {\n       \
    \ if (result === x) {\n            return true;\n        }\n        result *=\
    \ n;\n    }\n    return false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349027
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 1;\n    let power = n;\n    while\
    \ (power < x) {\n        power *= n;\n        i++;\n    }\n    if (power === x)\
    \ {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwe9w0ilq.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwe9w0ilq.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349013
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let i = 1;\n    while (Math.pow(n, i) < x)\
    \ {\n        i++;\n    }\n    if (Math.pow(n, i) === x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm_0lifi1.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm_0lifi1.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660349014
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  if (x === 1) {\n    return true;\n  }\n  let\
    \ i = 1;\n  let result = n;\n  while (result < x) {\n    result *= n;\n    i++;\n\
    \  }\n  if (result === x) {\n    return true;\n  }\n  return false;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349029
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let power = n;\n  while (power < x) {\n   \
    \ power *= n;\n  }\n  return power === x;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp99cukhs8.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp99cukhs8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348992
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgz3w6lvn.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgz3w6lvn.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n       \
    \     result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660349030
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (Math.pow(n, i) <= x) {\n        if (Math.pow(n, i) === x) {\n       \
    \     result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'true

    true

    true

    false

    '
  timestamp: 1660349030
- exit_code: 0
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  let result = false;\n  for (let i = 0; i <\
    \ x; i++) {\n    if (Math.pow(n, i) === x) {\n      result = true;\n    }\n  }\n\
    \  return result;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n\
    \  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptwbadbte.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptwbadbte.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: -1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = false;\n    let i = 0;\n   \
    \ while (Math.pow(n, i) < x) {\n        if (Math.pow(n, i) === x) {\n        \
    \    result = true;\n        }\n        i++;\n    }\n    return result;\n}\n\n\
    console.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8,\
    \ 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\n\
    console.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: 'false

    false

    false

    false

    '
  timestamp: 1660349007
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let result = Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpumszf5iy.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpumszf5iy.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n    let power = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(power);\n}\n\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
    \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
    \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
    \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
    \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
    \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5pxb7_1f.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5pxb7_1f.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
- exit_code: 1
  program: "// @ts-nocheck\n\n//Your task is to write a function that returns true\
    \ if a number x is a simple\n// power of n and false in other cases.\n// x is\
    \ a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1,\
    \ 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8,\
    \ 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3,\
    \ 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x:\
    \ number, n: number): boolean {\n  return Math.log(x) / Math.log(n) % 1 === 0;\n\
    }\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3,\
    \ 1));\nconsole.log(is_simple_power(5, 3));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_simple_power;\n\
    \  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
    \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
    \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
    \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
    \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
    \ 12),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv04imw0u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv04imw0u.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    false

    false

    false

    '
  timestamp: 1660348989
