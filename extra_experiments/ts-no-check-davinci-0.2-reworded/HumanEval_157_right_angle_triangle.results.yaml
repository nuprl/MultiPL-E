language: ts
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b\
    \ > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c,\
    \ 2);\n    } else {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    let [x, y, z] = sides;\n    return x * x + y * y === z *\
    \ z;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c\
    \ ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let sum = a + b + c - max;\n    return max * max === sum * sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_lnnxbb4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_lnnxbb4.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let min = Math.min(a, b, c);\n    let mid = a + b + c - max - min;\n    return\
    \ max * max === min * min + mid * mid;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8neg1r0n.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8neg1r0n.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return a * a == b * b + c * c;\n    } else if (b > a && b > c) {\n        return\
    \ b * b == a * a + c * c;\n    } else {\n        return c * c == a * a + b * b;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides: number[] = [a, b, c];\n\
    \    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (Math.pow(a, 2) + Math.pow(b,\
    \ 2) == Math.pow(c, 2)) || (Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2))\
    \ || (Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8neg1r0n.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8neg1r0n.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let hyp: number = Math.max(a,\
    \ b, c);\n    let other: number = Math.min(a, b, c);\n    let last: number = a\
    \ + b + c - hyp - other;\n    return hyp * hyp === other * other + last * last;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n    return (a * a + b * b ===\
    \ c * c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a ** 2 + b ** 2 === c **\
    \ 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpbd0wa9hy.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbd0wa9hy.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let min = Math.min(a, b, c);\n    let mid = a + b + c - max - min;\n    return\
    \ max * max === min * min + mid * mid;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcfodmsq2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcfodmsq2.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return Math.pow(a, 2) + Math.pow(b,\
    \ 2) === Math.pow(c, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmphy2gt6j_.js:19:12)\n    at Object.<anonymous> (/tmp/tmphy2gt6j_.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n       \
    \ return b * b === a * a + c * c;\n    } else {\n        return c * c === a *\
    \ a + b * b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a*a + b*b == c*c;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpj70pl6gc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpj70pl6gc.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO: implement this function\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfzzagfr5.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfzzagfr5.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let sum = a + b + c - max;\n    return max * max === sum * sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_lnnxbb4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_lnnxbb4.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b === c *\
    \ c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcfodmsq2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcfodmsq2.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b)\
    \ => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2],\
    \ 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    let\
    \ hypotenuse = Math.max(...sides);\n    let catheti = sides.filter(side => side\
    \ !== hypotenuse);\n    let sumOfSquares = catheti.reduce((acc, side) => acc +\
    \ Math.pow(side, 2), 0);\n    return Math.pow(hypotenuse, 2) === sumOfSquares;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max: number = Math.max(a,\
    \ b, c);\n    let sum: number = a + b + c - max;\n    return max * max === sum\
    \ * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp0vdaj7u9.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0vdaj7u9.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8neg1r0n.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8neg1r0n.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO: Implement me!\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp39j6ktx1.js:18:12)\n    at Object.<anonymous> (/tmp/tmp39j6ktx1.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b\
    \ > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c,\
    \ 2);\n    } else {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return Math.pow(a, 2) + Math.pow(b,\
    \ 2) === Math.pow(c, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmphy2gt6j_.js:19:12)\n    at Object.<anonymous> (/tmp/tmphy2gt6j_.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let result: boolean = false;\n\
    \    if (a * a + b * b == c * c) {\n        result = true;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmprscq3nbd.js:23:12)\n    at Object.<anonymous> (/tmp/tmprscq3nbd.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a*a + b*b == c*c || a*a\
    \ + c*c == b*b || b*b + c*c == a*a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO: implement this function\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfzzagfr5.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfzzagfr5.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8neg1r0n.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8neg1r0n.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a == 0 || b == 0 || c == 0)\
    \ {\n        return false;\n    }\n    let max = Math.max(a, b, c);\n    let sum\
    \ = a + b + c;\n    if (max == a) {\n        return Math.pow(a, 2) == Math.pow(b,\
    \ 2) + Math.pow(c, 2);\n    } else if (max == b) {\n        return Math.pow(b,\
    \ 2) == Math.pow(a, 2) + Math.pow(c, 2);\n    } else {\n        return Math.pow(c,\
    \ 2) == Math.pow(a, 2) + Math.pow(b, 2);\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let arr: number[] = [a, b, c];\n\
    \    arr.sort((a, b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2]\
    \ ** 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b)\
    \ => a - b);\n    return arr[0] * arr[0] + arr[1] * arr[1] === arr[2] * arr[2];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort();\n\
    \    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n\
    \  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpp5wr_ebl.js:20:12)\n    at Object.<anonymous> (/tmp/tmpp5wr_ebl.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b === c *\
    \ c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a*a + b*b == c*c;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpj70pl6gc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpj70pl6gc.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a*a + b*b == c*c;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpj70pl6gc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpj70pl6gc.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let hypotenuse = Math.max(a, b,\
    \ c);\n    let cathetus1 = Math.min(a, b, c);\n    let cathetus2 = a + b + c -\
    \ hypotenuse - cathetus1;\n    return Math.pow(hypotenuse, 2) === Math.pow(cathetus1,\
    \ 2) + Math.pow(cathetus2, 2);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // Your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7ftwz3m6.js:18:12)\n    at Object.<anonymous> (/tmp/tmp7ftwz3m6.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort();\n\
    \    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n\
    \  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpketnrkh3.js:21:12)\n    at Object.<anonymous> (/tmp/tmpketnrkh3.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcfodmsq2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcfodmsq2.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    const sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b === c *\
    \ c || a * a + c * c === b * b || b * b + c * c === a * a);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n\
    \  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a * a + b * b == c * c) {\n\
    \        return true;\n    }\n    if (a * a + c * c == b * b) {\n        return\
    \ true;\n    }\n    if (b * b + c * c == a * a) {\n        return true;\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcfodmsq2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcfodmsq2.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n       \
    \ return b * b === a * a + c * c;\n    } else {\n        return c * c === a *\
    \ a + b * b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let sum = a + b + c - max;\n    return max * max === sum * sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_lnnxbb4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_lnnxbb4.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcfodmsq2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcfodmsq2.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO: implement this function\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfzzagfr5.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfzzagfr5.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO: implement this function\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfzzagfr5.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfzzagfr5.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b\
    \ > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c,\
    \ 2);\n    } else {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides: number[] = [a, b, c];\n\
    \    sides.sort((a, b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) === Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let arr = [a, b, c].sort((a, b)\
    \ => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcfodmsq2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcfodmsq2.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let sum = a + b + c - max;\n    return max * max === sum * sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_lnnxbb4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_lnnxbb4.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO: implement the function\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpswkxrjml.js:18:12)\n    at Object.<anonymous> (/tmp/tmpswkxrjml.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n       \
    \ return b * b === a * a + c * c;\n    } else {\n        return c * c === a *\
    \ a + b * b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let sum = a + b + c - max;\n    return max * max === sum * sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_lnnxbb4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_lnnxbb4.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c\
    \ ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n       \
    \ return b * b === a * a + c * c;\n    } else {\n        return c * c === a *\
    \ a + b * b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8neg1r0n.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8neg1r0n.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let result: boolean = false;\n\
    \    if (a * a + b * b == c * c) {\n        result = true;\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmprscq3nbd.js:23:12)\n    at Object.<anonymous> (/tmp/tmprscq3nbd.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n       \
    \ return b * b === a * a + c * c;\n    } else {\n        return c * c === a *\
    \ a + b * b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    const sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    let [a, b, c] = arr;\n    return a * a + b * b === c * c;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // Your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7ftwz3m6.js:18:12)\n    at Object.<anonymous> (/tmp/tmp7ftwz3m6.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c\
    \ ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max: number = Math.max(a,\
    \ b, c);\n    let sum: number = a + b + c - max;\n    return max * max === sum\
    \ * sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp0vdaj7u9.js:19:12)\n    at Object.<anonymous> (/tmp/tmp0vdaj7u9.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a * a + b * b == c * c) {\n\
    \        return true;\n    }\n    if (a * a + c * c == b * b) {\n        return\
    \ true;\n    }\n    if (b * b + c * c == a * a) {\n        return true;\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return Math.pow(arr[0], 2) + Math.pow(arr[1], 2) === Math.pow(arr[2],\
    \ 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // Your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7ftwz3m6.js:18:12)\n    at Object.<anonymous> (/tmp/tmp7ftwz3m6.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a*a + b*b == c*c;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpj70pl6gc.js:19:12)\n    at Object.<anonymous> (/tmp/tmpj70pl6gc.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8neg1r0n.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8neg1r0n.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b === c*c) ||\
    \ (a*a + c*c === b*b) || (b*b + c*c === a*a);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268153
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    let [x, y, z] = sides;\n    return x * x + y * y === z *\
    \ z;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b === c *\
    \ c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b === c*c) ||\
    \ (a*a + c*c === b*b) || (b*b + c*c === a*a);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268153
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO: implement this function\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfzzagfr5.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfzzagfr5.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO: implement this function\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfzzagfr5.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfzzagfr5.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a * a + b * b == c * c) {\n\
    \        return true;\n    }\n    if (a * a + c * c == b * b) {\n        return\
    \ true;\n    }\n    if (b * b + c * c == a * a) {\n        return true;\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8neg1r0n.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8neg1r0n.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort();\n\
    \    if (sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]) {\n\
    \        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpx53ymjez.js:24:12)\n    at Object.<anonymous> (/tmp/tmpx53ymjez.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268153
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b\
    \ > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c,\
    \ 2);\n    } else {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let sum = a + b + c - max;\n    return max * max === sum * sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_lnnxbb4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_lnnxbb4.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // Your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7ftwz3m6.js:18:12)\n    at Object.<anonymous> (/tmp/tmp7ftwz3m6.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268152
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a**2 + b**2 === c**2)\
    \ || (a**2 + c**2 === b**2) || (b**2 + c**2 === a**2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268153
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO\n    return false;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpbbpcchrp.js:18:12)\n    at Object.<anonymous> (/tmp/tmpbbpcchrp.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268154
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b\
    \ > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c,\
    \ 2);\n    } else {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return a * a === b * b + c * c;\n    }\n    if (b > a && b > c) {\n       \
    \ return b * b === a * a + c * c;\n    }\n    if (c > a && c > b) {\n        return\
    \ c * c === a * a + b * b;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268154
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c\
    \ || a * a + c * c === b * b || b * b + c * c === a * a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let a2 = a * a;\n    let b2 =\
    \ b * b;\n    let c2 = c * c;\n    if (a2 + b2 == c2 || b2 + c2 == a2 || c2 +\
    \ a2 == b2) {\n        return true;\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n\
    \  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268154
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c\
    \ ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b === c *\
    \ c) || (a * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return a * a === b * b + c * c;\n    } else if (b > a && b > c) {\n       \
    \ return b * b === a * a + c * c;\n    } else {\n        return c * c === a *\
    \ a + b * b;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a**2 + b**2 == c**2) ||\
    \ (a**2 + c**2 == b**2) || (b**2 + c**2 == a**2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268154
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let sum = a + b + c - max;\n    return max * max === sum * sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_lnnxbb4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_lnnxbb4.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8neg1r0n.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8neg1r0n.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let sum = a + b + c - max;\n    return max * max === sum * sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_lnnxbb4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_lnnxbb4.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO: implement this function\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfzzagfr5.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfzzagfr5.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let arr = [a, b, c];\n    arr.sort((a,\
    \ b) => a - b);\n    return arr[0] ** 2 + arr[1] ** 2 === arr[2] ** 2;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcfodmsq2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcfodmsq2.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a**2 + b**2 === c**2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpamyer387.js:19:12)\n    at Object.<anonymous> (/tmp/tmpamyer387.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268154
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    let [x, y, z] = sides;\n    return x * x + y * y === z *\
    \ z;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // TODO: implement this function\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfzzagfr5.js:18:12)\n    at Object.<anonymous> (/tmp/tmpfzzagfr5.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return Math.pow(a, 2) + Math.pow(b,\
    \ 2) === Math.pow(c, 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmphy2gt6j_.js:19:12)\n    at Object.<anonymous> (/tmp/tmphy2gt6j_.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    // your code here\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8neg1r0n.js:18:12)\n    at Object.<anonymous> (/tmp/tmp8neg1r0n.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let a2 = a * a;\n    let b2 =\
    \ b * b;\n    let c2 = c * c;\n    return (a2 + b2 == c2 || a2 + c2 == b2 || b2\
    \ + c2 == a2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268154
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcfodmsq2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcfodmsq2.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let min = Math.min(a, b, c);\n    let mid = a + b + c - max - min;\n    return\
    \ max * max === min * min + mid * mid;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c].sort((a,\
    \ b) => a - b);\n    return sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a > b && a > c) {\n      \
    \  return Math.pow(a, 2) === Math.pow(b, 2) + Math.pow(c, 2);\n    } else if (b\
    \ > a && b > c) {\n        return Math.pow(b, 2) === Math.pow(a, 2) + Math.pow(c,\
    \ 2);\n    } else {\n        return Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b,\
    \ 2);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let max = Math.max(a, b, c);\n\
    \    let sum = a + b + c - max;\n    return max * max === sum * sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp_lnnxbb4.js:19:12)\n    at Object.<anonymous> (/tmp/tmp_lnnxbb4.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    if (a * a + b * b == c * c) {\n\
    \        return true;\n    }\n    else if (a * a + c * c == b * b) {\n       \
    \ return true;\n    }\n    else if (b * b + c * c == a * a) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268154
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a * a + b * b == c * c)\
    \ || (a * a + c * c == b * b) || (b * b + c * c == a * a);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a ** 2 + b ** 2 === c **\
    \ 2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpbd0wa9hy.js:19:12)\n    at Object.<anonymous> (/tmp/tmpbd0wa9hy.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return a * a + b * b === c * c;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpcfodmsq2.js:19:12)\n    at Object.<anonymous> (/tmp/tmpcfodmsq2.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268149
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a*a + b*b == c*c) || (a*a\
    \ + c*c == b*b) || (b*b + c*c == a*a);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = right_angle_triangle;\n\
    \  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268151
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let result: boolean = false;\n\
    \    let sides: number[] = [a, b, c];\n    sides.sort((a, b) => a - b);\n    if\
    \ (Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2], 2)) {\n\
    \        result = true;\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
    \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
    \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
    \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
    \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268154
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    let sides = [a, b, c];\n    sides.sort((a,\
    \ b) => a - b);\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) ===\
    \ Math.pow(sides[2], 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given the lengths of the three sides of a triangle.\
    \ Return true if the three\n// sides form a right-angled triangle, false otherwise.\n\
    // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n\
    // >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a:\
    \ number, b: number, c: number): boolean {\n    return (a ** 2 + b ** 2 === c\
    \ ** 2) || (a ** 2 + c ** 2 === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
    \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
    \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
    \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
    \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
    \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
    \ 2, 10),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268148
