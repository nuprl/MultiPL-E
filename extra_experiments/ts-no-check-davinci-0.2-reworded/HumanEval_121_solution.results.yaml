language: ts
name: HumanEval_121_solution
results:
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => e % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((n, i) => i % 2 === 0 && n % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => num % 2 === 1 && i % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => num % 2 !== 0 && i % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nexport default solution;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ cur) => acc + cur, 0);\n}\n\nexport default solution;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((el, i) => i % 2 === 0 && el % 2 !== 0).reduce((a, b)\
    \ => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((_, i) => i % 2 === 0).filter(x => x % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 == 0 && x % 2 != 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => num % 2 === 1 && i % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => num % 2 !== 0 && index % 2 === 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 === 1).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nexport default solution;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 !== 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n12\n    at test (/tmp/tmp193eqoup.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp193eqoup.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 12,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: '1

    6

    334

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((_, i) => i % 2 === 0).filter(x => x % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => num % 2 !== 0 && i % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((n, i) => i % 2 === 0 && n % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((_, i) => i % 2 === 0).filter(x => x % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((n, i) => i % 2 === 0 && n % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => v % 2 && i % 2).reduce((a, b) => a + b, 0);\n\
    }\n\nexport default solution;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n12\n    at test (/tmp/tmp2ct99ue0.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2ct99ue0.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 12,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    return lst.filter((val, index) => index % 2 === 0 && val % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i %\
    \ 2 === 0 && lst[i] % 2 !== 0) {\n      result += lst[i];\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => v % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 !== 0 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nexport default solution;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268037
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !==\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n12\n    at test (/tmp/tmpjc2sop1q.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjc2sop1q.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 12,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: '1

    6

    334

    '
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((n, i) => i % 2 === 0 && n % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => e % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => v % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => num % 2 === 1 && i % 2 === 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, i) => i % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i]\
    \ % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((num, index) => index % 2 === 0 && num % 2 !== 0).reduce((a,\
    \ b) => a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 !== 0 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 !== 0 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nexport default solution;\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268028
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268029
- exit_code: 1
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !==\
    \ 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n12\n    at test (/tmp/tmpjc2sop1q.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjc2sop1q.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 12,\n  operator: 'deepEqual'\n\
    }\n"
  stdout: '1

    6

    334

    '
  timestamp: 1660268037
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((v, i) => i % 2 === 0 && v % 2 !== 0).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
- exit_code: 0
  program: "// @ts-nocheck\n\n//Given a non-empty array of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n// Examples\n// >>>\
    \ solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>>\
    \ solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number\
    \ {\n  return lst.filter((x, i) => i % 2 === 0 && x % 2 === 1).reduce((a, b) =>\
    \ a + b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '12

    9

    0

    '
  timestamp: 1660268034
