language: ts
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let strength = 0;\n        for (let j = 0; j < extension.length;\
    \ j++) {\n            let char = extension[j];\n            if (char === char.toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpj0sypfme.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj0sypfme.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkrh0befn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkrh0befn.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpyoukgrgt.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyoukgrgt.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ strength++;\n            } else {\n                strength--;\n           \
    \ }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpw0585ijs.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw0585ijs.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char >= 'A' && char <= 'Z') {\n                extension_strength++;\n\
    \            } else if (char >= 'a' && char <= 'z') {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\nshould equal\n\n'__YESIMHERE.NuLl__'\n\
    \    at test (/tmp/tmpupnd14hg.js:45:12)\n    at Object.<anonymous> (/tmp/tmpupnd14hg.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n  expected: '__YESIMHERE.NuLl__',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9vtagz30.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtagz30.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension: string = extensions[i];\n        let strength: number = 0;\n\
    \        for (let j: number = 0; j < extension.length; j++) {\n            let\
    \ char: string = extension[j];\n            if (char.toUpperCase() === char) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpr8gd9zq8.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr8gd9zq8.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest = extensions[0];\n    let strongest_strength = 0;\n   \
    \ for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let strength = 0;\n        for (let j = 0; j < extension.length; j++)\
    \ {\n            let char = extension[j];\n            if (char.toUpperCase()\
    \ === char) {\n                strength += 1;\n            } else {\n        \
    \        strength -= 1;\n            }\n        }\n        if (strength > strongest_strength)\
    \ {\n            strongest = extension;\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfcny05eg.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfcny05eg.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char == char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpixbfikrd.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpixbfikrd.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpcpbnc2lk.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcpbnc2lk.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let current_extension\
    \ = extensions[i];\n        let current_extension_strength = 0;\n        for (let\
    \ j = 0; j < current_extension.length; j++) {\n            let current_char =\
    \ current_extension[j];\n            if (current_char.toUpperCase() === current_char)\
    \ {\n                current_extension_strength++;\n            } else {\n   \
    \             current_extension_strength--;\n            }\n        }\n      \
    \  if (current_extension_strength > strongest_extension_strength) {\n        \
    \    strongest_extension = current_extension;\n            strongest_extension_strength\
    \ = current_extension_strength;\n        }\n    }\n    return class_name + \"\
    .\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp6mrkiu3j.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6mrkiu3j.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let letter = extension[j];\n  \
    \          if (letter.toUpperCase() === letter) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp2wbvd4ag.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2wbvd4ag.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let strength = 0;\n \
    \       for (let char of extension) {\n            if (char.toUpperCase() ===\
    \ char) {\n                strength++;\n            } else {\n               \
    \ strength--;\n            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4hyuv41f.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4hyuv41f.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let extension_strength\
    \ = 0;\n        for (let letter of extension) {\n            if (letter.toUpperCase()\
    \ === letter) {\n                extension_strength++;\n            } else {\n\
    \                extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpumbn7b5q.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpumbn7b5q.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4ay1rad1.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ay1rad1.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension: string = extensions[i];\n        let strength: number = 0;\n\
    \        for (let j: number = 0; j < extension.length; j++) {\n            let\
    \ char: string = extension[j];\n            if (char == char.toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpcqmms6j4.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcqmms6j4.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_strength\
    \ = 0;\n    extensions.forEach(extension => {\n        let strength = 0;\n   \
    \     for (let i = 0; i < extension.length; i++) {\n            if (extension[i]\
    \ >= 'A' && extension[i] <= 'Z') {\n                strength++;\n            }\
    \ else {\n                strength--;\n            }\n        }\n        if (strength\
    \ > strongest_strength) {\n            strongest_strength = strength;\n      \
    \      strongest_extension = extension;\n        }\n    });\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmpdy8c0rzi.js:41:12)\n    at Object.<anonymous> (/tmp/tmpdy8c0rzi.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkrh0befn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkrh0befn.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprp_efjg3.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprp_efjg3.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmplyv4g7h8.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplyv4g7h8.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmplyv4g7h8.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplyv4g7h8.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    extensions.forEach(extension => {\n        let extension_strength\
    \ = 0;\n        for (let i = 0; i < extension.length; i++) {\n            if (extension[i]\
    \ === extension[i].toUpperCase()) {\n                extension_strength++;\n \
    \           } else {\n                extension_strength--;\n            }\n \
    \       }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    });\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp3orqikwg.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3orqikwg.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let extension: string\
    \ = extensions[i];\n        let strength: number = 0;\n        for (let j = 0;\
    \ j < extension.length; j++) {\n            let char: string = extension[j];\n\
    \            if (char === char.toUpperCase()) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_strength) {\n            strongest = extension;\n\
    \            strongest_strength = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmppmoavwyp.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppmoavwyp.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprp_efjg3.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprp_efjg3.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let strength = 0;\n        for (let j = 0; j < extension.length;\
    \ j++) {\n            let char = extension[j];\n            if (char.toUpperCase()\
    \ === char) {\n                strength++;\n            } else {\n           \
    \     strength--;\n            }\n        }\n        if (strength > strongest_strength)\
    \ {\n            strongest_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpmio_d770.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmio_d770.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let extension of extensions) {\n        let strength:\
    \ number = 0;\n        for (let char of extension) {\n            if (char.toUpperCase()\
    \ === char) {\n                strength++;\n            } else {\n           \
    \     strength--;\n            }\n        }\n        if (strength > strongest_strength)\
    \ {\n            strongest_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpwxxsqlwt.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwxxsqlwt.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.match(/[A-Z]/)) {\n                extension_strength++;\n \
    \           } else if (char.match(/[a-z]/)) {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\nshould equal\n\n'__YESIMHERE.NuLl__'\n\
    \    at test (/tmp/tmpjijb0jvy.js:45:12)\n    at Object.<anonymous> (/tmp/tmpjijb0jvy.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n  expected: '__YESIMHERE.NuLl__',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let strength: number = 0;\n        for (let j: number = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmpumkr781q.js:41:12)\n    at Object.<anonymous> (/tmp/tmpumkr781q.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ strength++;\n            } else {\n                strength--;\n           \
    \ }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp12r4k4a6.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12r4k4a6.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let strength = 0;\n        for (let j = 0; j < extension.length;\
    \ j++) {\n            let char = extension[j];\n            if (char === char.toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpj0sypfme.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj0sypfme.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    extensions.forEach(extension => {\n        let extension_strength:\
    \ number = 0;\n        for (let i = 0; i < extension.length; i++) {\n        \
    \    if (extension[i] === extension[i].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    });\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpi13xrpdx.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi13xrpdx.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            if (extension[j] === extension[j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0080vjxx.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0080vjxx.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let extension_strength\
    \ = 0;\n        for (let i = 0; i < extension.length; i++) {\n            if (extension[i]\
    \ == extension[i].toUpperCase()) {\n                extension_strength++;\n  \
    \          } else {\n                extension_strength--;\n            }\n  \
    \      }\n        if (extension_strength > strongest_extension_strength) {\n \
    \           strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprwnp74iw.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprwnp74iw.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension: string = extensions[i];\n        let extension_strength: number =\
    \ 0;\n        for (let j = 0; j < extension.length; j++) {\n            let char:\
    \ string = extension[j];\n            if (char === char.toUpperCase()) {\n   \
    \             extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp_hep_ry5.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_hep_ry5.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    extensions.forEach(extension => {\n        let extension_strength\
    \ = extension.split('').reduce((acc, curr) => {\n            if (curr.toUpperCase()\
    \ === curr) {\n                return acc + 1;\n            } else {\n       \
    \         return acc - 1;\n            }\n        }, 0);\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   });\n    return `${class_name}.${strongest_extension}`;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpozy0d265.js:42:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpozy0d265.js:50:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let current_extension_strength: number = 0;\n        for (let j: number\
    \ = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] ===\
    \ extensions[i][j].toUpperCase()) {\n                current_extension_strength++;\n\
    \            } else {\n                current_extension_strength--;\n       \
    \     }\n        }\n        if (current_extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = current_extension_strength;\n        }\n    }\n    return class_name + \"\
    .\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpu0tekac6.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu0tekac6.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] >= 'A' && extensions[i][j] <= 'Z') {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmpnfhpnt7t.js:41:12)\n    at Object.<anonymous> (/tmp/tmpnfhpnt7t.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = -Infinity;\n    for (let extension of extensions) {\n        let strength:\
    \ number = 0;\n        for (let char of extension) {\n            if (char.toUpperCase()\
    \ === char) {\n                strength++;\n            } else {\n           \
    \     strength--;\n            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp83jdz14h.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp83jdz14h.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return `${class_name}.${strongest_extension}`;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxoz8b42a.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxoz8b42a.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9vtagz30.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtagz30.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    extensions.forEach(extension => {\n        let strength: number = 0;\n  \
    \      for (let i: number = 0; i < extension.length; i++) {\n            if (extension[i]\
    \ === extension[i].toUpperCase()) {\n                strength++;\n           \
    \ } else {\n                strength--;\n            }\n        }\n        if\
    \ (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest = extension;\n        }\n    });\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfmhyldb_.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfmhyldb_.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let extension_strength\
    \ = 0;\n        for (let char of extension) {\n            if (char.toUpperCase()\
    \ === char) {\n                extension_strength++;\n            } else {\n \
    \               extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpux91on8r.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpux91on8r.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let current_extension_strength: number = 0;\n        for (let j: number\
    \ = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j] ===\
    \ extensions[i][j].toUpperCase()) {\n                current_extension_strength++;\n\
    \            } else {\n                current_extension_strength--;\n       \
    \     }\n        }\n        if (current_extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = current_extension_strength;\n        }\n    }\n    return class_name + \"\
    .\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpu0tekac6.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu0tekac6.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpcpbnc2lk.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcpbnc2lk.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ current_extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                current_extension_strength++;\n            } else {\n\
    \                current_extension_strength--;\n            }\n        }\n   \
    \     if (current_extension_strength > strongest_extension_strength) {\n     \
    \       strongest_extension_strength = current_extension_strength;\n         \
    \   strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmpnr83lohr.js:41:12)\n    at Object.<anonymous> (/tmp/tmpnr83lohr.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4ay1rad1.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ay1rad1.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongestExtension = extensions[0];\n    let strongestExtensionStrength\
    \ = getStrength(strongestExtension);\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let currentExtensionStrength = getStrength(extensions[i]);\n\
    \        if (currentExtensionStrength > strongestExtensionStrength) {\n      \
    \      strongestExtension = extensions[i];\n            strongestExtensionStrength\
    \ = currentExtensionStrength;\n        }\n    }\n    return class_name + \".\"\
    \ + strongestExtension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpde9fzovs.js:20\n    var strongestExtensionStrength = getStrength(strongestExtension);\n\
    \                                     ^\n\nReferenceError: getStrength is not\
    \ defined\n    at Strongest_Extension (/tmp/tmpde9fzovs.js:20:38)\n    at test\
    \ (/tmp/tmpde9fzovs.js:33:22)\n    at Object.<anonymous> (/tmp/tmpde9fzovs.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_strength = 0;\n  \
    \  for (let i = 0; i < extensions.length; i++) {\n        let strength = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ >= \"A\" && extensions[i][j] <= \"Z\") {\n                strength++;\n    \
    \        } else {\n                strength--;\n            }\n        }\n   \
    \     if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmpy0wxphgg.js:41:12)\n    at Object.<anonymous> (/tmp/tmpy0wxphgg.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    extensions.forEach(extension => {\n        let strength = 0;\n   \
    \     for (let i = 0; i < extension.length; i++) {\n            if (extension[i]\
    \ === extension[i].toUpperCase()) {\n                strength++;\n           \
    \ } else {\n                strength--;\n            }\n        }\n        if\
    \ (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    });\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp2vcz12a6.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2vcz12a6.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = -Infinity;\n    for (let i = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpue3pb6a3.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpue3pb6a3.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkrh0befn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkrh0befn.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.match(/[A-Z]/)) {\n                extension_strength++;\n \
    \           } else if (char.match(/[a-z]/)) {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\nshould equal\n\n'__YESIMHERE.NuLl__'\n\
    \    at test (/tmp/tmpjijb0jvy.js:45:12)\n    at Object.<anonymous> (/tmp/tmpjijb0jvy.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n  expected: '__YESIMHERE.NuLl__',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char >= 'A' && char <= 'Z') {\n                extension_strength++;\n\
    \            } else if (char >= 'a' && char <= 'z') {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\nshould equal\n\n'__YESIMHERE.NuLl__'\n\
    \    at test (/tmp/tmpupnd14hg.js:45:12)\n    at Object.<anonymous> (/tmp/tmpupnd14hg.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n  expected: '__YESIMHERE.NuLl__',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let strength = 0;\n \
    \       for (let char of extension) {\n            if (char.toUpperCase() ===\
    \ char) {\n                strength += 1;\n            } else {\n            \
    \    strength -= 1;\n            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpszojanei.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpszojanei.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267796
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = -Infinity;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension = extensions[i];\n        let extension_strength = 0;\n        for\
    \ (let j = 0; j < extension.length; j++) {\n            let char = extension[j];\n\
    \            if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpdiue61mm.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdiue61mm.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    extensions.forEach(extension => {\n        let strength = 0;\n   \
    \     for (let i = 0; i < extension.length; i++) {\n            if (extension[i]\
    \ === extension[i].toUpperCase()) {\n                strength++;\n           \
    \ } else {\n                strength--;\n            }\n        }\n        if\
    \ (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    });\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp2vcz12a6.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2vcz12a6.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmplyv4g7h8.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplyv4g7h8.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongestExtension = extensions[0];\n    let strongestExtensionStrength\
    \ = 0;\n    extensions.forEach(extension => {\n        let extensionStrength =\
    \ extension.split('').reduce((acc, char) => {\n            if (char === char.toUpperCase())\
    \ {\n                acc += 1;\n            } else {\n                acc -= 1;\n\
    \            }\n            return acc;\n        }, 0);\n        if (extensionStrength\
    \ > strongestExtensionStrength) {\n            strongestExtensionStrength = extensionStrength;\n\
    \            strongestExtension = extension;\n        }\n    });\n    return `${class_name}.${strongestExtension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp6p248n7t.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6p248n7t.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension: string = extensions[i];\n        let extension_strength: number =\
    \ 0;\n        for (let j = 0; j < extension.length; j++) {\n            let char:\
    \ string = extension[j];\n            if (char === char.toUpperCase()) {\n   \
    \             extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp_hep_ry5.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_hep_ry5.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = extensions[0];\n    let strongest_strength: number\
    \ = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j: number = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp491oax2x.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp491oax2x.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let strength = 0;\n \
    \       for (let i = 0; i < extension.length; i++) {\n            if (extension[i]\
    \ >= 'A' && extension[i] <= 'Z') {\n                strength++;\n            }\
    \ else {\n                strength--;\n            }\n        }\n        if (strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmphey4jew1.js:42:12)\n    at Object.<anonymous> (/tmp/tmphey4jew1.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                extension_strength++;\n            } else if (extensions[i][j]\
    \ >= \"a\" && extensions[i][j] <= \"z\") {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.'\n\nshould equal\n\n'__YESIMHERE.NuLl__'\n\
    \    at test (/tmp/tmpc6m1kysm.js:43:12)\n    at Object.<anonymous> (/tmp/tmpc6m1kysm.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.',\n  expected: '__YESIMHERE.NuLl__',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest = extensions[0];\n    let strongest_strength = 0;\n   \
    \ for (let i = 0; i < extensions.length; i++) {\n        let strength = 0;\n \
    \       for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                strength++;\n        \
    \    } else {\n                strength--;\n            }\n        }\n       \
    \ if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmp5t6gdeu6.js:41:12)\n    at Object.<anonymous> (/tmp/tmp5t6gdeu6.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkrh0befn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkrh0befn.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmplyv4g7h8.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplyv4g7h8.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkrh0befn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkrh0befn.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp7l2mgk9j.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7l2mgk9j.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n \
    \               strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpb58omd8c.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpb58omd8c.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"Z\") {\n            \
    \    strength++;\n            } else {\n                strength--;\n        \
    \    }\n        }\n        if (strength > strongest_extension_strength) {\n  \
    \          strongest_extension_strength = strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmpj3llppik.js:41:12)\n    at Object.<anonymous> (/tmp/tmpj3llppik.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ strength++;\n            } else {\n                strength--;\n           \
    \ }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpw0585ijs.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw0585ijs.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ strength++;\n            } else {\n                strength--;\n           \
    \ }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpw0585ijs.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw0585ijs.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ strength++;\n            } else {\n                strength--;\n           \
    \ }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp12r4k4a6.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12r4k4a6.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmplyv4g7h8.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplyv4g7h8.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ strength++;\n            } else {\n                strength--;\n           \
    \ }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpw0585ijs.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw0585ijs.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let strength = 0;\n \
    \       for (let letter of extension) {\n            if (letter.toUpperCase()\
    \ === letter) {\n                strength++;\n            } else {\n         \
    \       strength--;\n            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpea_1v41s.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpea_1v41s.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char == char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpixbfikrd.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpixbfikrd.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength += 1;\n            } else {\n        \
    \        extension_strength -= 1;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxcy85uuo.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxcy85uuo.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest = extensions[0];\n    let strongest_strength = 0;\n   \
    \ for (let i = 0; i < extensions.length; i++) {\n        let strength = 0;\n \
    \       for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > strongest_strength) {\n            strongest = extensions[i];\n\
    \            strongest_strength = strength;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphc5aa6e7.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphc5aa6e7.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"Z\") {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmprs_1rjlf.js:41:12)\n    at Object.<anonymous> (/tmp/tmprs_1rjlf.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmplyv4g7h8.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplyv4g7h8.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.match(/[A-Z]/)) {\n                extension_strength++;\n \
    \           } else if (char.match(/[a-z]/)) {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\nshould equal\n\n'__YESIMHERE.NuLl__'\n\
    \    at test (/tmp/tmpjijb0jvy.js:45:12)\n    at Object.<anonymous> (/tmp/tmpjijb0jvy.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n  expected: '__YESIMHERE.NuLl__',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpvmf674af.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvmf674af.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprp_efjg3.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprp_efjg3.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i: number = 0; i < extensions.length; i++) {\n        let strength:\
    \ number = 0;\n        for (let j: number = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp6ezoq1me.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6ezoq1me.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkrh0befn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkrh0befn.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let strength = 0;\n \
    \       for (let letter of extension) {\n            if (letter.toUpperCase()\
    \ === letter) {\n                strength++;\n            } else {\n         \
    \       strength--;\n            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpea_1v41s.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpea_1v41s.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            if (extension[j] === extension[j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp0080vjxx.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0080vjxx.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension: string = extensions[i];\n        let extension_strength: number =\
    \ 0;\n        for (let j = 0; j < extension.length; j++) {\n            let char:\
    \ string = extension[j];\n            if (char.toUpperCase() === char) {\n   \
    \             extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp3k9b76ib.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3k9b76ib.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let strength = 0;\n \
    \       for (let char of extension) {\n            if (char.toUpperCase() ===\
    \ char) {\n                strength++;\n            } else {\n               \
    \ strength--;\n            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4hyuv41f.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4hyuv41f.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9vtagz30.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtagz30.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: number = 0;\n    let strongest_extension: string = \"\"\
    ;\n    for (let i = 0; i < extensions.length; i++) {\n        let cap: number\
    \ = 0;\n        let sm: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        if (cap - sm > strongest) {\n            strongest\
    \ = cap - sm;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpk1x6s9vb.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpk1x6s9vb.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let current_extension: string = extensions[i];\n        let current_extension_strength:\
    \ number = 0;\n        for (let j: number = 0; j < current_extension.length; j++)\
    \ {\n            let current_letter: string = current_extension[j];\n        \
    \    if (current_letter === current_letter.toUpperCase()) {\n                current_extension_strength\
    \ += 1;\n            } else {\n                current_extension_strength -= 1;\n\
    \            }\n        }\n        if (current_extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = current_extension;\n            strongest_extension_strength\
    \ = current_extension_strength;\n        }\n    }\n    return class_name + \"\
    .\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1ivnj_ea.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ivnj_ea.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest = extensions[0];\n    let strongest_strength = 0;\n   \
    \ for (let i = 0; i < extensions.length; i++) {\n        let strength = 0;\n \
    \       for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                strength++;\n        \
    \    } else {\n                strength--;\n            }\n        }\n       \
    \ if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmp5t6gdeu6.js:41:12)\n    at Object.<anonymous> (/tmp/tmp5t6gdeu6.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest = extensions[0];\n    let strongest_strength = 0;\n   \
    \ for (let i = 0; i < extensions.length; i++) {\n        let extension = extensions[i];\n\
    \        let strength = 0;\n        for (let j = 0; j < extension.length; j++)\
    \ {\n            let char = extension[j];\n            if (char.toUpperCase()\
    \ === char) {\n                strength++;\n            } else {\n           \
    \     strength--;\n            }\n        }\n        if (strength > strongest_strength)\
    \ {\n            strongest = extension;\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxsba_x5t.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxsba_x5t.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char == char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpixbfikrd.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpixbfikrd.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkrh0befn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkrh0befn.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongestExtension = extensions[0];\n    let strongestExtensionStrength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extensionStrength = 0;\n        for (let j = 0;\
    \ j < extension.length; j++) {\n            let char = extension[j];\n       \
    \     if (char.toUpperCase() === char) {\n                extensionStrength++;\n\
    \            } else {\n                extensionStrength--;\n            }\n \
    \       }\n        if (extensionStrength > strongestExtensionStrength) {\n   \
    \         strongestExtensionStrength = extensionStrength;\n            strongestExtension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongestExtension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1qnc8bq6.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1qnc8bq6.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension: string = extensions[i];\n        let strength: number = 0;\n    \
    \    for (let j = 0; j < extension.length; j++) {\n            let char: string\
    \ = extension[j];\n            if (char === char.toUpperCase()) {\n          \
    \      strength++;\n            } else {\n                strength--;\n      \
    \      }\n        }\n        if (strength > strongest_strength) {\n          \
    \  strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpegzf1c4z.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpegzf1c4z.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let cap: number =\
    \ 0;\n        let sm: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"\
    Z\") {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        let strength: number = cap - sm;\n        if\
    \ (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmpx4wa8p8e.js:43:12)\n    at Object.<anonymous> (/tmp/tmpx4wa8p8e.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    extensions.forEach(extension => {\n        let strength: number\
    \ = 0;\n        for (let i: number = 0; i < extension.length; i++) {\n       \
    \     if (extension[i] === extension[i].toUpperCase()) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    });\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpd0hmgwom.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd0hmgwom.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267800
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9vtagz30.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtagz30.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ strength++;\n            } else {\n                strength--;\n           \
    \ }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpw0585ijs.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw0585ijs.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpg0un1oft.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg0un1oft.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4ay1rad1.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ay1rad1.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest = extensions[0];\n    let strongest_strength = 0;\n   \
    \ for (let i = 0; i < extensions.length; i++) {\n        let strength = 0;\n \
    \       for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z') {\n                strength++;\n        \
    \    } else {\n                strength--;\n            }\n        }\n       \
    \ if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmp5t6gdeu6.js:41:12)\n    at Object.<anonymous> (/tmp/tmp5t6gdeu6.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension: string = extensions[i];\n        let strength: number = 0;\n    \
    \    for (let j = 0; j < extension.length; j++) {\n            let char: string\
    \ = extension[j];\n            if (char.toUpperCase() === char) {\n          \
    \      strength++;\n            } else {\n                strength--;\n      \
    \      }\n        }\n        if (strength > strongest_strength) {\n          \
    \  strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpuce4hll7.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuce4hll7.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ strength++;\n            } else {\n                strength--;\n           \
    \ }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp12r4k4a6.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12r4k4a6.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_strength = 0;\n  \
    \  for (let i = 0; i < extensions.length; i++) {\n        let strength = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpiif044lz.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiif044lz.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ strength++;\n            } else {\n                strength--;\n           \
    \ }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extensions[i];\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp12r4k4a6.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp12r4k4a6.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9vtagz30.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vtagz30.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength\
    \ += 1;\n            } else {\n                extension_strength -= 1;\n    \
    \        }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp16v3qrxk.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp16v3qrxk.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = getStrength(strongest_extension);\n    for (let i = 1; i < extensions.length;\
    \ i++) {\n        let strength = getStrength(extensions[i]);\n        if (strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extensions[i];\n\
    \            strongest_extension_strength = strength;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpx90v3dgy.js:20\n    var strongest_extension_strength = getStrength(strongest_extension);\n\
    \                                       ^\n\nReferenceError: getStrength is not\
    \ defined\n    at Strongest_Extension (/tmp/tmpx90v3dgy.js:20:40)\n    at test\
    \ (/tmp/tmpx90v3dgy.js:33:22)\n    at Object.<anonymous> (/tmp/tmpx90v3dgy.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n \
    \               strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpb58omd8c.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpb58omd8c.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n               \
    \ strength++;\n            } else {\n                strength--;\n           \
    \ }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpw0585ijs.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw0585ijs.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"Z\") {\n            \
    \    extension_strength++;\n            } else {\n                extension_strength--;\n\
    \            }\n        }\n        if (extension_strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmpjzmcr298.js:41:12)\n    at Object.<anonymous> (/tmp/tmpjzmcr298.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"Z\") {\n            \
    \    strength++;\n            } else {\n                strength--;\n        \
    \    }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmp6dq6y4cq.js:41:12)\n    at Object.<anonymous> (/tmp/tmp6dq6y4cq.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension_strength\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpvmf674af.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvmf674af.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267797
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension: string = extensions[i];\n        let strength: number = 0;\n    \
    \    for (let j = 0; j < extension.length; j++) {\n            let char: string\
    \ = extension[j];\n            if (char == char.toUpperCase()) {\n           \
    \     strength++;\n            } else {\n                strength--;\n       \
    \     }\n        }\n        if (strength > strongest_strength) {\n           \
    \ strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp9yme1ml7.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9yme1ml7.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprp_efjg3.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprp_efjg3.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    extensions.forEach(extension => {\n        let strength = 0;\n   \
    \     for (let i = 0; i < extension.length; i++) {\n            if (extension[i]\
    \ === extension[i].toUpperCase()) {\n                strength++;\n           \
    \ } else {\n                strength--;\n            }\n        }\n        if\
    \ (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    });\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp2vcz12a6.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2vcz12a6.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char.toUpperCase() === char) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpxotawfpf.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxotawfpf.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkrh0befn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkrh0befn.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ current_extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                current_extension_strength++;\n            } else {\n   \
    \             current_extension_strength--;\n            }\n        }\n      \
    \  if (current_extension_strength > strongest_extension_strength) {\n        \
    \    strongest_extension_strength = current_extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp3n9v9zvt.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3n9v9zvt.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmphdvjdbib.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphdvjdbib.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4ay1rad1.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4ay1rad1.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] == extensions[i][j].toUpperCase()) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpyoukgrgt.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyoukgrgt.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_strength = 0;\n  \
    \  for (let i = 0; i < extensions.length; i++) {\n        let strength = 0;\n\
    \        for (let j = 0; j < extensions[i].length; j++) {\n            if (extensions[i][j]\
    \ === extensions[i][j].toUpperCase()) {\n                strength++;\n       \
    \     } else {\n                strength--;\n            }\n        }\n      \
    \  if (strength > strongest_strength) {\n            strongest_strength = strength;\n\
    \            strongest_extension = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpiif044lz.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiif044lz.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ extension_strength: number = 0;\n        for (let j = 0; j < extensions[i].length;\
    \ j++) {\n            if (extensions[i][j] == extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1kji58bh.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1kji58bh.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    extensions.forEach(extension => {\n        let strength: number\
    \ = 0;\n        for (let i: number = 0; i < extension.length; i++) {\n       \
    \     if (extension[i] === extension[i].toUpperCase()) {\n                strength++;\n\
    \            } else {\n                strength--;\n            }\n        }\n\
    \        if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    });\n\
    \    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp_rwld628.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_rwld628.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkrh0befn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkrh0befn.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_strength = 0;\n  \
    \  for (let extension of extensions) {\n        let strength = 0;\n        for\
    \ (let letter of extension) {\n            if (letter === letter.toUpperCase())\
    \ {\n                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpfkz74c26.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfkz74c26.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = extensions[0];\n    let strongest_strength: number\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let strength:\
    \ number = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n    \
    \        if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n        \
    \        strength++;\n            } else {\n                strength--;\n    \
    \        }\n        }\n        if (strength > strongest_strength) {\n        \
    \    strongest = extensions[i];\n            strongest_strength = strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpma2cag6g.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpma2cag6g.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = extensions[0];\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpkrh0befn.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkrh0befn.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_strength:\
    \ number = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let\
    \ strength: number = 0;\n        for (let j = 0; j < extensions[i].length; j++)\
    \ {\n            if (extensions[i][j] === extensions[i][j].toUpperCase()) {\n\
    \                strength++;\n            } else {\n                strength--;\n\
    \            }\n        }\n        if (strength > strongest_strength) {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmprp_efjg3.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprp_efjg3.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267785
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let strength = 0;\n        for (let j = 0; j < extension.length;\
    \ j++) {\n            let char = extension[j];\n            if (char.toUpperCase()\
    \ === char) {\n                strength++;\n            } else {\n           \
    \     strength--;\n            }\n        }\n        if (strength > strongest_strength)\
    \ {\n            strongest_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpmio_d770.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmio_d770.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267791
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = \"\";\n    let strongest_strength = -Infinity;\n\
    \    for (let extension of extensions) {\n        let strength = extension.split(\"\
    \").reduce((acc, curr) => {\n            if (curr.toUpperCase() === curr) {\n\
    \                acc += 1;\n            } else {\n                acc -= 1;\n\
    \            }\n            return acc;\n        }, 0);\n        if (strength\
    \ > strongest_strength) {\n            strongest_strength = strength;\n      \
    \      strongest_extension = extension;\n        }\n    }\n    return `${class_name}.${strongest_extension}`;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmpgyy542va.js:44:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgyy542va.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = 0;\n    for (let i: number = 0; i < extensions.length; i++) {\n   \
    \     let extension_strength: number = 0;\n        for (let j: number = 0; j <\
    \ extensions[i].length; j++) {\n            if (extensions[i][j] === extensions[i][j].toUpperCase())\
    \ {\n                extension_strength++;\n            } else {\n           \
    \     extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp1josa6y2.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1josa6y2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    extensions.forEach(extension => {\n        let strength = extension.split('').filter(letter\
    \ => letter.match(/[A-Z]/)).length - extension.split('').filter(letter => letter.match(/[a-z]/)).length;\n\
    \        if (strength > strongest_extension_strength) {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    });\n\
    \    return `${class_name}.${strongest_extension}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.t'\n\nshould equal\n\n'__YESIMHERE.NuLl__'\n\
    \    at test (/tmp/tmpxff2z6jg.js:35:12)\n    at Object.<anonymous> (/tmp/tmpxff2z6jg.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.t',\n  expected: '__YESIMHERE.NuLl__',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let extension of extensions) {\n        let strength = 0;\n \
    \       for (let char of extension) {\n            if (char.toUpperCase() ===\
    \ char) {\n                strength++;\n            } else {\n               \
    \ strength--;\n            }\n        }\n        if (strength > strongest_extension_strength)\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4hyuv41f.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4hyuv41f.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension: string = \"\";\n    let strongest_extension_strength:\
    \ number = -Infinity;\n    for (let i = 0; i < extensions.length; i++) {\n   \
    \     let extension: string = extensions[i];\n        let extension_strength:\
    \ number = 0;\n        for (let j = 0; j < extension.length; j++) {\n        \
    \    let char: string = extension[j];\n            if (char.toUpperCase() ===\
    \ char) {\n                extension_strength++;\n            } else {\n     \
    \           extension_strength--;\n            }\n        }\n        if (extension_strength\
    \ > strongest_extension_strength) {\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_strength;\n        }\n \
    \   }\n    return class_name + \".\" + strongest_extension;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp7kjc203u.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7kjc203u.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest: string = \"\";\n    let strongest_strength: number = 0;\n\
    \    for (let i = 0; i < extensions.length; i++) {\n        let strength: number\
    \ = 0;\n        for (let j = 0; j < extensions[i].length; j++) {\n           \
    \ if (extensions[i][j] >= \"A\" && extensions[i][j] <= \"Z\") {\n            \
    \    strength++;\n            } else {\n                strength--;\n        \
    \    }\n        }\n        if (strength > strongest_strength) {\n            strongest_strength\
    \ = strength;\n            strongest = extensions[i];\n        }\n    }\n    return\
    \ class_name + \".\" + strongest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = Strongest_Extension;\n\
    \  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"\
    Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"Boku123\", [\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\");\n  assert.deepEqual(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"K\", [\"Ta\", \"TAR\"\
    , \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"__HAHA\"\
    , [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'Watashi.tEN'\n\nshould equal\n\n'Watashi.eIGHt8OKe'\n\
    \    at test (/tmp/tmp6dq6y4cq.js:41:12)\n    at Object.<anonymous> (/tmp/tmp6dq6y4cq.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'Watashi.tEN',\n  expected: 'Watashi.eIGHt8OKe',\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267801
- exit_code: 1
  program: "// @ts-nocheck\n\n//You will be given the name of a class (a string) and\
    \ an array of extensions.\n// The extensions are to be used to load additional\
    \ classes to the class. The\n// strength of the extension is as follows: Let CAP\
    \ be the number of the uppercase\n// letters in the extension's name, and let\
    \ SM be the number of lowercase letters \n// in the extension's name, the strength\
    \ is given by the fraction CAP - SM. \n// You should find the strongest extension\
    \ and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
    // If there are two or more extensions with the same strength, you should\n//\
    \ choose the one that comes first in the array.\n// For example, if you are given\
    \ \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n\
    // >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\
    \nfunction Strongest_Extension(class_name: string, extensions: string[]): string\
    \ {\n    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = 0;\n    for (let i = 0; i < extensions.length; i++) {\n        let extension\
    \ = extensions[i];\n        let extension_strength = 0;\n        for (let j =\
    \ 0; j < extension.length; j++) {\n            let char = extension[j];\n    \
    \        if (char === char.toUpperCase()) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength--;\n            }\n\
    \        }\n        if (extension_strength > strongest_extension_strength) {\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = Strongest_Extension;\n  assert.deepEqual(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
    );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
    , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
    );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\"\
    , \"WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\"\
    , \"91245\"]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"\
    Bb\"]),\"Sp.671235\");\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'__YESIMHERE.123NoooneB321'\n\nshould equal\n\
    \n'__YESIMHERE.NuLl__'\n    at test (/tmp/tmp4atpihf9.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4atpihf9.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '__YESIMHERE.123NoooneB321',\n\
    \  expected: '__YESIMHERE.NuLl__',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
  timestamp: 1660267786
